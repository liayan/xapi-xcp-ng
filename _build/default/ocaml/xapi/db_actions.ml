open API

type certificate_t = { certificate_uuid : string; certificate_host : ref_host; certificate_not_before : datetime; certificate_not_after : datetime; certificate_fingerprint : string }
type cluster_host_t = { cluster_host_uuid : string; cluster_host_cluster : ref_Cluster; cluster_host_host : ref_host; cluster_host_enabled : bool; cluster_host_PIF : ref_PIF; cluster_host_joined : bool; cluster_host_allowed_operations : cluster_host_operation_set; cluster_host_current_operations : string_to_cluster_host_operation_map; cluster_host_other_config : string_to_string_map }
type cluster_t = { cluster_uuid : string; cluster_cluster_hosts : ref_Cluster_host_set; cluster_pending_forget : string_set; cluster_cluster_token : string; cluster_cluster_stack : string; cluster_allowed_operations : cluster_operation_set; cluster_current_operations : string_to_cluster_operation_map; cluster_pool_auto_join : bool; cluster_token_timeout : float; cluster_token_timeout_coefficient : float; cluster_cluster_config : string_to_string_map; cluster_other_config : string_to_string_map }
type vUSB_t = { vUSB_uuid : string; vUSB_allowed_operations : vusb_operations_set; vUSB_current_operations : string_to_vusb_operations_map; vUSB_VM : ref_VM; vUSB_USB_group : ref_USB_group; vUSB_other_config : string_to_string_map; vUSB_currently_attached : bool }
type uSB_group_t = { uSB_group_uuid : string; uSB_group_name_label : string; uSB_group_name_description : string; uSB_group_PUSBs : ref_PUSB_set; uSB_group_VUSBs : ref_VUSB_set; uSB_group_other_config : string_to_string_map }
type pUSB_t = { pUSB_uuid : string; pUSB_USB_group : ref_USB_group; pUSB_host : ref_host; pUSB_path : string; pUSB_vendor_id : string; pUSB_vendor_desc : string; pUSB_product_id : string; pUSB_product_desc : string; pUSB_serial : string; pUSB_version : string; pUSB_description : string; pUSB_passthrough_enabled : bool; pUSB_other_config : string_to_string_map; pUSB_speed : float }
type sDN_controller_t = { sDN_controller_uuid : string; sDN_controller_protocol : sdn_controller_protocol; sDN_controller_address : string; sDN_controller_port : int64 }
type feature_t = { feature_uuid : string; feature_name_label : string; feature_name_description : string; feature_enabled : bool; feature_experimental : bool; feature_version : string; feature_host : ref_host }
type pVS_cache_storage_t = { pVS_cache_storage_uuid : string; pVS_cache_storage_host : ref_host; pVS_cache_storage_SR : ref_SR; pVS_cache_storage_site : ref_PVS_site; pVS_cache_storage_size : int64; pVS_cache_storage_VDI : ref_VDI }
type pVS_proxy_t = { pVS_proxy_uuid : string; pVS_proxy_site : ref_PVS_site; pVS_proxy_VIF : ref_VIF; pVS_proxy_currently_attached : bool; pVS_proxy_status : pvs_proxy_status }
type pVS_server_t = { pVS_server_uuid : string; pVS_server_addresses : string_set; pVS_server_first_port : int64; pVS_server_last_port : int64; pVS_server_site : ref_PVS_site }
type pVS_site_t = { pVS_site_uuid : string; pVS_site_name_label : string; pVS_site_name_description : string; pVS_site_PVS_uuid : string; pVS_site_cache_storage : ref_PVS_cache_storage_set; pVS_site_servers : ref_PVS_server_set; pVS_site_proxies : ref_PVS_proxy_set }
type vGPU_type_t = { vGPU_type_uuid : string; vGPU_type_vendor_name : string; vGPU_type_model_name : string; vGPU_type_framebuffer_size : int64; vGPU_type_max_heads : int64; vGPU_type_max_resolution_x : int64; vGPU_type_max_resolution_y : int64; vGPU_type_size : int64; vGPU_type_supported_on_PGPUs : ref_PGPU_set; vGPU_type_enabled_on_PGPUs : ref_PGPU_set; vGPU_type_VGPUs : ref_VGPU_set; vGPU_type_internal_config : string_to_string_map; vGPU_type_supported_on_GPU_groups : ref_GPU_group_set; vGPU_type_enabled_on_GPU_groups : ref_GPU_group_set; vGPU_type_implementation : vgpu_type_implementation; vGPU_type_identifier : string; vGPU_type_experimental : bool; vGPU_type_compatible_types_in_vm : ref_VGPU_type_set; vGPU_type_compatible_types_on_pgpu : ref_VGPU_type_set }
type vGPU_t = { vGPU_uuid : string; vGPU_VM : ref_VM; vGPU_GPU_group : ref_GPU_group; vGPU_device : string; vGPU_currently_attached : bool; vGPU_other_config : string_to_string_map; vGPU_type : ref_VGPU_type; vGPU_resident_on : ref_PGPU; vGPU_scheduled_to_be_resident_on : ref_PGPU; vGPU_compatibility_metadata : string_to_string_map; vGPU_extra_args : string; vGPU_PCI : ref_PCI }
type gPU_group_t = { gPU_group_uuid : string; gPU_group_name_label : string; gPU_group_name_description : string; gPU_group_PGPUs : ref_PGPU_set; gPU_group_VGPUs : ref_VGPU_set; gPU_group_GPU_types : string_set; gPU_group_other_config : string_to_string_map; gPU_group_allocation_algorithm : allocation_algorithm; gPU_group_supported_VGPU_types : ref_VGPU_type_set; gPU_group_enabled_VGPU_types : ref_VGPU_type_set }
type pGPU_t = { pGPU_uuid : string; pGPU_PCI : ref_PCI; pGPU_GPU_group : ref_GPU_group; pGPU_host : ref_host; pGPU_other_config : string_to_string_map; pGPU_supported_VGPU_types : ref_VGPU_type_set; pGPU_enabled_VGPU_types : ref_VGPU_type_set; pGPU_resident_VGPUs : ref_VGPU_set; pGPU_size : int64; pGPU_supported_VGPU_max_capacities : ref_VGPU_type_to_int64_map; pGPU_dom0_access : pgpu_dom0_access; pGPU_is_system_display_device : bool; pGPU_compatibility_metadata : string_to_string_map }
type pCI_t = { pCI_uuid : string; pCI_class_id : string; pCI_class_name : string; pCI_vendor_id : string; pCI_vendor_name : string; pCI_device_id : string; pCI_device_name : string; pCI_host : ref_host; pCI_pci_id : string; pCI_functions : int64; pCI_virtual_functions : ref_PCI_set; pCI_physical_function : ref_PCI; pCI_attached_VMs : ref_VM_set; pCI_dependencies : ref_PCI_set; pCI_other_config : string_to_string_map; pCI_subsystem_vendor_id : string; pCI_subsystem_vendor_name : string; pCI_subsystem_device_id : string; pCI_subsystem_device_name : string; pCI_scheduled_to_be_attached_to : ref_VM; pCI_driver_name : string }
type network_sriov_t = { network_sriov_uuid : string; network_sriov_physical_PIF : ref_PIF; network_sriov_logical_PIF : ref_PIF; network_sriov_requires_reboot : bool; network_sriov_configuration_mode : sriov_configuration_mode }
type tunnel_t = { tunnel_uuid : string; tunnel_access_PIF : ref_PIF; tunnel_transport_PIF : ref_PIF; tunnel_status : string_to_string_map; tunnel_other_config : string_to_string_map; tunnel_protocol : tunnel_protocol }
type secret_t = { secret_uuid : string; secret_value : string; secret_other_config : string_to_string_map }
type blob_t = { blob_uuid : string; blob_name_label : string; blob_name_description : string; blob_size : int64; blob_public : bool; blob_last_updated : datetime; blob_mime_type : string }
type user_t = { user_uuid : string; user_short_name : string; user_fullname : string; user_other_config : string_to_string_map }
type console_t = { console_uuid : string; console_protocol : console_protocol; console_location : string; console_VM : ref_VM; console_other_config : string_to_string_map; console_port : int64 }
type vTPM_t = { vTPM_uuid : string; vTPM_VM : ref_VM; vTPM_backend : ref_VM }
type crashdump_t = { crashdump_uuid : string; crashdump_VM : ref_VM; crashdump_VDI : ref_VDI; crashdump_other_config : string_to_string_map }
type pBD_t = { pBD_uuid : string; pBD_host : ref_host; pBD_SR : ref_SR; pBD_device_config : string_to_string_map; pBD_currently_attached : bool; pBD_other_config : string_to_string_map }
type vBD_metrics_t = { vBD_metrics_uuid : string; vBD_metrics_io_read_kbs : float; vBD_metrics_io_write_kbs : float; vBD_metrics_last_updated : datetime; vBD_metrics_other_config : string_to_string_map }
type vBD_t = { vBD_uuid : string; vBD_allowed_operations : vbd_operations_set; vBD_current_operations : string_to_vbd_operations_map; vBD_VM : ref_VM; vBD_VDI : ref_VDI; vBD_device : string; vBD_userdevice : string; vBD_bootable : bool; vBD_mode : vbd_mode; vBD_type : vbd_type; vBD_unpluggable : bool; vBD_storage_lock : bool; vBD_empty : bool; vBD_reserved : bool; vBD_other_config : string_to_string_map; vBD_currently_attached : bool; vBD_status_code : int64; vBD_status_detail : string; vBD_runtime_properties : string_to_string_map; vBD_qos_algorithm_type : string; vBD_qos_algorithm_params : string_to_string_map; vBD_qos_supported_algorithms : string_set; vBD_metrics : ref_VBD_metrics }
type vDI_t = { vDI_uuid : string; vDI_name_label : string; vDI_name_description : string; vDI_allowed_operations : vdi_operations_set; vDI_current_operations : string_to_vdi_operations_map; vDI_SR : ref_SR; vDI_VBDs : ref_VBD_set; vDI_crash_dumps : ref_crashdump_set; vDI_virtual_size : int64; vDI_physical_utilisation : int64; vDI_type : vdi_type; vDI_sharable : bool; vDI_read_only : bool; vDI_other_config : string_to_string_map; vDI_storage_lock : bool; vDI_location : string; vDI_managed : bool; vDI_missing : bool; vDI_parent : ref_VDI; vDI_xenstore_data : string_to_string_map; vDI_sm_config : string_to_string_map; vDI_is_a_snapshot : bool; vDI_snapshot_of : ref_VDI; vDI_snapshots : ref_VDI_set; vDI_snapshot_time : datetime; vDI_tags : string_set; vDI_allow_caching : bool; vDI_on_boot : on_boot; vDI_metadata_of_pool : ref_pool; vDI_metadata_latest : bool; vDI_is_tools_iso : bool; vDI_cbt_enabled : bool }
type lVHD_t = { lVHD_uuid : string }
type sR_t = { sR_uuid : string; sR_name_label : string; sR_name_description : string; sR_allowed_operations : storage_operations_set; sR_current_operations : string_to_storage_operations_map; sR_VDIs : ref_VDI_set; sR_PBDs : ref_PBD_set; sR_virtual_allocation : int64; sR_physical_utilisation : int64; sR_physical_size : int64; sR_type : string; sR_content_type : string; sR_shared : bool; sR_other_config : string_to_string_map; sR_tags : string_set; sR_default_vdi_visibility : bool; sR_sm_config : string_to_string_map; sR_blobs : string_to_ref_blob_map; sR_local_cache_enabled : bool; sR_introduced_by : ref_DR_task; sR_clustered : bool; sR_is_tools_sr : bool }
type sM_t = { sM_uuid : string; sM_name_label : string; sM_name_description : string; sM_type : string; sM_vendor : string; sM_copyright : string; sM_version : string; sM_required_api_version : string; sM_configuration : string_to_string_map; sM_capabilities : string_set; sM_features : string_to_int64_map; sM_other_config : string_to_string_map; sM_driver_filename : string; sM_required_cluster_stack : string_set }
type vLAN_t = { vLAN_uuid : string; vLAN_tagged_PIF : ref_PIF; vLAN_untagged_PIF : ref_PIF; vLAN_tag : int64; vLAN_other_config : string_to_string_map }
type bond_t = { bond_uuid : string; bond_master : ref_PIF; bond_slaves : ref_PIF_set; bond_other_config : string_to_string_map; bond_primary_slave : ref_PIF; bond_mode : bond_mode; bond_properties : string_to_string_map; bond_links_up : int64; bond_auto_update_mac : bool }
type pIF_metrics_t = { pIF_metrics_uuid : string; pIF_metrics_io_read_kbs : float; pIF_metrics_io_write_kbs : float; pIF_metrics_carrier : bool; pIF_metrics_vendor_id : string; pIF_metrics_vendor_name : string; pIF_metrics_device_id : string; pIF_metrics_device_name : string; pIF_metrics_speed : int64; pIF_metrics_duplex : bool; pIF_metrics_pci_bus_path : string; pIF_metrics_last_updated : datetime; pIF_metrics_other_config : string_to_string_map }
type pIF_t = { pIF_uuid : string; pIF_device : string; pIF_network : ref_network; pIF_host : ref_host; pIF_MAC : string; pIF_MTU : int64; pIF_VLAN : int64; pIF_device_name : string; pIF_metrics : ref_PIF_metrics; pIF_physical : bool; pIF_currently_attached : bool; pIF_ip_configuration_mode : ip_configuration_mode; pIF_IP : string; pIF_netmask : string; pIF_gateway : string; pIF_DNS : string; pIF_bond_slave_of : ref_Bond; pIF_bond_master_of : ref_Bond_set; pIF_VLAN_master_of : ref_VLAN; pIF_VLAN_slave_of : ref_VLAN_set; pIF_management : bool; pIF_other_config : string_to_string_map; pIF_disallow_unplug : bool; pIF_tunnel_access_PIF_of : ref_tunnel_set; pIF_tunnel_transport_PIF_of : ref_tunnel_set; pIF_ipv6_configuration_mode : ipv6_configuration_mode; pIF_IPv6 : string_set; pIF_ipv6_gateway : string; pIF_primary_address_type : primary_address_type; pIF_managed : bool; pIF_properties : string_to_string_map; pIF_capabilities : string_set; pIF_igmp_snooping_status : pif_igmp_status; pIF_sriov_physical_PIF_of : ref_network_sriov_set; pIF_sriov_logical_PIF_of : ref_network_sriov_set; pIF_PCI : ref_PCI }
type vIF_metrics_t = { vIF_metrics_uuid : string; vIF_metrics_io_read_kbs : float; vIF_metrics_io_write_kbs : float; vIF_metrics_last_updated : datetime; vIF_metrics_other_config : string_to_string_map }
type vIF_t = { vIF_uuid : string; vIF_allowed_operations : vif_operations_set; vIF_current_operations : string_to_vif_operations_map; vIF_device : string; vIF_network : ref_network; vIF_VM : ref_VM; vIF_MAC : string; vIF_MTU : int64; vIF_reserved : bool; vIF_other_config : string_to_string_map; vIF_currently_attached : bool; vIF_status_code : int64; vIF_status_detail : string; vIF_runtime_properties : string_to_string_map; vIF_qos_algorithm_type : string; vIF_qos_algorithm_params : string_to_string_map; vIF_qos_supported_algorithms : string_set; vIF_metrics : ref_VIF_metrics; vIF_MAC_autogenerated : bool; vIF_locking_mode : vif_locking_mode; vIF_ipv4_allowed : string_set; vIF_ipv6_allowed : string_set; vIF_ipv4_configuration_mode : vif_ipv4_configuration_mode; vIF_ipv4_addresses : string_set; vIF_ipv4_gateway : string; vIF_ipv6_configuration_mode : vif_ipv6_configuration_mode; vIF_ipv6_addresses : string_set; vIF_ipv6_gateway : string; vIF_reserved_pci : ref_PCI }
type network_t = { network_uuid : string; network_name_label : string; network_name_description : string; network_allowed_operations : network_operations_set; network_current_operations : string_to_network_operations_map; network_VIFs : ref_VIF_set; network_PIFs : ref_PIF_set; network_MTU : int64; network_other_config : string_to_string_map; network_bridge : string; network_managed : bool; network_blobs : string_to_ref_blob_map; network_tags : string_set; network_default_locking_mode : network_default_locking_mode; network_assigned_ips : ref_VIF_to_string_map; network_purpose : network_purpose_set }
type host_cpu_t = { host_cpu_uuid : string; host_cpu_host : ref_host; host_cpu_number : int64; host_cpu_vendor : string; host_cpu_speed : int64; host_cpu_modelname : string; host_cpu_family : int64; host_cpu_model : int64; host_cpu_stepping : string; host_cpu_flags : string; host_cpu_features : string; host_cpu_utilisation : float; host_cpu_other_config : string_to_string_map }
type host_metrics_t = { host_metrics_uuid : string; host_metrics_memory_total : int64; host_metrics_memory_free : int64; host_metrics_live : bool; host_metrics_last_updated : datetime; host_metrics_other_config : string_to_string_map }
type host_patch_t = { host_patch_uuid : string; host_patch_name_label : string; host_patch_name_description : string; host_patch_version : string; host_patch_host : ref_host; host_patch_filename : string; host_patch_applied : bool; host_patch_timestamp_applied : datetime; host_patch_size : int64; host_patch_pool_patch : ref_pool_patch; host_patch_other_config : string_to_string_map }
type host_crashdump_t = { host_crashdump_uuid : string; host_crashdump_host : ref_host; host_crashdump_timestamp : datetime; host_crashdump_size : int64; host_crashdump_filename : string; host_crashdump_other_config : string_to_string_map }
type host_t = { host_uuid : string; host_name_label : string; host_name_description : string; host_memory_overhead : int64; host_allowed_operations : host_allowed_operations_set; host_current_operations : string_to_host_allowed_operations_map; host_API_version_major : int64; host_API_version_minor : int64; host_API_version_vendor : string; host_API_version_vendor_implementation : string_to_string_map; host_enabled : bool; host_software_version : string_to_string_map; host_other_config : string_to_string_map; host_capabilities : string_set; host_cpu_configuration : string_to_string_map; host_sched_policy : string; host_supported_bootloaders : string_set; host_resident_VMs : ref_VM_set; host_logging : string_to_string_map; host_PIFs : ref_PIF_set; host_suspend_image_sr : ref_SR; host_crash_dump_sr : ref_SR; host_crashdumps : ref_host_crashdump_set; host_patches : ref_host_patch_set; host_updates : ref_pool_update_set; host_PBDs : ref_PBD_set; host_host_CPUs : ref_host_cpu_set; host_cpu_info : string_to_string_map; host_hostname : string; host_address : string; host_metrics : ref_host_metrics; host_license_params : string_to_string_map; host_boot_free_mem : int64; host_ha_statefiles : string_set; host_ha_network_peers : string_set; host_blobs : string_to_ref_blob_map; host_tags : string_set; host_external_auth_type : string; host_external_auth_service_name : string; host_external_auth_configuration : string_to_string_map; host_edition : string; host_license_server : string_to_string_map; host_bios_strings : string_to_string_map; host_power_on_mode : string; host_power_on_config : string_to_string_map; host_local_cache_sr : ref_SR; host_chipset_info : string_to_string_map; host_PCIs : ref_PCI_set; host_PGPUs : ref_PGPU_set; host_PUSBs : ref_PUSB_set; host_ssl_legacy : bool; host_guest_VCPUs_params : string_to_string_map; host_display : host_display; host_virtual_hardware_platform_versions : int64_set; host_control_domain : ref_VM; host_updates_requiring_reboot : ref_pool_update_set; host_features : ref_Feature_set; host_iscsi_iqn : string; host_multipathing : bool; host_uefi_certificates : string; host_certificates : ref_Certificate_set; host_editions : string_set; host_https_only : bool }
type dR_task_t = { dR_task_uuid : string; dR_task_introduced_SRs : ref_SR_set }
type vM_appliance_t = { vM_appliance_uuid : string; vM_appliance_name_label : string; vM_appliance_name_description : string; vM_appliance_allowed_operations : vm_appliance_operation_set; vM_appliance_current_operations : string_to_vm_appliance_operation_map; vM_appliance_VMs : ref_VM_set }
type vMSS_t = { vMSS_uuid : string; vMSS_name_label : string; vMSS_name_description : string; vMSS_enabled : bool; vMSS_type : vmss_type; vMSS_retained_snapshots : int64; vMSS_frequency : vmss_frequency; vMSS_schedule : string_to_string_map; vMSS_last_run_time : datetime; vMSS_VMs : ref_VM_set }
type vMPP_t = { vMPP_uuid : string; vMPP_name_label : string; vMPP_name_description : string; vMPP_is_policy_enabled : bool; vMPP_backup_type : vmpp_backup_type; vMPP_backup_retention_value : int64; vMPP_backup_frequency : vmpp_backup_frequency; vMPP_backup_schedule : string_to_string_map; vMPP_is_backup_running : bool; vMPP_backup_last_run_time : datetime; vMPP_archive_target_type : vmpp_archive_target_type; vMPP_archive_target_config : string_to_string_map; vMPP_archive_frequency : vmpp_archive_frequency; vMPP_archive_schedule : string_to_string_map; vMPP_is_archive_running : bool; vMPP_archive_last_run_time : datetime; vMPP_VMs : ref_VM_set; vMPP_is_alarm_enabled : bool; vMPP_alarm_config : string_to_string_map; vMPP_recent_alerts : string_set }
type vM_guest_metrics_t = { vM_guest_metrics_uuid : string; vM_guest_metrics_os_version : string_to_string_map; vM_guest_metrics_PV_drivers_version : string_to_string_map; vM_guest_metrics_PV_drivers_up_to_date : bool; vM_guest_metrics_memory : string_to_string_map; vM_guest_metrics_disks : string_to_string_map; vM_guest_metrics_networks : string_to_string_map; vM_guest_metrics_other : string_to_string_map; vM_guest_metrics_last_updated : datetime; vM_guest_metrics_other_config : string_to_string_map; vM_guest_metrics_live : bool; vM_guest_metrics_can_use_hotplug_vbd : tristate_type; vM_guest_metrics_can_use_hotplug_vif : tristate_type; vM_guest_metrics_PV_drivers_detected : bool }
type vM_metrics_t = { vM_metrics_uuid : string; vM_metrics_memory_actual : int64; vM_metrics_VCPUs_number : int64; vM_metrics_VCPUs_utilisation : int64_to_float_map; vM_metrics_VCPUs_CPU : int64_to_int64_map; vM_metrics_VCPUs_params : string_to_string_map; vM_metrics_VCPUs_flags : int64_to_string_set_map; vM_metrics_state : string_set; vM_metrics_start_time : datetime; vM_metrics_install_time : datetime; vM_metrics_last_updated : datetime; vM_metrics_other_config : string_to_string_map; vM_metrics_hvm : bool; vM_metrics_nested_virt : bool; vM_metrics_nomigrate : bool; vM_metrics_current_domain_type : domain_type }
type vM_t = { vM_uuid : string; vM_allowed_operations : vm_operations_set; vM_current_operations : string_to_vm_operations_map; vM_name_label : string; vM_name_description : string; vM_power_state : vm_power_state; vM_user_version : int64; vM_is_a_template : bool; vM_is_default_template : bool; vM_suspend_VDI : ref_VDI; vM_resident_on : ref_host; vM_scheduled_to_be_resident_on : ref_host; vM_affinity : ref_host; vM_memory_overhead : int64; vM_memory_target : int64; vM_memory_static_max : int64; vM_memory_dynamic_max : int64; vM_memory_dynamic_min : int64; vM_memory_static_min : int64; vM_VCPUs_params : string_to_string_map; vM_VCPUs_max : int64; vM_VCPUs_at_startup : int64; vM_actions_after_shutdown : on_normal_exit; vM_actions_after_reboot : on_normal_exit; vM_actions_after_crash : on_crash_behaviour; vM_consoles : ref_console_set; vM_VIFs : ref_VIF_set; vM_VBDs : ref_VBD_set; vM_VUSBs : ref_VUSB_set; vM_crash_dumps : ref_crashdump_set; vM_VTPMs : ref_VTPM_set; vM_PV_bootloader : string; vM_PV_kernel : string; vM_PV_ramdisk : string; vM_PV_args : string; vM_PV_bootloader_args : string; vM_PV_legacy_args : string; vM_HVM_boot_policy : string; vM_HVM_boot_params : string_to_string_map; vM_HVM_shadow_multiplier : float; vM_platform : string_to_string_map; vM_PCI_bus : string; vM_other_config : string_to_string_map; vM_domid : int64; vM_domarch : string; vM_last_boot_CPU_flags : string_to_string_map; vM_is_control_domain : bool; vM_metrics : ref_VM_metrics; vM_guest_metrics : ref_VM_guest_metrics; vM_last_booted_record : string; vM_recommendations : string; vM_xenstore_data : string_to_string_map; vM_ha_always_run : bool; vM_ha_restart_priority : string; vM_is_a_snapshot : bool; vM_snapshot_of : ref_VM; vM_snapshots : ref_VM_set; vM_snapshot_time : datetime; vM_transportable_snapshot_id : string; vM_blobs : string_to_ref_blob_map; vM_tags : string_set; vM_blocked_operations : vm_operations_to_string_map; vM_snapshot_info : string_to_string_map; vM_snapshot_metadata : string; vM_parent : ref_VM; vM_children : ref_VM_set; vM_bios_strings : string_to_string_map; vM_protection_policy : ref_VMPP; vM_is_snapshot_from_vmpp : bool; vM_snapshot_schedule : ref_VMSS; vM_is_vmss_snapshot : bool; vM_appliance : ref_VM_appliance; vM_start_delay : int64; vM_shutdown_delay : int64; vM_order : int64; vM_VGPUs : ref_VGPU_set; vM_attached_PCIs : ref_PCI_set; vM_suspend_SR : ref_SR; vM_version : int64; vM_generation_id : string; vM_hardware_platform_version : int64; vM_has_vendor_device : bool; vM_requires_reboot : bool; vM_reference_label : string; vM_domain_type : domain_type; vM_NVRAM : string_to_string_map }
type pool_update_t = { pool_update_uuid : string; pool_update_name_label : string; pool_update_name_description : string; pool_update_version : string; pool_update_installation_size : int64; pool_update_key : string; pool_update_after_apply_guidance : update_after_apply_guidance_set; pool_update_vdi : ref_VDI; pool_update_hosts : ref_host_set; pool_update_other_config : string_to_string_map; pool_update_enforce_homogeneity : bool }
type pool_patch_t = { pool_patch_uuid : string; pool_patch_name_label : string; pool_patch_name_description : string; pool_patch_version : string; pool_patch_filename : string; pool_patch_size : int64; pool_patch_pool_applied : bool; pool_patch_host_patches : ref_host_patch_set; pool_patch_after_apply_guidance : after_apply_guidance_set; pool_patch_pool_update : ref_pool_update; pool_patch_other_config : string_to_string_map }
type pool_t = { pool_uuid : string; pool_name_label : string; pool_name_description : string; pool_master : ref_host; pool_default_SR : ref_SR; pool_suspend_image_SR : ref_SR; pool_crash_dump_SR : ref_SR; pool_other_config : string_to_string_map; pool_ha_enabled : bool; pool_ha_configuration : string_to_string_map; pool_ha_statefiles : string_set; pool_ha_host_failures_to_tolerate : int64; pool_ha_plan_exists_for : int64; pool_ha_allow_overcommit : bool; pool_ha_overcommitted : bool; pool_blobs : string_to_ref_blob_map; pool_tags : string_set; pool_gui_config : string_to_string_map; pool_health_check_config : string_to_string_map; pool_wlb_url : string; pool_wlb_username : string; pool_wlb_password : ref_secret; pool_wlb_enabled : bool; pool_wlb_verify_cert : bool; pool_redo_log_enabled : bool; pool_redo_log_vdi : ref_VDI; pool_vswitch_controller : string; pool_restrictions : string_to_string_map; pool_metadata_VDIs : ref_VDI_set; pool_ha_cluster_stack : string; pool_allowed_operations : pool_allowed_operations_set; pool_current_operations : string_to_pool_allowed_operations_map; pool_guest_agent_config : string_to_string_map; pool_cpu_info : string_to_string_map; pool_policy_no_vendor_device : bool; pool_live_patching_disabled : bool; pool_igmp_snooping_enabled : bool; pool_uefi_certificates : string; pool_is_psr_pending : bool }
type task_t = { task_uuid : string; task_name_label : string; task_name_description : string; task_allowed_operations : task_allowed_operations_set; task_current_operations : string_to_task_allowed_operations_map; task_created : datetime; task_finished : datetime; task_status : task_status_type; task_session : ref_session; task_resident_on : ref_host; task_progress : float; task_externalpid : int64; task_stunnelpid : int64; task_forwarded : bool; task_forwarded_to : ref_host; task_type : string; task_result : string; task_error_info : string_set; task_other_config : string_to_string_map; task_subtask_of : ref_task; task_subtasks : ref_task_set; task_backtrace : string }
type role_t = { role_uuid : string; role_name_label : string; role_name_description : string; role_subroles : ref_role_set }
type subject_t = { subject_uuid : string; subject_subject_identifier : string; subject_other_config : string_to_string_map; subject_roles : ref_role_set }
type session_t = { session_uuid : string; session_this_host : ref_host; session_this_user : ref_user; session_last_active : datetime; session_pool : bool; session_other_config : string_to_string_map; session_is_local_superuser : bool; session_subject : ref_subject; session_validation_time : datetime; session_auth_user_sid : string; session_auth_user_name : string; session_rbac_permissions : string_set; session_tasks : ref_task_set; session_parent : ref_session; session_originator : string }
type data_source_t = { data_source_name_label : string; data_source_name_description : string; data_source_enabled : bool; data_source_standard : bool; data_source_units : string; data_source_min : float; data_source_max : float; data_source_value : float }
type probe_result_t = { probe_result_configuration : string_to_string_map; probe_result_complete : bool; probe_result_sr : sr_stat_t_option; probe_result_extra_info : string_to_string_map }
type vdi_nbd_server_info_t = { vdi_nbd_server_info_exportname : string; vdi_nbd_server_info_address : string; vdi_nbd_server_info_port : int64; vdi_nbd_server_info_cert : string; vdi_nbd_server_info_subject : string }

module DM_to_String = struct

  exception StringEnumTypeError of string
  exception DateTimeError of string
  open String_marshall_helper
  let rec __unused () = ()
  (**  *)
  and ref_Cluster_host_set  =
    fun s -> set ref_Cluster_host s
  (**  *)
  and ref_Cluster_set  =
    fun s -> set ref_Cluster s
  (**  *)
  and ref_USB_group_set  =
    fun s -> set ref_USB_group s
  (**  *)
  and ref_SDN_controller_set  =
    fun s -> set ref_SDN_controller s
  (**  *)
  and ref_PVS_proxy_set  =
    fun s -> set ref_PVS_proxy s
  (**  *)
  and ref_PVS_server_set  =
    fun s -> set ref_PVS_server s
  (**  *)
  and ref_PVS_site_set  =
    fun s -> set ref_PVS_site s
  (**  *)
  and ref_secret_set  =
    fun s -> set ref_secret s
  (**  *)
  and ref_blob_set  =
    fun s -> set ref_blob s
  (**  *)
  and ref_user_set  =
    fun s -> set ref_user s
  (**  *)
  and ref_VBD_metrics_set  =
    fun s -> set ref_VBD_metrics s
  (**  *)
  and ref_LVHD_set  =
    fun s -> set ref_LVHD s
  (**  *)
  and ref_SM_set  =
    fun s -> set ref_SM s
  (**  *)
  and ref_PIF_metrics_set  =
    fun s -> set ref_PIF_metrics s
  (**  *)
  and ref_network_sriov_set  =
    fun s -> set ref_network_sriov s
  (**  *)
  and ref_tunnel_set  =
    fun s -> set ref_tunnel s
  (**  *)
  and ref_VLAN_set  =
    fun s -> set ref_VLAN s
  (**  *)
  and ref_Bond_set  =
    fun s -> set ref_Bond s
  (**  *)
  and ref_VIF_metrics_set  =
    fun s -> set ref_VIF_metrics s
  (**  *)
  and ref_network_set  =
    fun s -> set ref_network s
  (**  *)
  and ref_host_metrics_set  =
    fun s -> set ref_host_metrics s
  (**  *)
  and ref_Certificate_set  =
    fun s -> set ref_Certificate s
  (**  *)
  and ref_Feature_set  =
    fun s -> set ref_Feature s
  (**  *)
  and ref_PUSB_set  =
    fun s -> set ref_PUSB s
  (**  *)
  and ref_host_cpu_set  =
    fun s -> set ref_host_cpu s
  (**  *)
  and ref_PBD_set  =
    fun s -> set ref_PBD s
  (**  *)
  and ref_host_crashdump_set  =
    fun s -> set ref_host_crashdump s
  (**  *)
  and ref_DR_task_set  =
    fun s -> set ref_DR_task s
  (**  *)
  and ref_VM_appliance_set  =
    fun s -> set ref_VM_appliance s
  (**  *)
  and ref_VMSS_set  =
    fun s -> set ref_VMSS s
  (**  *)
  and ref_VMPP_set  =
    fun s -> set ref_VMPP s
  (**  *)
  and ref_VM_guest_metrics_set  =
    fun s -> set ref_VM_guest_metrics s
  (**  *)
  and ref_VM_metrics_set  =
    fun s -> set ref_VM_metrics s
  (**  *)
  and ref_host_to_string_set_map  =
    fun m -> map ref_host string_set m
  (**  *)
  and ref_VGPU_set  =
    fun s -> set ref_VGPU s
  (**  *)
  and ref_VTPM_set  =
    fun s -> set ref_VTPM s
  (**  *)
  and ref_crashdump_set  =
    fun s -> set ref_crashdump s
  (**  *)
  and ref_VUSB_set  =
    fun s -> set ref_VUSB s
  (**  *)
  and ref_VBD_set  =
    fun s -> set ref_VBD s
  (**  *)
  and ref_VIF_set  =
    fun s -> set ref_VIF s
  (**  *)
  and ref_console_set  =
    fun s -> set ref_console s
  (**  *)
  and livepatch_status  =
    fun v -> match v with
      `ok_livepatch_complete -> "ok_livepatch_complete"
    | `ok_livepatch_incomplete -> "ok_livepatch_incomplete"
    | `ok -> "ok"
  (**  *)
  and ref_host_patch_set  =
    fun s -> set ref_host_patch s
  (**  *)
  and ref_pool_patch_set  =
    fun s -> set ref_pool_patch s
  (**  *)
  and ref_VM_to_string_set_map  =
    fun m -> map ref_VM string_set m
  (**  *)
  and ref_VM_to_string_to_string_map_map  =
    fun m -> map ref_VM string_to_string_map m
  (**  *)
  and hello_return  =
    fun v -> match v with
      `ok -> "ok"
    | `unknown_host -> "unknown_host"
    | `cannot_talk_back -> "cannot_talk_back"
  (**  *)
  and ref_pool_set  =
    fun s -> set ref_pool s
  (**  *)
  and ref_subject_set  =
    fun s -> set ref_subject s
  (**  *)
  and ref_task_set  =
    fun s -> set ref_task s
  (**  *)
  and ref_session_set  =
    fun s -> set ref_session s
  (**  *)
  and ref_subject  =
    (Ref.string_of : [`subject] Ref.t -> string)
  (**  *)
  and ref_role_set  =
    fun s -> set ref_role s
  (**  *)
  and ref_role  =
    (Ref.string_of : [`role] Ref.t -> string)
  (**  *)
  and task_allowed_operations_set  =
    fun s -> set task_allowed_operations s
  (**  *)
  and string_to_task_allowed_operations_map  =
    fun m -> map string task_allowed_operations m
  (**  *)
  and task_allowed_operations  =
    fun v -> match v with
      `cancel -> "cancel"
    | `destroy -> "destroy"
  (**  *)
  and task_status_type  =
    fun v -> match v with
      `pending -> "pending"
    | `success -> "success"
    | `failure -> "failure"
    | `cancelling -> "cancelling"
    | `cancelled -> "cancelled"
  (**  *)
  and ref_task  =
    (Ref.string_of : [`task] Ref.t -> string)
  (**  *)
  and pool_allowed_operations_set  =
    fun s -> set pool_allowed_operations s
  (**  *)
  and string_to_pool_allowed_operations_map  =
    fun m -> map string pool_allowed_operations m
  (**  *)
  and pool_allowed_operations  =
    fun v -> match v with
      `ha_enable -> "ha_enable"
    | `ha_disable -> "ha_disable"
    | `cluster_create -> "cluster_create"
    | `designate_new_master -> "designate_new_master"
  (**  *)
  and ref_SR_set  =
    fun s -> set ref_SR s
  (**  *)
  and ref_VM_to_string_map  =
    fun m -> map ref_VM string m
  (**  *)
  and after_apply_guidance_set  =
    fun s -> set after_apply_guidance s
  (**  *)
  and after_apply_guidance  =
    fun v -> match v with
      `restartHVM -> "restartHVM"
    | `restartPV -> "restartPV"
    | `restartHost -> "restartHost"
    | `restartXAPI -> "restartXAPI"
  (**  *)
  and update_after_apply_guidance_set  =
    fun s -> set update_after_apply_guidance s
  (**  *)
  and update_after_apply_guidance  =
    fun v -> match v with
      `restartHVM -> "restartHVM"
    | `restartPV -> "restartPV"
    | `restartHost -> "restartHost"
    | `restartXAPI -> "restartXAPI"
  (**  *)
  and ref_host_set  =
    fun s -> set ref_host s
  (**  *)
  and vm_operations_set  =
    fun s -> set vm_operations s
  (**  *)
  and string_to_vm_operations_map  =
    fun m -> map string vm_operations m
  (**  *)
  and vm_power_state  =
    fun v -> match v with
      `Halted -> "Halted"
    | `Paused -> "Paused"
    | `Running -> "Running"
    | `Suspended -> "Suspended"
  (**  *)
  and on_normal_exit  =
    fun v -> match v with
      `destroy -> "destroy"
    | `restart -> "restart"
  (**  *)
  and vm_operations_to_string_map  =
    fun m -> map vm_operations string m
  (**  *)
  and ref_VDI_to_ref_SR_map  =
    fun m -> map ref_VDI ref_SR m
  (**  *)
  and ref_VIF_to_ref_network_map  =
    fun m -> map ref_VIF ref_network m
  (**  *)
  and ref_VGPU_to_ref_GPU_group_map  =
    fun m -> map ref_VGPU ref_GPU_group m
  (**  *)
  and vm_operations  =
    fun v -> match v with
      `snapshot -> "snapshot"
    | `clone -> "clone"
    | `copy -> "copy"
    | `create_template -> "create_template"
    | `revert -> "revert"
    | `checkpoint -> "checkpoint"
    | `snapshot_with_quiesce -> "snapshot_with_quiesce"
    | `provision -> "provision"
    | `start -> "start"
    | `start_on -> "start_on"
    | `pause -> "pause"
    | `unpause -> "unpause"
    | `clean_shutdown -> "clean_shutdown"
    | `clean_reboot -> "clean_reboot"
    | `hard_shutdown -> "hard_shutdown"
    | `power_state_reset -> "power_state_reset"
    | `hard_reboot -> "hard_reboot"
    | `suspend -> "suspend"
    | `csvm -> "csvm"
    | `resume -> "resume"
    | `resume_on -> "resume_on"
    | `pool_migrate -> "pool_migrate"
    | `migrate_send -> "migrate_send"
    | `get_boot_record -> "get_boot_record"
    | `send_sysrq -> "send_sysrq"
    | `send_trigger -> "send_trigger"
    | `query_services -> "query_services"
    | `shutdown -> "shutdown"
    | `call_plugin -> "call_plugin"
    | `changing_memory_live -> "changing_memory_live"
    | `awaiting_memory_live -> "awaiting_memory_live"
    | `changing_dynamic_range -> "changing_dynamic_range"
    | `changing_static_range -> "changing_static_range"
    | `changing_memory_limits -> "changing_memory_limits"
    | `changing_shadow_memory -> "changing_shadow_memory"
    | `changing_shadow_memory_live -> "changing_shadow_memory_live"
    | `changing_VCPUs -> "changing_VCPUs"
    | `changing_VCPUs_live -> "changing_VCPUs_live"
    | `changing_NVRAM -> "changing_NVRAM"
    | `assert_operation_valid -> "assert_operation_valid"
    | `data_source_op -> "data_source_op"
    | `update_allowed_operations -> "update_allowed_operations"
    | `make_into_template -> "make_into_template"
    | `import -> "import"
    | `export -> "export"
    | `metadata_export -> "metadata_export"
    | `reverting -> "reverting"
    | `destroy -> "destroy"
  (**  *)
  and on_crash_behaviour  =
    fun v -> match v with
      `destroy -> "destroy"
    | `coredump_and_destroy -> "coredump_and_destroy"
    | `restart -> "restart"
    | `coredump_and_restart -> "coredump_and_restart"
    | `preserve -> "preserve"
    | `rename_restart -> "rename_restart"
  (**  *)
  and int64_to_float_map  =
    fun m -> map int64 float m
  (**  *)
  and int64_to_int64_map  =
    fun m -> map int64 int64 m
  (**  *)
  and int64_to_string_set_map  =
    fun m -> map int64 string_set m
  (**  *)
  and ref_VM_metrics  =
    (Ref.string_of : [`VM_metrics] Ref.t -> string)
  (**  *)
  and domain_type  =
    fun v -> match v with
      `hvm -> "hvm"
    | `pv -> "pv"
    | `pv_in_pvh -> "pv_in_pvh"
    | `unspecified -> "unspecified"
  (**  *)
  and tristate_type  =
    fun v -> match v with
      `yes -> "yes"
    | `no -> "no"
    | `unspecified -> "unspecified"
  (**  *)
  and ref_VM_guest_metrics  =
    (Ref.string_of : [`VM_guest_metrics] Ref.t -> string)
  (**  *)
  and vmpp_backup_type  =
    fun v -> match v with
      `snapshot -> "snapshot"
    | `checkpoint -> "checkpoint"
  (**  *)
  and vmpp_backup_frequency  =
    fun v -> match v with
      `hourly -> "hourly"
    | `daily -> "daily"
    | `weekly -> "weekly"
  (**  *)
  and vmpp_archive_frequency  =
    fun v -> match v with
      `never -> "never"
    | `always_after_backup -> "always_after_backup"
    | `daily -> "daily"
    | `weekly -> "weekly"
  (**  *)
  and vmpp_archive_target_type  =
    fun v -> match v with
      `none -> "none"
    | `cifs -> "cifs"
    | `nfs -> "nfs"
  (**  *)
  and ref_VMPP  =
    (Ref.string_of : [`VMPP] Ref.t -> string)
  (**  *)
  and vmss_frequency  =
    fun v -> match v with
      `hourly -> "hourly"
    | `daily -> "daily"
    | `weekly -> "weekly"
  (**  *)
  and ref_VMSS  =
    (Ref.string_of : [`VMSS] Ref.t -> string)
  (**  *)
  and vmss_type  =
    fun v -> match v with
      `snapshot -> "snapshot"
    | `checkpoint -> "checkpoint"
    | `snapshot_with_quiesce -> "snapshot_with_quiesce"
  (**  *)
  and vm_appliance_operation_set  =
    fun s -> set vm_appliance_operation s
  (**  *)
  and string_to_vm_appliance_operation_map  =
    fun m -> map string vm_appliance_operation m
  (**  *)
  and vm_appliance_operation  =
    fun v -> match v with
      `start -> "start"
    | `clean_shutdown -> "clean_shutdown"
    | `hard_shutdown -> "hard_shutdown"
    | `shutdown -> "shutdown"
  (**  *)
  and ref_VM_appliance  =
    (Ref.string_of : [`VM_appliance] Ref.t -> string)
  (**  *)
  and ref_session  =
    (Ref.string_of : [`session] Ref.t -> string)
  (**  *)
  and host_allowed_operations_set  =
    fun s -> set host_allowed_operations s
  (**  *)
  and string_to_host_allowed_operations_map  =
    fun m -> map string host_allowed_operations m
  (**  *)
  and host_allowed_operations  =
    fun v -> match v with
      `provision -> "provision"
    | `evacuate -> "evacuate"
    | `shutdown -> "shutdown"
    | `reboot -> "reboot"
    | `power_on -> "power_on"
    | `vm_start -> "vm_start"
    | `vm_resume -> "vm_resume"
    | `vm_migrate -> "vm_migrate"
  (**  *)
  and host_display  =
    fun v -> match v with
      `enabled -> "enabled"
    | `disable_on_reboot -> "disable_on_reboot"
    | `disabled -> "disabled"
    | `enable_on_reboot -> "enable_on_reboot"
  (**  *)
  and int64_set  =
    fun s -> set int64 s
  (**  *)
  and ref_pool_update_set  =
    fun s -> set ref_pool_update s
  (**  *)
  and ref_pool_update  =
    (Ref.string_of : [`pool_update] Ref.t -> string)
  (**  *)
  and ref_VDI_to_string_map  =
    fun m -> map ref_VDI string m
  (**  *)
  and ref_VDI_set  =
    fun s -> set ref_VDI s
  (**  *)
  and secretstring  =
    fun x -> x |> SecretString.rpc_of_t |> Rpc.string_of_rpc
  (**  *)
  and host_sched_gran  =
    fun v -> match v with
      `core -> "core"
    | `cpu -> "cpu"
    | `socket -> "socket"
  (**  *)
  and ref_host_crashdump  =
    (Ref.string_of : [`host_crashdump] Ref.t -> string)
  (**  *)
  and ref_pool_patch  =
    (Ref.string_of : [`pool_patch] Ref.t -> string)
  (**  *)
  and ref_host_patch  =
    (Ref.string_of : [`host_patch] Ref.t -> string)
  (**  *)
  and ref_host_metrics  =
    (Ref.string_of : [`host_metrics] Ref.t -> string)
  (**  *)
  and ref_host_cpu  =
    (Ref.string_of : [`host_cpu] Ref.t -> string)
  (**  *)
  and network_operations_set  =
    fun s -> set network_operations s
  (**  *)
  and string_to_network_operations_map  =
    fun m -> map string network_operations m
  (**  *)
  and network_operations  =
    fun v -> match v with
      `attaching -> "attaching"
  (**  *)
  and ref_VIF_to_string_map  =
    fun m -> map ref_VIF string m
  (**  *)
  and network_purpose_set  =
    fun s -> set network_purpose s
  (**  *)
  and network_default_locking_mode  =
    fun v -> match v with
      `unlocked -> "unlocked"
    | `disabled -> "disabled"
  (**  *)
  and network_purpose  =
    fun v -> match v with
      `nbd -> "nbd"
    | `insecure_nbd -> "insecure_nbd"
  (**  *)
  and vif_operations_set  =
    fun s -> set vif_operations s
  (**  *)
  and string_to_vif_operations_map  =
    fun m -> map string vif_operations m
  (**  *)
  and vif_operations  =
    fun v -> match v with
      `attach -> "attach"
    | `plug -> "plug"
    | `unplug -> "unplug"
  (**  *)
  and vif_locking_mode  =
    fun v -> match v with
      `network_default -> "network_default"
    | `locked -> "locked"
    | `unlocked -> "unlocked"
    | `disabled -> "disabled"
  (**  *)
  and vif_ipv4_configuration_mode  =
    fun v -> match v with
      `None -> "None"
    | `Static -> "Static"
  (**  *)
  and vif_ipv6_configuration_mode  =
    fun v -> match v with
      `None -> "None"
    | `Static -> "Static"
  (**  *)
  and ref_VIF_metrics  =
    (Ref.string_of : [`VIF_metrics] Ref.t -> string)
  (**  *)
  and pif_igmp_status  =
    fun v -> match v with
      `enabled -> "enabled"
    | `disabled -> "disabled"
    | `unknown -> "unknown"
  (**  *)
  and ip_configuration_mode  =
    fun v -> match v with
      `None -> "None"
    | `DHCP -> "DHCP"
    | `Static -> "Static"
  (**  *)
  and ipv6_configuration_mode  =
    fun v -> match v with
      `None -> "None"
    | `DHCP -> "DHCP"
    | `Static -> "Static"
    | `Autoconf -> "Autoconf"
  (**  *)
  and primary_address_type  =
    fun v -> match v with
      `IPv4 -> "IPv4"
    | `IPv6 -> "IPv6"
  (**  *)
  and ref_PIF_metrics  =
    (Ref.string_of : [`PIF_metrics] Ref.t -> string)
  (**  *)
  and ref_PIF_set  =
    fun s -> set ref_PIF s
  (**  *)
  and bond_mode  =
    fun v -> match v with
      `balanceslb -> "balance-slb"
    | `activebackup -> "active-backup"
    | `lacp -> "lacp"
  (**  *)
  and ref_Bond  =
    (Ref.string_of : [`Bond] Ref.t -> string)
  (**  *)
  and ref_VLAN  =
    (Ref.string_of : [`VLAN] Ref.t -> string)
  (**  *)
  and string_to_int64_map  =
    fun m -> map string int64 m
  (**  *)
  and ref_SM  =
    (Ref.string_of : [`SM] Ref.t -> string)
  (**  *)
  and storage_operations_set  =
    fun s -> set storage_operations s
  (**  *)
  and string_to_storage_operations_map  =
    fun m -> map string storage_operations m
  (**  *)
  and storage_operations  =
    fun v -> match v with
      `scan -> "scan"
    | `destroy -> "destroy"
    | `forget -> "forget"
    | `plug -> "plug"
    | `unplug -> "unplug"
    | `update -> "update"
    | `vdi_create -> "vdi_create"
    | `vdi_introduce -> "vdi_introduce"
    | `vdi_destroy -> "vdi_destroy"
    | `vdi_resize -> "vdi_resize"
    | `vdi_clone -> "vdi_clone"
    | `vdi_snapshot -> "vdi_snapshot"
    | `vdi_mirror -> "vdi_mirror"
    | `vdi_enable_cbt -> "vdi_enable_cbt"
    | `vdi_disable_cbt -> "vdi_disable_cbt"
    | `vdi_data_destroy -> "vdi_data_destroy"
    | `vdi_list_changed_blocks -> "vdi_list_changed_blocks"
    | `vdi_set_on_boot -> "vdi_set_on_boot"
    | `pbd_create -> "pbd_create"
    | `pbd_destroy -> "pbd_destroy"
  (**  *)
  and string_to_ref_blob_map  =
    fun m -> map string ref_blob m
  (**  *)
  and ref_DR_task  =
    (Ref.string_of : [`DR_task] Ref.t -> string)
  (**  *)
  and ref_LVHD  =
    (Ref.string_of : [`LVHD] Ref.t -> string)
  (**  *)
  and vdi_operations_set  =
    fun s -> set vdi_operations s
  (**  *)
  and string_to_vdi_operations_map  =
    fun m -> map string vdi_operations m
  (**  *)
  and vdi_operations  =
    fun v -> match v with
      `clone -> "clone"
    | `copy -> "copy"
    | `resize -> "resize"
    | `resize_online -> "resize_online"
    | `snapshot -> "snapshot"
    | `mirror -> "mirror"
    | `destroy -> "destroy"
    | `forget -> "forget"
    | `update -> "update"
    | `force_unlock -> "force_unlock"
    | `generate_config -> "generate_config"
    | `enable_cbt -> "enable_cbt"
    | `disable_cbt -> "disable_cbt"
    | `data_destroy -> "data_destroy"
    | `list_changed_blocks -> "list_changed_blocks"
    | `set_on_boot -> "set_on_boot"
    | `blocked -> "blocked"
  (**  *)
  and vdi_type  =
    fun v -> match v with
      `system -> "system"
    | `user -> "user"
    | `ephemeral -> "ephemeral"
    | `suspend -> "suspend"
    | `crashdump -> "crashdump"
    | `ha_statefile -> "ha_statefile"
    | `metadata -> "metadata"
    | `redo_log -> "redo_log"
    | `rrd -> "rrd"
    | `pvs_cache -> "pvs_cache"
    | `cbt_metadata -> "cbt_metadata"
  (**  *)
  and ref_pool  =
    (Ref.string_of : [`pool] Ref.t -> string)
  (**  *)
  and on_boot  =
    fun v -> match v with
      `reset -> "reset"
    | `persist -> "persist"
  (**  *)
  and vbd_operations_set  =
    fun s -> set vbd_operations s
  (**  *)
  and string_to_vbd_operations_map  =
    fun m -> map string vbd_operations m
  (**  *)
  and vbd_operations  =
    fun v -> match v with
      `attach -> "attach"
    | `eject -> "eject"
    | `insert -> "insert"
    | `plug -> "plug"
    | `unplug -> "unplug"
    | `unplug_force -> "unplug_force"
    | `pause -> "pause"
    | `unpause -> "unpause"
  (**  *)
  and vbd_type  =
    fun v -> match v with
      `CD -> "CD"
    | `Disk -> "Disk"
    | `Floppy -> "Floppy"
  (**  *)
  and ref_VBD  =
    (Ref.string_of : [`VBD] Ref.t -> string)
  (**  *)
  and vbd_mode  =
    fun v -> match v with
      `RO -> "RO"
    | `RW -> "RW"
  (**  *)
  and ref_VBD_metrics  =
    (Ref.string_of : [`VBD_metrics] Ref.t -> string)
  (**  *)
  and ref_PBD  =
    (Ref.string_of : [`PBD] Ref.t -> string)
  (**  *)
  and ref_crashdump  =
    (Ref.string_of : [`crashdump] Ref.t -> string)
  (**  *)
  and ref_VTPM  =
    (Ref.string_of : [`VTPM] Ref.t -> string)
  (**  *)
  and console_protocol  =
    fun v -> match v with
      `vt100 -> "vt100"
    | `rfb -> "rfb"
    | `rdp -> "rdp"
  (**  *)
  and ref_console  =
    (Ref.string_of : [`console] Ref.t -> string)
  (**  *)
  and ref_user  =
    (Ref.string_of : [`user] Ref.t -> string)
  (**  *)
  and ref_blob  =
    (Ref.string_of : [`blob] Ref.t -> string)
  (**  *)
  and ref_secret  =
    (Ref.string_of : [`secret] Ref.t -> string)
  (**  *)
  and tunnel_protocol  =
    fun v -> match v with
      `gre -> "gre"
    | `vxlan -> "vxlan"
  (**  *)
  and ref_tunnel  =
    (Ref.string_of : [`tunnel] Ref.t -> string)
  (**  *)
  and sriov_configuration_mode  =
    fun v -> match v with
      `sysfs -> "sysfs"
    | `modprobe -> "modprobe"
    | `unknown -> "unknown"
  (**  *)
  and ref_network_sriov  =
    (Ref.string_of : [`network_sriov] Ref.t -> string)
  (**  *)
  and ref_VM_set  =
    fun s -> set ref_VM s
  (**  *)
  and ref_PCI_set  =
    fun s -> set ref_PCI s
  (**  *)
  and ref_VGPU_type_to_int64_map  =
    fun m -> map ref_VGPU_type int64 m
  (**  *)
  and pgpu_dom0_access  =
    fun v -> match v with
      `enabled -> "enabled"
    | `disable_on_reboot -> "disable_on_reboot"
    | `disabled -> "disabled"
    | `enable_on_reboot -> "enable_on_reboot"
  (**  *)
  and allocation_algorithm  =
    fun v -> match v with
      `breadth_first -> "breadth_first"
    | `depth_first -> "depth_first"
  (**  *)
  and ref_PCI  =
    (Ref.string_of : [`PCI] Ref.t -> string)
  (**  *)
  and ref_VGPU  =
    (Ref.string_of : [`VGPU] Ref.t -> string)
  (**  *)
  and ref_PGPU_set  =
    fun s -> set ref_PGPU s
  (**  *)
  and ref_PGPU  =
    (Ref.string_of : [`PGPU] Ref.t -> string)
  (**  *)
  and ref_GPU_group_set  =
    fun s -> set ref_GPU_group s
  (**  *)
  and ref_GPU_group  =
    (Ref.string_of : [`GPU_group] Ref.t -> string)
  (**  *)
  and vgpu_type_implementation  =
    fun v -> match v with
      `passthrough -> "passthrough"
    | `nvidia -> "nvidia"
    | `nvidia_sriov -> "nvidia_sriov"
    | `gvt_g -> "gvt_g"
    | `mxgpu -> "mxgpu"
  (**  *)
  and ref_VGPU_type_set  =
    fun s -> set ref_VGPU_type s
  (**  *)
  and ref_VGPU_type  =
    (Ref.string_of : [`VGPU_type] Ref.t -> string)
  (**  *)
  and ref_PVS_cache_storage_set  =
    fun s -> set ref_PVS_cache_storage s
  (**  *)
  and ref_PVS_server  =
    (Ref.string_of : [`PVS_server] Ref.t -> string)
  (**  *)
  and pvs_proxy_status  =
    fun v -> match v with
      `stopped -> "stopped"
    | `initialised -> "initialised"
    | `caching -> "caching"
    | `incompatible_write_cache_mode -> "incompatible_write_cache_mode"
    | `incompatible_protocol_version -> "incompatible_protocol_version"
  (**  *)
  and ref_VIF  =
    (Ref.string_of : [`VIF] Ref.t -> string)
  (**  *)
  and ref_PVS_proxy  =
    (Ref.string_of : [`PVS_proxy] Ref.t -> string)
  (**  *)
  and ref_SR  =
    (Ref.string_of : [`SR] Ref.t -> string)
  (**  *)
  and ref_PVS_site  =
    (Ref.string_of : [`PVS_site] Ref.t -> string)
  (**  *)
  and ref_PVS_cache_storage  =
    (Ref.string_of : [`PVS_cache_storage] Ref.t -> string)
  (**  *)
  and ref_VDI  =
    (Ref.string_of : [`VDI] Ref.t -> string)
  (**  *)
  and ref_Feature  =
    (Ref.string_of : [`Feature] Ref.t -> string)
  (**  *)
  and sdn_controller_protocol  =
    fun v -> match v with
      `ssl -> "ssl"
    | `pssl -> "pssl"
  (**  *)
  and int64  =
    Int64.to_string
  (**  *)
  and ref_SDN_controller  =
    (Ref.string_of : [`SDN_controller] Ref.t -> string)
  (**  *)
  and ref_PUSB  =
    (Ref.string_of : [`PUSB] Ref.t -> string)
  (**  *)
  and vusb_operations_set  =
    fun s -> set vusb_operations s
  (**  *)
  and string_to_vusb_operations_map  =
    fun m -> map string vusb_operations m
  (**  *)
  and vusb_operations  =
    fun v -> match v with
      `attach -> "attach"
    | `plug -> "plug"
    | `unplug -> "unplug"
  (**  *)
  and ref_VM  =
    (Ref.string_of : [`VM] Ref.t -> string)
  (**  *)
  and ref_USB_group  =
    (Ref.string_of : [`USB_group] Ref.t -> string)
  (**  *)
  and ref_VUSB  =
    (Ref.string_of : [`VUSB] Ref.t -> string)
  (**  *)
  and string_set  =
    fun s -> set string s
  (**  *)
  and cluster_operation_set  =
    fun s -> set cluster_operation s
  (**  *)
  and string_to_cluster_operation_map  =
    fun m -> map string cluster_operation m
  (**  *)
  and cluster_operation  =
    fun v -> match v with
      `add -> "add"
    | `remove -> "remove"
    | `enable -> "enable"
    | `disable -> "disable"
    | `destroy -> "destroy"
  (**  *)
  and ref_network  =
    (Ref.string_of : [`network] Ref.t -> string)
  (**  *)
  and float  =
    Printf.sprintf "%0.18g"
  (**  *)
  and bool  =
    string_of_bool
  (**  *)
  and cluster_host_operation_set  =
    fun s -> set cluster_host_operation s
  (**  *)
  and string_to_cluster_host_operation_map  =
    fun m -> map string cluster_host_operation m
  (**  *)
  and cluster_host_operation  =
    fun v -> match v with
      `enable -> "enable"
    | `disable -> "disable"
    | `destroy -> "destroy"
  (**  *)
  and string_to_string_map  =
    fun m -> map string string m
  (**  *)
  and ref_Cluster  =
    (Ref.string_of : [`Cluster] Ref.t -> string)
  (**  *)
  and ref_PIF  =
    (Ref.string_of : [`PIF] Ref.t -> string)
  (**  *)
  and ref_Cluster_host  =
    (Ref.string_of : [`Cluster_host] Ref.t -> string)
  (**  *)
  and ref_host  =
    (Ref.string_of : [`host] Ref.t -> string)
  (**  *)
  and datetime  =
    fun x -> (try Date.assert_utc x with Invalid_argument s -> raise (DateTimeError s)); Date.to_string x
  (**  *)
  and ref_Certificate  =
    (Ref.string_of : [`Certificate] Ref.t -> string)
  (**  *)
  and string  =
    fun x -> x

end


module String_to_DM = struct

  exception StringEnumTypeError of string
  open String_unmarshall_helper
  let rec __unused () = ()
  (**  *)
  and ref_Cluster_host_set  =
    fun s -> set ref_Cluster_host s
  (**  *)
  and ref_Cluster_set  =
    fun s -> set ref_Cluster s
  (**  *)
  and ref_USB_group_set  =
    fun s -> set ref_USB_group s
  (**  *)
  and ref_SDN_controller_set  =
    fun s -> set ref_SDN_controller s
  (**  *)
  and ref_PVS_proxy_set  =
    fun s -> set ref_PVS_proxy s
  (**  *)
  and ref_PVS_server_set  =
    fun s -> set ref_PVS_server s
  (**  *)
  and ref_PVS_site_set  =
    fun s -> set ref_PVS_site s
  (**  *)
  and ref_secret_set  =
    fun s -> set ref_secret s
  (**  *)
  and ref_blob_set  =
    fun s -> set ref_blob s
  (**  *)
  and ref_user_set  =
    fun s -> set ref_user s
  (**  *)
  and ref_VBD_metrics_set  =
    fun s -> set ref_VBD_metrics s
  (**  *)
  and ref_LVHD_set  =
    fun s -> set ref_LVHD s
  (**  *)
  and ref_SM_set  =
    fun s -> set ref_SM s
  (**  *)
  and ref_PIF_metrics_set  =
    fun s -> set ref_PIF_metrics s
  (**  *)
  and ref_network_sriov_set  =
    fun s -> set ref_network_sriov s
  (**  *)
  and ref_tunnel_set  =
    fun s -> set ref_tunnel s
  (**  *)
  and ref_VLAN_set  =
    fun s -> set ref_VLAN s
  (**  *)
  and ref_Bond_set  =
    fun s -> set ref_Bond s
  (**  *)
  and ref_VIF_metrics_set  =
    fun s -> set ref_VIF_metrics s
  (**  *)
  and ref_network_set  =
    fun s -> set ref_network s
  (**  *)
  and ref_host_metrics_set  =
    fun s -> set ref_host_metrics s
  (**  *)
  and ref_Certificate_set  =
    fun s -> set ref_Certificate s
  (**  *)
  and ref_Feature_set  =
    fun s -> set ref_Feature s
  (**  *)
  and ref_PUSB_set  =
    fun s -> set ref_PUSB s
  (**  *)
  and ref_host_cpu_set  =
    fun s -> set ref_host_cpu s
  (**  *)
  and ref_PBD_set  =
    fun s -> set ref_PBD s
  (**  *)
  and ref_host_crashdump_set  =
    fun s -> set ref_host_crashdump s
  (**  *)
  and ref_DR_task_set  =
    fun s -> set ref_DR_task s
  (**  *)
  and ref_VM_appliance_set  =
    fun s -> set ref_VM_appliance s
  (**  *)
  and ref_VMSS_set  =
    fun s -> set ref_VMSS s
  (**  *)
  and ref_VMPP_set  =
    fun s -> set ref_VMPP s
  (**  *)
  and ref_VM_guest_metrics_set  =
    fun s -> set ref_VM_guest_metrics s
  (**  *)
  and ref_VM_metrics_set  =
    fun s -> set ref_VM_metrics s
  (**  *)
  and ref_host_to_string_set_map  =
    fun m -> map ref_host string_set m
  (**  *)
  and ref_VGPU_set  =
    fun s -> set ref_VGPU s
  (**  *)
  and ref_VTPM_set  =
    fun s -> set ref_VTPM s
  (**  *)
  and ref_crashdump_set  =
    fun s -> set ref_crashdump s
  (**  *)
  and ref_VUSB_set  =
    fun s -> set ref_VUSB s
  (**  *)
  and ref_VBD_set  =
    fun s -> set ref_VBD s
  (**  *)
  and ref_VIF_set  =
    fun s -> set ref_VIF s
  (**  *)
  and ref_console_set  =
    fun s -> set ref_console s
  (**  *)
  and livepatch_status  =
    fun v -> match v with
      "ok_livepatch_complete" -> `ok_livepatch_complete
    | "ok_livepatch_incomplete" -> `ok_livepatch_incomplete
    | "ok" -> `ok
    | _ -> raise (StringEnumTypeError "livepatch_status")
  (**  *)
  and ref_host_patch_set  =
    fun s -> set ref_host_patch s
  (**  *)
  and ref_pool_patch_set  =
    fun s -> set ref_pool_patch s
  (**  *)
  and ref_VM_to_string_set_map  =
    fun m -> map ref_VM string_set m
  (**  *)
  and ref_VM_to_string_to_string_map_map  =
    fun m -> map ref_VM string_to_string_map m
  (**  *)
  and hello_return  =
    fun v -> match v with
      "ok" -> `ok
    | "unknown_host" -> `unknown_host
    | "cannot_talk_back" -> `cannot_talk_back
    | _ -> raise (StringEnumTypeError "hello_return")
  (**  *)
  and ref_pool_set  =
    fun s -> set ref_pool s
  (**  *)
  and ref_subject_set  =
    fun s -> set ref_subject s
  (**  *)
  and ref_task_set  =
    fun s -> set ref_task s
  (**  *)
  and ref_session_set  =
    fun s -> set ref_session s
  (**  *)
  and ref_subject  =
    fun x -> (Ref.of_string x : [`subject] Ref.t)
  (**  *)
  and ref_role_set  =
    fun s -> set ref_role s
  (**  *)
  and ref_role  =
    fun x -> (Ref.of_string x : [`role] Ref.t)
  (**  *)
  and task_allowed_operations_set  =
    fun s -> set task_allowed_operations s
  (**  *)
  and string_to_task_allowed_operations_map  =
    fun m -> map string task_allowed_operations m
  (**  *)
  and task_allowed_operations  =
    fun v -> match v with
      "cancel" -> `cancel
    | "destroy" -> `destroy
    | _ -> raise (StringEnumTypeError "task_allowed_operations")
  (**  *)
  and task_status_type  =
    fun v -> match v with
      "pending" -> `pending
    | "success" -> `success
    | "failure" -> `failure
    | "cancelling" -> `cancelling
    | "cancelled" -> `cancelled
    | _ -> raise (StringEnumTypeError "task_status_type")
  (**  *)
  and ref_task  =
    fun x -> (Ref.of_string x : [`task] Ref.t)
  (**  *)
  and pool_allowed_operations_set  =
    fun s -> set pool_allowed_operations s
  (**  *)
  and string_to_pool_allowed_operations_map  =
    fun m -> map string pool_allowed_operations m
  (**  *)
  and pool_allowed_operations  =
    fun v -> match v with
      "ha_enable" -> `ha_enable
    | "ha_disable" -> `ha_disable
    | "cluster_create" -> `cluster_create
    | "designate_new_master" -> `designate_new_master
    | _ -> raise (StringEnumTypeError "pool_allowed_operations")
  (**  *)
  and ref_SR_set  =
    fun s -> set ref_SR s
  (**  *)
  and ref_VM_to_string_map  =
    fun m -> map ref_VM string m
  (**  *)
  and after_apply_guidance_set  =
    fun s -> set after_apply_guidance s
  (**  *)
  and after_apply_guidance  =
    fun v -> match v with
      "restartHVM" -> `restartHVM
    | "restartPV" -> `restartPV
    | "restartHost" -> `restartHost
    | "restartXAPI" -> `restartXAPI
    | _ -> raise (StringEnumTypeError "after_apply_guidance")
  (**  *)
  and update_after_apply_guidance_set  =
    fun s -> set update_after_apply_guidance s
  (**  *)
  and update_after_apply_guidance  =
    fun v -> match v with
      "restartHVM" -> `restartHVM
    | "restartPV" -> `restartPV
    | "restartHost" -> `restartHost
    | "restartXAPI" -> `restartXAPI
    | _ -> raise (StringEnumTypeError "update_after_apply_guidance")
  (**  *)
  and ref_host_set  =
    fun s -> set ref_host s
  (**  *)
  and vm_operations_set  =
    fun s -> set vm_operations s
  (**  *)
  and string_to_vm_operations_map  =
    fun m -> map string vm_operations m
  (**  *)
  and vm_power_state  =
    fun v -> match v with
      "Halted" -> `Halted
    | "Paused" -> `Paused
    | "Running" -> `Running
    | "Suspended" -> `Suspended
    | _ -> raise (StringEnumTypeError "vm_power_state")
  (**  *)
  and on_normal_exit  =
    fun v -> match v with
      "destroy" -> `destroy
    | "restart" -> `restart
    | _ -> raise (StringEnumTypeError "on_normal_exit")
  (**  *)
  and vm_operations_to_string_map  =
    fun m -> map vm_operations string m
  (**  *)
  and ref_VDI_to_ref_SR_map  =
    fun m -> map ref_VDI ref_SR m
  (**  *)
  and ref_VIF_to_ref_network_map  =
    fun m -> map ref_VIF ref_network m
  (**  *)
  and ref_VGPU_to_ref_GPU_group_map  =
    fun m -> map ref_VGPU ref_GPU_group m
  (**  *)
  and vm_operations  =
    fun v -> match v with
      "snapshot" -> `snapshot
    | "clone" -> `clone
    | "copy" -> `copy
    | "create_template" -> `create_template
    | "revert" -> `revert
    | "checkpoint" -> `checkpoint
    | "snapshot_with_quiesce" -> `snapshot_with_quiesce
    | "provision" -> `provision
    | "start" -> `start
    | "start_on" -> `start_on
    | "pause" -> `pause
    | "unpause" -> `unpause
    | "clean_shutdown" -> `clean_shutdown
    | "clean_reboot" -> `clean_reboot
    | "hard_shutdown" -> `hard_shutdown
    | "power_state_reset" -> `power_state_reset
    | "hard_reboot" -> `hard_reboot
    | "suspend" -> `suspend
    | "csvm" -> `csvm
    | "resume" -> `resume
    | "resume_on" -> `resume_on
    | "pool_migrate" -> `pool_migrate
    | "migrate_send" -> `migrate_send
    | "get_boot_record" -> `get_boot_record
    | "send_sysrq" -> `send_sysrq
    | "send_trigger" -> `send_trigger
    | "query_services" -> `query_services
    | "shutdown" -> `shutdown
    | "call_plugin" -> `call_plugin
    | "changing_memory_live" -> `changing_memory_live
    | "awaiting_memory_live" -> `awaiting_memory_live
    | "changing_dynamic_range" -> `changing_dynamic_range
    | "changing_static_range" -> `changing_static_range
    | "changing_memory_limits" -> `changing_memory_limits
    | "changing_shadow_memory" -> `changing_shadow_memory
    | "changing_shadow_memory_live" -> `changing_shadow_memory_live
    | "changing_VCPUs" -> `changing_VCPUs
    | "changing_VCPUs_live" -> `changing_VCPUs_live
    | "changing_NVRAM" -> `changing_NVRAM
    | "assert_operation_valid" -> `assert_operation_valid
    | "data_source_op" -> `data_source_op
    | "update_allowed_operations" -> `update_allowed_operations
    | "make_into_template" -> `make_into_template
    | "import" -> `import
    | "export" -> `export
    | "metadata_export" -> `metadata_export
    | "reverting" -> `reverting
    | "destroy" -> `destroy
    | _ -> raise (StringEnumTypeError "vm_operations")
  (**  *)
  and on_crash_behaviour  =
    fun v -> match v with
      "destroy" -> `destroy
    | "coredump_and_destroy" -> `coredump_and_destroy
    | "restart" -> `restart
    | "coredump_and_restart" -> `coredump_and_restart
    | "preserve" -> `preserve
    | "rename_restart" -> `rename_restart
    | _ -> raise (StringEnumTypeError "on_crash_behaviour")
  (**  *)
  and int64_to_float_map  =
    fun m -> map int64 float m
  (**  *)
  and int64_to_int64_map  =
    fun m -> map int64 int64 m
  (**  *)
  and int64_to_string_set_map  =
    fun m -> map int64 string_set m
  (**  *)
  and ref_VM_metrics  =
    fun x -> (Ref.of_string x : [`VM_metrics] Ref.t)
  (**  *)
  and domain_type  =
    fun v -> match v with
      "hvm" -> `hvm
    | "pv" -> `pv
    | "pv_in_pvh" -> `pv_in_pvh
    | "unspecified" -> `unspecified
    | _ -> raise (StringEnumTypeError "domain_type")
  (**  *)
  and tristate_type  =
    fun v -> match v with
      "yes" -> `yes
    | "no" -> `no
    | "unspecified" -> `unspecified
    | _ -> raise (StringEnumTypeError "tristate_type")
  (**  *)
  and ref_VM_guest_metrics  =
    fun x -> (Ref.of_string x : [`VM_guest_metrics] Ref.t)
  (**  *)
  and vmpp_backup_type  =
    fun v -> match v with
      "snapshot" -> `snapshot
    | "checkpoint" -> `checkpoint
    | _ -> raise (StringEnumTypeError "vmpp_backup_type")
  (**  *)
  and vmpp_backup_frequency  =
    fun v -> match v with
      "hourly" -> `hourly
    | "daily" -> `daily
    | "weekly" -> `weekly
    | _ -> raise (StringEnumTypeError "vmpp_backup_frequency")
  (**  *)
  and vmpp_archive_frequency  =
    fun v -> match v with
      "never" -> `never
    | "always_after_backup" -> `always_after_backup
    | "daily" -> `daily
    | "weekly" -> `weekly
    | _ -> raise (StringEnumTypeError "vmpp_archive_frequency")
  (**  *)
  and vmpp_archive_target_type  =
    fun v -> match v with
      "none" -> `none
    | "cifs" -> `cifs
    | "nfs" -> `nfs
    | _ -> raise (StringEnumTypeError "vmpp_archive_target_type")
  (**  *)
  and ref_VMPP  =
    fun x -> (Ref.of_string x : [`VMPP] Ref.t)
  (**  *)
  and vmss_frequency  =
    fun v -> match v with
      "hourly" -> `hourly
    | "daily" -> `daily
    | "weekly" -> `weekly
    | _ -> raise (StringEnumTypeError "vmss_frequency")
  (**  *)
  and ref_VMSS  =
    fun x -> (Ref.of_string x : [`VMSS] Ref.t)
  (**  *)
  and vmss_type  =
    fun v -> match v with
      "snapshot" -> `snapshot
    | "checkpoint" -> `checkpoint
    | "snapshot_with_quiesce" -> `snapshot_with_quiesce
    | _ -> raise (StringEnumTypeError "vmss_type")
  (**  *)
  and vm_appliance_operation_set  =
    fun s -> set vm_appliance_operation s
  (**  *)
  and string_to_vm_appliance_operation_map  =
    fun m -> map string vm_appliance_operation m
  (**  *)
  and vm_appliance_operation  =
    fun v -> match v with
      "start" -> `start
    | "clean_shutdown" -> `clean_shutdown
    | "hard_shutdown" -> `hard_shutdown
    | "shutdown" -> `shutdown
    | _ -> raise (StringEnumTypeError "vm_appliance_operation")
  (**  *)
  and ref_VM_appliance  =
    fun x -> (Ref.of_string x : [`VM_appliance] Ref.t)
  (**  *)
  and ref_session  =
    fun x -> (Ref.of_string x : [`session] Ref.t)
  (**  *)
  and host_allowed_operations_set  =
    fun s -> set host_allowed_operations s
  (**  *)
  and string_to_host_allowed_operations_map  =
    fun m -> map string host_allowed_operations m
  (**  *)
  and host_allowed_operations  =
    fun v -> match v with
      "provision" -> `provision
    | "evacuate" -> `evacuate
    | "shutdown" -> `shutdown
    | "reboot" -> `reboot
    | "power_on" -> `power_on
    | "vm_start" -> `vm_start
    | "vm_resume" -> `vm_resume
    | "vm_migrate" -> `vm_migrate
    | _ -> raise (StringEnumTypeError "host_allowed_operations")
  (**  *)
  and host_display  =
    fun v -> match v with
      "enabled" -> `enabled
    | "disable_on_reboot" -> `disable_on_reboot
    | "disabled" -> `disabled
    | "enable_on_reboot" -> `enable_on_reboot
    | _ -> raise (StringEnumTypeError "host_display")
  (**  *)
  and int64_set  =
    fun s -> set int64 s
  (**  *)
  and ref_pool_update_set  =
    fun s -> set ref_pool_update s
  (**  *)
  and ref_pool_update  =
    fun x -> (Ref.of_string x : [`pool_update] Ref.t)
  (**  *)
  and ref_VDI_to_string_map  =
    fun m -> map ref_VDI string m
  (**  *)
  and ref_VDI_set  =
    fun s -> set ref_VDI s
  (**  *)
  and secretstring  =
    SecretString.of_string
  (**  *)
  and host_sched_gran  =
    fun v -> match v with
      "core" -> `core
    | "cpu" -> `cpu
    | "socket" -> `socket
    | _ -> raise (StringEnumTypeError "host_sched_gran")
  (**  *)
  and ref_host_crashdump  =
    fun x -> (Ref.of_string x : [`host_crashdump] Ref.t)
  (**  *)
  and ref_pool_patch  =
    fun x -> (Ref.of_string x : [`pool_patch] Ref.t)
  (**  *)
  and ref_host_patch  =
    fun x -> (Ref.of_string x : [`host_patch] Ref.t)
  (**  *)
  and ref_host_metrics  =
    fun x -> (Ref.of_string x : [`host_metrics] Ref.t)
  (**  *)
  and ref_host_cpu  =
    fun x -> (Ref.of_string x : [`host_cpu] Ref.t)
  (**  *)
  and network_operations_set  =
    fun s -> set network_operations s
  (**  *)
  and string_to_network_operations_map  =
    fun m -> map string network_operations m
  (**  *)
  and network_operations  =
    fun v -> match v with
      "attaching" -> `attaching
    | _ -> raise (StringEnumTypeError "network_operations")
  (**  *)
  and ref_VIF_to_string_map  =
    fun m -> map ref_VIF string m
  (**  *)
  and network_purpose_set  =
    fun s -> set network_purpose s
  (**  *)
  and network_default_locking_mode  =
    fun v -> match v with
      "unlocked" -> `unlocked
    | "disabled" -> `disabled
    | _ -> raise (StringEnumTypeError "network_default_locking_mode")
  (**  *)
  and network_purpose  =
    fun v -> match v with
      "nbd" -> `nbd
    | "insecure_nbd" -> `insecure_nbd
    | _ -> raise (StringEnumTypeError "network_purpose")
  (**  *)
  and vif_operations_set  =
    fun s -> set vif_operations s
  (**  *)
  and string_to_vif_operations_map  =
    fun m -> map string vif_operations m
  (**  *)
  and vif_operations  =
    fun v -> match v with
      "attach" -> `attach
    | "plug" -> `plug
    | "unplug" -> `unplug
    | _ -> raise (StringEnumTypeError "vif_operations")
  (**  *)
  and vif_locking_mode  =
    fun v -> match v with
      "network_default" -> `network_default
    | "locked" -> `locked
    | "unlocked" -> `unlocked
    | "disabled" -> `disabled
    | _ -> raise (StringEnumTypeError "vif_locking_mode")
  (**  *)
  and vif_ipv4_configuration_mode  =
    fun v -> match v with
      "None" -> `None
    | "Static" -> `Static
    | _ -> raise (StringEnumTypeError "vif_ipv4_configuration_mode")
  (**  *)
  and vif_ipv6_configuration_mode  =
    fun v -> match v with
      "None" -> `None
    | "Static" -> `Static
    | _ -> raise (StringEnumTypeError "vif_ipv6_configuration_mode")
  (**  *)
  and ref_VIF_metrics  =
    fun x -> (Ref.of_string x : [`VIF_metrics] Ref.t)
  (**  *)
  and pif_igmp_status  =
    fun v -> match v with
      "enabled" -> `enabled
    | "disabled" -> `disabled
    | "unknown" -> `unknown
    | _ -> raise (StringEnumTypeError "pif_igmp_status")
  (**  *)
  and ip_configuration_mode  =
    fun v -> match v with
      "None" -> `None
    | "DHCP" -> `DHCP
    | "Static" -> `Static
    | _ -> raise (StringEnumTypeError "ip_configuration_mode")
  (**  *)
  and ipv6_configuration_mode  =
    fun v -> match v with
      "None" -> `None
    | "DHCP" -> `DHCP
    | "Static" -> `Static
    | "Autoconf" -> `Autoconf
    | _ -> raise (StringEnumTypeError "ipv6_configuration_mode")
  (**  *)
  and primary_address_type  =
    fun v -> match v with
      "IPv4" -> `IPv4
    | "IPv6" -> `IPv6
    | _ -> raise (StringEnumTypeError "primary_address_type")
  (**  *)
  and ref_PIF_metrics  =
    fun x -> (Ref.of_string x : [`PIF_metrics] Ref.t)
  (**  *)
  and ref_PIF_set  =
    fun s -> set ref_PIF s
  (**  *)
  and bond_mode  =
    fun v -> match v with
      "balance-slb" -> `balanceslb
    | "active-backup" -> `activebackup
    | "lacp" -> `lacp
    | _ -> raise (StringEnumTypeError "bond_mode")
  (**  *)
  and ref_Bond  =
    fun x -> (Ref.of_string x : [`Bond] Ref.t)
  (**  *)
  and ref_VLAN  =
    fun x -> (Ref.of_string x : [`VLAN] Ref.t)
  (**  *)
  and string_to_int64_map  =
    fun m -> map string int64 m
  (**  *)
  and ref_SM  =
    fun x -> (Ref.of_string x : [`SM] Ref.t)
  (**  *)
  and storage_operations_set  =
    fun s -> set storage_operations s
  (**  *)
  and string_to_storage_operations_map  =
    fun m -> map string storage_operations m
  (**  *)
  and storage_operations  =
    fun v -> match v with
      "scan" -> `scan
    | "destroy" -> `destroy
    | "forget" -> `forget
    | "plug" -> `plug
    | "unplug" -> `unplug
    | "update" -> `update
    | "vdi_create" -> `vdi_create
    | "vdi_introduce" -> `vdi_introduce
    | "vdi_destroy" -> `vdi_destroy
    | "vdi_resize" -> `vdi_resize
    | "vdi_clone" -> `vdi_clone
    | "vdi_snapshot" -> `vdi_snapshot
    | "vdi_mirror" -> `vdi_mirror
    | "vdi_enable_cbt" -> `vdi_enable_cbt
    | "vdi_disable_cbt" -> `vdi_disable_cbt
    | "vdi_data_destroy" -> `vdi_data_destroy
    | "vdi_list_changed_blocks" -> `vdi_list_changed_blocks
    | "vdi_set_on_boot" -> `vdi_set_on_boot
    | "pbd_create" -> `pbd_create
    | "pbd_destroy" -> `pbd_destroy
    | _ -> raise (StringEnumTypeError "storage_operations")
  (**  *)
  and string_to_ref_blob_map  =
    fun m -> map string ref_blob m
  (**  *)
  and ref_DR_task  =
    fun x -> (Ref.of_string x : [`DR_task] Ref.t)
  (**  *)
  and ref_LVHD  =
    fun x -> (Ref.of_string x : [`LVHD] Ref.t)
  (**  *)
  and vdi_operations_set  =
    fun s -> set vdi_operations s
  (**  *)
  and string_to_vdi_operations_map  =
    fun m -> map string vdi_operations m
  (**  *)
  and vdi_operations  =
    fun v -> match v with
      "clone" -> `clone
    | "copy" -> `copy
    | "resize" -> `resize
    | "resize_online" -> `resize_online
    | "snapshot" -> `snapshot
    | "mirror" -> `mirror
    | "destroy" -> `destroy
    | "forget" -> `forget
    | "update" -> `update
    | "force_unlock" -> `force_unlock
    | "generate_config" -> `generate_config
    | "enable_cbt" -> `enable_cbt
    | "disable_cbt" -> `disable_cbt
    | "data_destroy" -> `data_destroy
    | "list_changed_blocks" -> `list_changed_blocks
    | "set_on_boot" -> `set_on_boot
    | "blocked" -> `blocked
    | _ -> raise (StringEnumTypeError "vdi_operations")
  (**  *)
  and vdi_type  =
    fun v -> match v with
      "system" -> `system
    | "user" -> `user
    | "ephemeral" -> `ephemeral
    | "suspend" -> `suspend
    | "crashdump" -> `crashdump
    | "ha_statefile" -> `ha_statefile
    | "metadata" -> `metadata
    | "redo_log" -> `redo_log
    | "rrd" -> `rrd
    | "pvs_cache" -> `pvs_cache
    | "cbt_metadata" -> `cbt_metadata
    | _ -> raise (StringEnumTypeError "vdi_type")
  (**  *)
  and ref_pool  =
    fun x -> (Ref.of_string x : [`pool] Ref.t)
  (**  *)
  and on_boot  =
    fun v -> match v with
      "reset" -> `reset
    | "persist" -> `persist
    | _ -> raise (StringEnumTypeError "on_boot")
  (**  *)
  and vbd_operations_set  =
    fun s -> set vbd_operations s
  (**  *)
  and string_to_vbd_operations_map  =
    fun m -> map string vbd_operations m
  (**  *)
  and vbd_operations  =
    fun v -> match v with
      "attach" -> `attach
    | "eject" -> `eject
    | "insert" -> `insert
    | "plug" -> `plug
    | "unplug" -> `unplug
    | "unplug_force" -> `unplug_force
    | "pause" -> `pause
    | "unpause" -> `unpause
    | _ -> raise (StringEnumTypeError "vbd_operations")
  (**  *)
  and vbd_type  =
    fun v -> match v with
      "CD" -> `CD
    | "Disk" -> `Disk
    | "Floppy" -> `Floppy
    | _ -> raise (StringEnumTypeError "vbd_type")
  (**  *)
  and ref_VBD  =
    fun x -> (Ref.of_string x : [`VBD] Ref.t)
  (**  *)
  and vbd_mode  =
    fun v -> match v with
      "RO" -> `RO
    | "RW" -> `RW
    | _ -> raise (StringEnumTypeError "vbd_mode")
  (**  *)
  and ref_VBD_metrics  =
    fun x -> (Ref.of_string x : [`VBD_metrics] Ref.t)
  (**  *)
  and ref_PBD  =
    fun x -> (Ref.of_string x : [`PBD] Ref.t)
  (**  *)
  and ref_crashdump  =
    fun x -> (Ref.of_string x : [`crashdump] Ref.t)
  (**  *)
  and ref_VTPM  =
    fun x -> (Ref.of_string x : [`VTPM] Ref.t)
  (**  *)
  and console_protocol  =
    fun v -> match v with
      "vt100" -> `vt100
    | "rfb" -> `rfb
    | "rdp" -> `rdp
    | _ -> raise (StringEnumTypeError "console_protocol")
  (**  *)
  and ref_console  =
    fun x -> (Ref.of_string x : [`console] Ref.t)
  (**  *)
  and ref_user  =
    fun x -> (Ref.of_string x : [`user] Ref.t)
  (**  *)
  and ref_blob  =
    fun x -> (Ref.of_string x : [`blob] Ref.t)
  (**  *)
  and ref_secret  =
    fun x -> (Ref.of_string x : [`secret] Ref.t)
  (**  *)
  and tunnel_protocol  =
    fun v -> match v with
      "gre" -> `gre
    | "vxlan" -> `vxlan
    | _ -> raise (StringEnumTypeError "tunnel_protocol")
  (**  *)
  and ref_tunnel  =
    fun x -> (Ref.of_string x : [`tunnel] Ref.t)
  (**  *)
  and sriov_configuration_mode  =
    fun v -> match v with
      "sysfs" -> `sysfs
    | "modprobe" -> `modprobe
    | "unknown" -> `unknown
    | _ -> raise (StringEnumTypeError "sriov_configuration_mode")
  (**  *)
  and ref_network_sriov  =
    fun x -> (Ref.of_string x : [`network_sriov] Ref.t)
  (**  *)
  and ref_VM_set  =
    fun s -> set ref_VM s
  (**  *)
  and ref_PCI_set  =
    fun s -> set ref_PCI s
  (**  *)
  and ref_VGPU_type_to_int64_map  =
    fun m -> map ref_VGPU_type int64 m
  (**  *)
  and pgpu_dom0_access  =
    fun v -> match v with
      "enabled" -> `enabled
    | "disable_on_reboot" -> `disable_on_reboot
    | "disabled" -> `disabled
    | "enable_on_reboot" -> `enable_on_reboot
    | _ -> raise (StringEnumTypeError "pgpu_dom0_access")
  (**  *)
  and allocation_algorithm  =
    fun v -> match v with
      "breadth_first" -> `breadth_first
    | "depth_first" -> `depth_first
    | _ -> raise (StringEnumTypeError "allocation_algorithm")
  (**  *)
  and ref_PCI  =
    fun x -> (Ref.of_string x : [`PCI] Ref.t)
  (**  *)
  and ref_VGPU  =
    fun x -> (Ref.of_string x : [`VGPU] Ref.t)
  (**  *)
  and ref_PGPU_set  =
    fun s -> set ref_PGPU s
  (**  *)
  and ref_PGPU  =
    fun x -> (Ref.of_string x : [`PGPU] Ref.t)
  (**  *)
  and ref_GPU_group_set  =
    fun s -> set ref_GPU_group s
  (**  *)
  and ref_GPU_group  =
    fun x -> (Ref.of_string x : [`GPU_group] Ref.t)
  (**  *)
  and vgpu_type_implementation  =
    fun v -> match v with
      "passthrough" -> `passthrough
    | "nvidia" -> `nvidia
    | "nvidia_sriov" -> `nvidia_sriov
    | "gvt_g" -> `gvt_g
    | "mxgpu" -> `mxgpu
    | _ -> raise (StringEnumTypeError "vgpu_type_implementation")
  (**  *)
  and ref_VGPU_type_set  =
    fun s -> set ref_VGPU_type s
  (**  *)
  and ref_VGPU_type  =
    fun x -> (Ref.of_string x : [`VGPU_type] Ref.t)
  (**  *)
  and ref_PVS_cache_storage_set  =
    fun s -> set ref_PVS_cache_storage s
  (**  *)
  and ref_PVS_server  =
    fun x -> (Ref.of_string x : [`PVS_server] Ref.t)
  (**  *)
  and pvs_proxy_status  =
    fun v -> match v with
      "stopped" -> `stopped
    | "initialised" -> `initialised
    | "caching" -> `caching
    | "incompatible_write_cache_mode" -> `incompatible_write_cache_mode
    | "incompatible_protocol_version" -> `incompatible_protocol_version
    | _ -> raise (StringEnumTypeError "pvs_proxy_status")
  (**  *)
  and ref_VIF  =
    fun x -> (Ref.of_string x : [`VIF] Ref.t)
  (**  *)
  and ref_PVS_proxy  =
    fun x -> (Ref.of_string x : [`PVS_proxy] Ref.t)
  (**  *)
  and ref_SR  =
    fun x -> (Ref.of_string x : [`SR] Ref.t)
  (**  *)
  and ref_PVS_site  =
    fun x -> (Ref.of_string x : [`PVS_site] Ref.t)
  (**  *)
  and ref_PVS_cache_storage  =
    fun x -> (Ref.of_string x : [`PVS_cache_storage] Ref.t)
  (**  *)
  and ref_VDI  =
    fun x -> (Ref.of_string x : [`VDI] Ref.t)
  (**  *)
  and ref_Feature  =
    fun x -> (Ref.of_string x : [`Feature] Ref.t)
  (**  *)
  and sdn_controller_protocol  =
    fun v -> match v with
      "ssl" -> `ssl
    | "pssl" -> `pssl
    | _ -> raise (StringEnumTypeError "sdn_controller_protocol")
  (**  *)
  and int64  =
    Int64.of_string
  (**  *)
  and ref_SDN_controller  =
    fun x -> (Ref.of_string x : [`SDN_controller] Ref.t)
  (**  *)
  and ref_PUSB  =
    fun x -> (Ref.of_string x : [`PUSB] Ref.t)
  (**  *)
  and vusb_operations_set  =
    fun s -> set vusb_operations s
  (**  *)
  and string_to_vusb_operations_map  =
    fun m -> map string vusb_operations m
  (**  *)
  and vusb_operations  =
    fun v -> match v with
      "attach" -> `attach
    | "plug" -> `plug
    | "unplug" -> `unplug
    | _ -> raise (StringEnumTypeError "vusb_operations")
  (**  *)
  and ref_VM  =
    fun x -> (Ref.of_string x : [`VM] Ref.t)
  (**  *)
  and ref_USB_group  =
    fun x -> (Ref.of_string x : [`USB_group] Ref.t)
  (**  *)
  and ref_VUSB  =
    fun x -> (Ref.of_string x : [`VUSB] Ref.t)
  (**  *)
  and string_set  =
    fun s -> set string s
  (**  *)
  and cluster_operation_set  =
    fun s -> set cluster_operation s
  (**  *)
  and string_to_cluster_operation_map  =
    fun m -> map string cluster_operation m
  (**  *)
  and cluster_operation  =
    fun v -> match v with
      "add" -> `add
    | "remove" -> `remove
    | "enable" -> `enable
    | "disable" -> `disable
    | "destroy" -> `destroy
    | _ -> raise (StringEnumTypeError "cluster_operation")
  (**  *)
  and ref_network  =
    fun x -> (Ref.of_string x : [`network] Ref.t)
  (**  *)
  and float  =
    float_of_string
  (**  *)
  and bool  =
    bool_of_string
  (**  *)
  and cluster_host_operation_set  =
    fun s -> set cluster_host_operation s
  (**  *)
  and string_to_cluster_host_operation_map  =
    fun m -> map string cluster_host_operation m
  (**  *)
  and cluster_host_operation  =
    fun v -> match v with
      "enable" -> `enable
    | "disable" -> `disable
    | "destroy" -> `destroy
    | _ -> raise (StringEnumTypeError "cluster_host_operation")
  (**  *)
  and string_to_string_map  =
    fun m -> map string string m
  (**  *)
  and ref_Cluster  =
    fun x -> (Ref.of_string x : [`Cluster] Ref.t)
  (**  *)
  and ref_PIF  =
    fun x -> (Ref.of_string x : [`PIF] Ref.t)
  (**  *)
  and ref_Cluster_host  =
    fun x -> (Ref.of_string x : [`Cluster_host] Ref.t)
  (**  *)
  and ref_host  =
    fun x -> (Ref.of_string x : [`host] Ref.t)
  (**  *)
  and datetime  =
    fun x -> Date.of_string x
  (**  *)
  and ref_Certificate  =
    fun x -> (Ref.of_string x : [`Certificate] Ref.t)
  (**  *)
  and string  =
    fun x -> x

end


module DB_Action = struct

  open Db_cache_types
  module D=Debug.Make(struct let name="db" end)
  open D
  module Session = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "session" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "session" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_session(DB.read_refs __t "session")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_session (DB.db_get_by_uuid __t "session" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~this_host ~this_user ~last_active ~pool ~other_config ~is_local_superuser ~subject ~validation_time ~auth_user_sid ~auth_user_name ~rbac_permissions ~parent ~originator =
      let ref = DM_to_String.ref_session ref in
      let uuid = DM_to_String.string uuid in
      let this_host = DM_to_String.ref_host this_host in
      let this_user = DM_to_String.ref_user this_user in
      let last_active = DM_to_String.datetime last_active in
      let pool = DM_to_String.bool pool in
      let other_config = DM_to_String.string_to_string_map other_config in
      let is_local_superuser = DM_to_String.bool is_local_superuser in
      let subject = DM_to_String.ref_subject subject in
      let validation_time = DM_to_String.datetime validation_time in
      let auth_user_sid = DM_to_String.string auth_user_sid in
      let auth_user_name = DM_to_String.string auth_user_name in
      let rbac_permissions = DM_to_String.string_set rbac_permissions in
      let parent = DM_to_String.ref_session parent in
      let originator = DM_to_String.string originator in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "session" [ ("uuid", uuid); ("this_host", this_host); ("this_user", this_user); ("last_active", last_active); ("pool", pool); ("other_config", other_config); ("is_local_superuser", is_local_superuser); ("subject", subject); ("validation_time", validation_time); ("auth_user_sid", auth_user_sid); ("auth_user_name", auth_user_name); ("rbac_permissions", rbac_permissions); ("parent", parent); ("originator", originator) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "session" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "session" "uuid" self)
    (**  *)
    and get_this_host ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "session" "this_host" self)
    (**  *)
    and get_this_user ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_user (DB.read_field __t "session" "this_user" self)
    (**  *)
    and get_last_active ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "session" "last_active" self)
    (**  *)
    and get_pool ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "session" "pool" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "session" "other_config" self)
    (**  *)
    and get_is_local_superuser ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "session" "is_local_superuser" self)
    (**  *)
    and get_subject ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_subject (DB.read_field __t "session" "subject" self)
    (**  *)
    and get_validation_time ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "session" "validation_time" self)
    (**  *)
    and get_auth_user_sid ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "session" "auth_user_sid" self)
    (**  *)
    and get_auth_user_name ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "session" "auth_user_name" self)
    (**  *)
    and get_rbac_permissions ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "session" "rbac_permissions" self)
    (**  *)
    and get_tasks ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_task_set (DB.read_field __t "session" "tasks" self)
    (**  *)
    and get_parent ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_session (DB.read_field __t "session" "parent" self)
    (**  *)
    and get_originator ~__context ~self =
      let self = DM_to_String.ref_session self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "session" "originator" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "uuid" value
    (**  *)
    and set_this_host ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "this_host" value
    (**  *)
    and set_this_user ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.ref_user value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "this_user" value
    (**  *)
    and set_last_active ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "last_active" value
    (**  *)
    and set_pool ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "pool" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_session self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "session" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_session self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "session" "other_config" self RemoveMap
    (**  *)
    and set_is_local_superuser ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "is_local_superuser" value
    (**  *)
    and set_subject ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.ref_subject value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "subject" value
    (**  *)
    and set_validation_time ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "validation_time" value
    (**  *)
    and set_auth_user_sid ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "auth_user_sid" value
    (**  *)
    and set_auth_user_name ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "auth_user_name" value
    (**  *)
    and set_rbac_permissions ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "rbac_permissions" value
    (**  *)
    and add_rbac_permissions ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "session" "rbac_permissions" self AddSet
    (**  *)
    and remove_rbac_permissions ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "session" "rbac_permissions" self RemoveSet
    (**  *)
    and set_parent ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.ref_session value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "parent" value
    (**  *)
    and set_originator ~__context ~self ~value =
      let self = DM_to_String.ref_session self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "session" self "originator" value
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.session_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.session_this_host = String_to_DM.ref_host(List.assoc "this_host" __regular_fields);
        API.session_this_user = String_to_DM.ref_user(List.assoc "this_user" __regular_fields);
        API.session_last_active = String_to_DM.datetime(List.assoc "last_active" __regular_fields);
        API.session_pool = String_to_DM.bool(List.assoc "pool" __regular_fields);
        API.session_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.session_is_local_superuser = String_to_DM.bool(List.assoc "is_local_superuser" __regular_fields);
        API.session_subject = String_to_DM.ref_subject(List.assoc "subject" __regular_fields);
        API.session_validation_time = String_to_DM.datetime(List.assoc "validation_time" __regular_fields);
        API.session_auth_user_sid = String_to_DM.string(List.assoc "auth_user_sid" __regular_fields);
        API.session_auth_user_name = String_to_DM.string(List.assoc "auth_user_name" __regular_fields);
        API.session_rbac_permissions = String_to_DM.string_set(List.assoc "rbac_permissions" __regular_fields);
        API.session_tasks = List.map String_to_DM.ref_task (List.assoc "tasks" __set_refs);
        API.session_parent = String_to_DM.ref_session(List.assoc "parent" __regular_fields);
        API.session_originator = String_to_DM.string(List.assoc "originator" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        session_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        session_this_host = String_to_DM.ref_host(List.assoc "this_host" __regular_fields);
        session_this_user = String_to_DM.ref_user(List.assoc "this_user" __regular_fields);
        session_last_active = String_to_DM.datetime(List.assoc "last_active" __regular_fields);
        session_pool = String_to_DM.bool(List.assoc "pool" __regular_fields);
        session_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        session_is_local_superuser = String_to_DM.bool(List.assoc "is_local_superuser" __regular_fields);
        session_subject = String_to_DM.ref_subject(List.assoc "subject" __regular_fields);
        session_validation_time = String_to_DM.datetime(List.assoc "validation_time" __regular_fields);
        session_auth_user_sid = String_to_DM.string(List.assoc "auth_user_sid" __regular_fields);
        session_auth_user_name = String_to_DM.string(List.assoc "auth_user_name" __regular_fields);
        session_rbac_permissions = String_to_DM.string_set(List.assoc "rbac_permissions" __regular_fields);
        session_tasks = List.map String_to_DM.ref_task (List.assoc "tasks" __set_refs);
        session_parent = String_to_DM.ref_session(List.assoc "parent" __regular_fields);
        session_originator = String_to_DM.string(List.assoc "originator" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "session" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "session" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "session" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Session_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "session"
      (fun ~__context ~self -> (fun () -> API.rpc_of_session_t (Session.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Subject = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_subject self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "subject" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_subject self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "subject" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_subject(DB.read_refs __t "subject")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_subject (DB.db_get_by_uuid __t "subject" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~subject_identifier ~other_config ~roles =
      let ref = DM_to_String.ref_subject ref in
      let uuid = DM_to_String.string uuid in
      let subject_identifier = DM_to_String.string subject_identifier in
      let other_config = DM_to_String.string_to_string_map other_config in
      let roles = DM_to_String.ref_role_set roles in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "subject" [ ("uuid", uuid); ("subject_identifier", subject_identifier); ("other_config", other_config); ("roles", roles) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_subject self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "subject" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_subject self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "subject" "uuid" self)
    (**  *)
    and get_subject_identifier ~__context ~self =
      let self = DM_to_String.ref_subject self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "subject" "subject_identifier" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_subject self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "subject" "other_config" self)
    (**  *)
    and get_roles ~__context ~self =
      let self = DM_to_String.ref_subject self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_role_set (DB.read_field __t "subject" "roles" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_subject self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "subject" self "uuid" value
    (**  *)
    and set_subject_identifier ~__context ~self ~value =
      let self = DM_to_String.ref_subject self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "subject" self "subject_identifier" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_subject self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "subject" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_subject self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "subject" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_subject self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "subject" "other_config" self RemoveMap
    (**  *)
    and set_roles ~__context ~self ~value =
      let self = DM_to_String.ref_subject self in
      let value = DM_to_String.ref_role_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "subject" self "roles" value
    (**  *)
    and add_roles ~__context ~self ~value =
      let self = DM_to_String.ref_subject self in
      let value = DM_to_String.ref_role value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "subject" "roles" self AddSet
    (**  *)
    and remove_roles ~__context ~self ~value =
      let self = DM_to_String.ref_subject self in
      let value = DM_to_String.ref_role value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "subject" "roles" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.subject_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.subject_subject_identifier = String_to_DM.string(List.assoc "subject_identifier" __regular_fields);
        API.subject_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.subject_roles = String_to_DM.ref_role_set(List.assoc "roles" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        subject_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        subject_subject_identifier = String_to_DM.string(List.assoc "subject_identifier" __regular_fields);
        subject_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        subject_roles = String_to_DM.ref_role_set(List.assoc "roles" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "subject" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "subject" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "subject" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Subject_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "subject"
      (fun ~__context ~self -> (fun () -> API.rpc_of_subject_t (Subject.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Role = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_role self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "role" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_role self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "role" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_role(DB.read_refs __t "role")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_role (DB.db_get_by_uuid __t "role" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~subroles =
      let ref = DM_to_String.ref_role ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let subroles = DM_to_String.ref_role_set subroles in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "role" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("subroles", subroles) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_role self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "role" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_role (DB.db_get_by_name_label __t "role" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_role self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "role" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_role self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "role" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_role self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "role" "name__description" self)
    (**  *)
    and get_subroles ~__context ~self =
      let self = DM_to_String.ref_role self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_role_set (DB.read_field __t "role" "subroles" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_role self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "role" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_role self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "role" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_role self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "role" self "name__description" value
    (**  *)
    and set_subroles ~__context ~self ~value =
      let self = DM_to_String.ref_role self in
      let value = DM_to_String.ref_role_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "role" self "subroles" value
    (**  *)
    and add_subroles ~__context ~self ~value =
      let self = DM_to_String.ref_role self in
      let value = DM_to_String.ref_role value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "role" "subroles" self AddSet
    (**  *)
    and remove_subroles ~__context ~self ~value =
      let self = DM_to_String.ref_role self in
      let value = DM_to_String.ref_role value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "role" "subroles" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.role_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.role_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.role_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.role_subroles = String_to_DM.ref_role_set(List.assoc "subroles" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        role_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        role_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        role_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        role_subroles = String_to_DM.ref_role_set(List.assoc "subroles" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "role" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "role" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "role" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Role_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "role"
      (fun ~__context ~self -> (fun () -> API.rpc_of_role_t (Role.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Task = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "task" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "task" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_task(DB.read_refs __t "task")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_task (DB.db_get_by_uuid __t "task" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~allowed_operations ~current_operations ~created ~finished ~status ~session ~resident_on ~progress ~externalpid ~stunnelpid ~forwarded ~forwarded_to ~_type ~result ~error_info ~other_config ~subtask_of ~backtrace =
      let ref = DM_to_String.ref_task ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let allowed_operations = DM_to_String.task_allowed_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_task_allowed_operations_map current_operations in
      let created = DM_to_String.datetime created in
      let finished = DM_to_String.datetime finished in
      let status = DM_to_String.task_status_type status in
      let session = DM_to_String.ref_session session in
      let resident_on = DM_to_String.ref_host resident_on in
      let progress = DM_to_String.float progress in
      let externalpid = DM_to_String.int64 externalpid in
      let stunnelpid = DM_to_String.int64 stunnelpid in
      let forwarded = DM_to_String.bool forwarded in
      let forwarded_to = DM_to_String.ref_host forwarded_to in
      let _type = DM_to_String.string _type in
      let result = DM_to_String.string result in
      let error_info = DM_to_String.string_set error_info in
      let other_config = DM_to_String.string_to_string_map other_config in
      let subtask_of = DM_to_String.ref_task subtask_of in
      let backtrace = DM_to_String.string backtrace in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "task" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("created", created); ("finished", finished); ("status", status); ("session", session); ("resident_on", resident_on); ("progress", progress); ("externalpid", externalpid); ("stunnelpid", stunnelpid); ("forwarded", forwarded); ("forwarded_to", forwarded_to); ("type", _type); ("result", result); ("error_info", error_info); ("other_config", other_config); ("subtask_of", subtask_of); ("backtrace", backtrace) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "task" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_task (DB.db_get_by_name_label __t "task" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "task" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "task" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "task" "name__description" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.task_allowed_operations_set (DB.read_field __t "task" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_task_allowed_operations_map (DB.read_field __t "task" "current_operations" self)
    (**  *)
    and get_created ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "task" "created" self)
    (**  *)
    and get_finished ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "task" "finished" self)
    (**  *)
    and get_status ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.task_status_type (DB.read_field __t "task" "status" self)
    (**  *)
    and get_session ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_session (DB.read_field __t "task" "session" self)
    (**  *)
    and get_resident_on ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "task" "resident_on" self)
    (**  *)
    and get_progress ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "task" "progress" self)
    (**  *)
    and get_externalpid ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "task" "externalpid" self)
    (**  *)
    and get_stunnelpid ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "task" "stunnelpid" self)
    (**  *)
    and get_forwarded ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "task" "forwarded" self)
    (**  *)
    and get_forwarded_to ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "task" "forwarded_to" self)
    (**  *)
    and get_type ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "task" "type" self)
    (**  *)
    and get_result ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "task" "result" self)
    (**  *)
    and get_error_info ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "task" "error_info" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "task" "other_config" self)
    (**  *)
    and get_subtask_of ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_task (DB.read_field __t "task" "subtask_of" self)
    (**  *)
    and get_subtasks ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_task_set (DB.read_field __t "task" "subtasks" self)
    (**  *)
    and get_backtrace ~__context ~self =
      let self = DM_to_String.ref_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "task" "backtrace" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "name__description" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.task_allowed_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.task_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "task" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.task_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "task" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string_to_task_allowed_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_task self in
      let key = DM_to_String.string key in
      let value = DM_to_String.task_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "task" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_task self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "task" "current_operations" self RemoveMap
    (**  *)
    and set_created ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "created" value
    (**  *)
    and set_finished ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "finished" value
    (**  *)
    and set_status ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.task_status_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "status" value
    (**  *)
    and set_session ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.ref_session value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "session" value
    (**  *)
    and set_resident_on ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "resident_on" value
    (**  *)
    and set_progress ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "progress" value
    (**  *)
    and set_externalpid ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "externalpid" value
    (**  *)
    and set_stunnelpid ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "stunnelpid" value
    (**  *)
    and set_forwarded ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "forwarded" value
    (**  *)
    and set_forwarded_to ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "forwarded_to" value
    (**  *)
    and set_type ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "type" value
    (**  *)
    and set_result ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "result" value
    (**  *)
    and set_error_info ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "error_info" value
    (**  *)
    and add_error_info ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "task" "error_info" self AddSet
    (**  *)
    and remove_error_info ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "task" "error_info" self RemoveSet
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_task self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "task" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_task self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "task" "other_config" self RemoveMap
    (**  *)
    and set_subtask_of ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.ref_task value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "subtask_of" value
    (**  *)
    and set_backtrace ~__context ~self ~value =
      let self = DM_to_String.ref_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "task" self "backtrace" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.task_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.task_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.task_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.task_allowed_operations = String_to_DM.task_allowed_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.task_current_operations = String_to_DM.string_to_task_allowed_operations_map(List.assoc "current_operations" __regular_fields);
        API.task_created = String_to_DM.datetime(List.assoc "created" __regular_fields);
        API.task_finished = String_to_DM.datetime(List.assoc "finished" __regular_fields);
        API.task_status = String_to_DM.task_status_type(List.assoc "status" __regular_fields);
        API.task_resident_on = String_to_DM.ref_host(List.assoc "resident_on" __regular_fields);
        API.task_progress = String_to_DM.float(List.assoc "progress" __regular_fields);
        API.task_type = String_to_DM.string(List.assoc "type" __regular_fields);
        API.task_result = String_to_DM.string(List.assoc "result" __regular_fields);
        API.task_error_info = String_to_DM.string_set(List.assoc "error_info" __regular_fields);
        API.task_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.task_subtask_of = String_to_DM.ref_task(List.assoc "subtask_of" __regular_fields);
        API.task_subtasks = List.map String_to_DM.ref_task (List.assoc "subtasks" __set_refs);
        API.task_backtrace = String_to_DM.string(List.assoc "backtrace" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        task_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        task_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        task_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        task_allowed_operations = String_to_DM.task_allowed_operations_set(List.assoc "allowed_operations" __regular_fields);
        task_current_operations = String_to_DM.string_to_task_allowed_operations_map(List.assoc "current_operations" __regular_fields);
        task_created = String_to_DM.datetime(List.assoc "created" __regular_fields);
        task_finished = String_to_DM.datetime(List.assoc "finished" __regular_fields);
        task_status = String_to_DM.task_status_type(List.assoc "status" __regular_fields);
        task_session = String_to_DM.ref_session(List.assoc "session" __regular_fields);
        task_resident_on = String_to_DM.ref_host(List.assoc "resident_on" __regular_fields);
        task_progress = String_to_DM.float(List.assoc "progress" __regular_fields);
        task_externalpid = String_to_DM.int64(List.assoc "externalpid" __regular_fields);
        task_stunnelpid = String_to_DM.int64(List.assoc "stunnelpid" __regular_fields);
        task_forwarded = String_to_DM.bool(List.assoc "forwarded" __regular_fields);
        task_forwarded_to = String_to_DM.ref_host(List.assoc "forwarded_to" __regular_fields);
        task_type = String_to_DM.string(List.assoc "type" __regular_fields);
        task_result = String_to_DM.string(List.assoc "result" __regular_fields);
        task_error_info = String_to_DM.string_set(List.assoc "error_info" __regular_fields);
        task_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        task_subtask_of = String_to_DM.ref_task(List.assoc "subtask_of" __regular_fields);
        task_subtasks = List.map String_to_DM.ref_task (List.assoc "subtasks" __set_refs);
        task_backtrace = String_to_DM.string(List.assoc "backtrace" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "task" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "task" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "task" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Task_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "task"
      (fun ~__context ~self -> (fun () -> API.rpc_of_task_t (Task.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Pool = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "pool" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "pool" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_pool(DB.read_refs __t "pool")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool (DB.db_get_by_uuid __t "pool" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~master ~default_SR ~suspend_image_SR ~crash_dump_SR ~other_config ~ha_enabled ~ha_configuration ~ha_statefiles ~ha_host_failures_to_tolerate ~ha_plan_exists_for ~ha_allow_overcommit ~ha_overcommitted ~blobs ~tags ~gui_config ~health_check_config ~wlb_url ~wlb_username ~wlb_password ~wlb_enabled ~wlb_verify_cert ~redo_log_enabled ~redo_log_vdi ~vswitch_controller ~restrictions ~ha_cluster_stack ~allowed_operations ~current_operations ~guest_agent_config ~cpu_info ~policy_no_vendor_device ~live_patching_disabled ~igmp_snooping_enabled ~uefi_certificates ~is_psr_pending =
      let ref = DM_to_String.ref_pool ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let master = DM_to_String.ref_host master in
      let default_SR = DM_to_String.ref_SR default_SR in
      let suspend_image_SR = DM_to_String.ref_SR suspend_image_SR in
      let crash_dump_SR = DM_to_String.ref_SR crash_dump_SR in
      let other_config = DM_to_String.string_to_string_map other_config in
      let ha_enabled = DM_to_String.bool ha_enabled in
      let ha_configuration = DM_to_String.string_to_string_map ha_configuration in
      let ha_statefiles = DM_to_String.string_set ha_statefiles in
      let ha_host_failures_to_tolerate = DM_to_String.int64 ha_host_failures_to_tolerate in
      let ha_plan_exists_for = DM_to_String.int64 ha_plan_exists_for in
      let ha_allow_overcommit = DM_to_String.bool ha_allow_overcommit in
      let ha_overcommitted = DM_to_String.bool ha_overcommitted in
      let blobs = DM_to_String.string_to_ref_blob_map blobs in
      let tags = DM_to_String.string_set tags in
      let gui_config = DM_to_String.string_to_string_map gui_config in
      let health_check_config = DM_to_String.string_to_string_map health_check_config in
      let wlb_url = DM_to_String.string wlb_url in
      let wlb_username = DM_to_String.string wlb_username in
      let wlb_password = DM_to_String.ref_secret wlb_password in
      let wlb_enabled = DM_to_String.bool wlb_enabled in
      let wlb_verify_cert = DM_to_String.bool wlb_verify_cert in
      let redo_log_enabled = DM_to_String.bool redo_log_enabled in
      let redo_log_vdi = DM_to_String.ref_VDI redo_log_vdi in
      let vswitch_controller = DM_to_String.string vswitch_controller in
      let restrictions = DM_to_String.string_to_string_map restrictions in
      let ha_cluster_stack = DM_to_String.string ha_cluster_stack in
      let allowed_operations = DM_to_String.pool_allowed_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_pool_allowed_operations_map current_operations in
      let guest_agent_config = DM_to_String.string_to_string_map guest_agent_config in
      let cpu_info = DM_to_String.string_to_string_map cpu_info in
      let policy_no_vendor_device = DM_to_String.bool policy_no_vendor_device in
      let live_patching_disabled = DM_to_String.bool live_patching_disabled in
      let igmp_snooping_enabled = DM_to_String.bool igmp_snooping_enabled in
      let uefi_certificates = DM_to_String.string uefi_certificates in
      let is_psr_pending = DM_to_String.bool is_psr_pending in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "pool" [ ("uuid", uuid); ("name_label", name_label); ("name_description", name_description); ("master", master); ("default_SR", default_SR); ("suspend_image_SR", suspend_image_SR); ("crash_dump_SR", crash_dump_SR); ("other_config", other_config); ("ha_enabled", ha_enabled); ("ha_configuration", ha_configuration); ("ha_statefiles", ha_statefiles); ("ha_host_failures_to_tolerate", ha_host_failures_to_tolerate); ("ha_plan_exists_for", ha_plan_exists_for); ("ha_allow_overcommit", ha_allow_overcommit); ("ha_overcommitted", ha_overcommitted); ("blobs", blobs); ("tags", tags); ("gui_config", gui_config); ("health_check_config", health_check_config); ("wlb_url", wlb_url); ("wlb_username", wlb_username); ("wlb_password", wlb_password); ("wlb_enabled", wlb_enabled); ("wlb_verify_cert", wlb_verify_cert); ("redo_log_enabled", redo_log_enabled); ("redo_log_vdi", redo_log_vdi); ("vswitch_controller", vswitch_controller); ("restrictions", restrictions); ("ha_cluster_stack", ha_cluster_stack); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("guest_agent_config", guest_agent_config); ("cpu_info", cpu_info); ("policy_no_vendor_device", policy_no_vendor_device); ("live_patching_disabled", live_patching_disabled); ("igmp_snooping_enabled", igmp_snooping_enabled); ("uefi_certificates", uefi_certificates); ("is_psr_pending", is_psr_pending) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "pool" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "name_label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "name_description" self)
    (**  *)
    and get_master ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "pool" "master" self)
    (**  *)
    and get_default_SR ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "pool" "default_SR" self)
    (**  *)
    and get_suspend_image_SR ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "pool" "suspend_image_SR" self)
    (**  *)
    and get_crash_dump_SR ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "pool" "crash_dump_SR" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool" "other_config" self)
    (**  *)
    and get_ha_enabled ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "ha_enabled" self)
    (**  *)
    and get_ha_configuration ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool" "ha_configuration" self)
    (**  *)
    and get_ha_statefiles ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "pool" "ha_statefiles" self)
    (**  *)
    and get_ha_host_failures_to_tolerate ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "pool" "ha_host_failures_to_tolerate" self)
    (**  *)
    and get_ha_plan_exists_for ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "pool" "ha_plan_exists_for" self)
    (**  *)
    and get_ha_allow_overcommit ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "ha_allow_overcommit" self)
    (**  *)
    and get_ha_overcommitted ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "ha_overcommitted" self)
    (**  *)
    and get_blobs ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_ref_blob_map (DB.read_field __t "pool" "blobs" self)
    (**  *)
    and get_tags ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "pool" "tags" self)
    (**  *)
    and get_gui_config ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool" "gui_config" self)
    (**  *)
    and get_health_check_config ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool" "health_check_config" self)
    (**  *)
    and get_wlb_url ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "wlb_url" self)
    (**  *)
    and get_wlb_username ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "wlb_username" self)
    (**  *)
    and get_wlb_password ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_secret (DB.read_field __t "pool" "wlb_password" self)
    (**  *)
    and get_wlb_enabled ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "wlb_enabled" self)
    (**  *)
    and get_wlb_verify_cert ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "wlb_verify_cert" self)
    (**  *)
    and get_redo_log_enabled ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "redo_log_enabled" self)
    (**  *)
    and get_redo_log_vdi ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "pool" "redo_log_vdi" self)
    (**  *)
    and get_vswitch_controller ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "vswitch_controller" self)
    (**  *)
    and get_restrictions ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool" "restrictions" self)
    (**  *)
    and get_metadata_VDIs ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI_set (DB.read_field __t "pool" "metadata_VDIs" self)
    (**  *)
    and get_ha_cluster_stack ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "ha_cluster_stack" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.pool_allowed_operations_set (DB.read_field __t "pool" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_pool_allowed_operations_map (DB.read_field __t "pool" "current_operations" self)
    (**  *)
    and get_guest_agent_config ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool" "guest_agent_config" self)
    (**  *)
    and get_cpu_info ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool" "cpu_info" self)
    (**  *)
    and get_policy_no_vendor_device ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "policy_no_vendor_device" self)
    (**  *)
    and get_live_patching_disabled ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "live_patching_disabled" self)
    (**  *)
    and get_igmp_snooping_enabled ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "igmp_snooping_enabled" self)
    (**  *)
    and get_uefi_certificates ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool" "uefi_certificates" self)
    (**  *)
    and get_is_psr_pending ~__context ~self =
      let self = DM_to_String.ref_pool self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool" "is_psr_pending" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "name_label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "name_description" value
    (**  *)
    and set_master ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "master" value
    (**  *)
    and set_default_SR ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "default_SR" value
    (**  *)
    and set_suspend_image_SR ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "suspend_image_SR" value
    (**  *)
    and set_crash_dump_SR ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "crash_dump_SR" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "other_config" self RemoveMap
    (**  *)
    and set_ha_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_enabled" value
    (**  *)
    and set_ha_configuration ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_configuration" value
    (**  *)
    and add_to_ha_configuration ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "ha_configuration" self AddMapLegacy
    (**  *)
    and remove_from_ha_configuration ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "ha_configuration" self RemoveMap
    (**  *)
    and set_ha_statefiles ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_statefiles" value
    (**  *)
    and add_ha_statefiles ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool" "ha_statefiles" self AddSet
    (**  *)
    and remove_ha_statefiles ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool" "ha_statefiles" self RemoveSet
    (**  *)
    and set_ha_host_failures_to_tolerate ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_host_failures_to_tolerate" value
    (**  *)
    and set_ha_plan_exists_for ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_plan_exists_for" value
    (**  *)
    and set_ha_allow_overcommit ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_allow_overcommit" value
    (**  *)
    and set_ha_overcommitted ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_overcommitted" value
    (**  *)
    and set_blobs ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_ref_blob_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "blobs" value
    (**  *)
    and add_to_blobs ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.ref_blob value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "blobs" self AddMapLegacy
    (**  *)
    and remove_from_blobs ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "blobs" self RemoveMap
    (**  *)
    and set_tags ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "tags" value
    (**  *)
    and add_tags ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool" "tags" self AddSet
    (**  *)
    and remove_tags ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool" "tags" self RemoveSet
    (**  *)
    and set_gui_config ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "gui_config" value
    (**  *)
    and add_to_gui_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "gui_config" self AddMapLegacy
    (**  *)
    and remove_from_gui_config ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "gui_config" self RemoveMap
    (**  *)
    and set_health_check_config ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "health_check_config" value
    (**  *)
    and add_to_health_check_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "health_check_config" self AddMapLegacy
    (**  *)
    and remove_from_health_check_config ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "health_check_config" self RemoveMap
    (**  *)
    and set_wlb_url ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "wlb_url" value
    (**  *)
    and set_wlb_username ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "wlb_username" value
    (**  *)
    and set_wlb_password ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.ref_secret value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "wlb_password" value
    (**  *)
    and set_wlb_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "wlb_enabled" value
    (**  *)
    and set_wlb_verify_cert ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "wlb_verify_cert" value
    (**  *)
    and set_redo_log_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "redo_log_enabled" value
    (**  *)
    and set_redo_log_vdi ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "redo_log_vdi" value
    (**  *)
    and set_vswitch_controller ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "vswitch_controller" value
    (**  *)
    and set_restrictions ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "restrictions" value
    (**  *)
    and add_to_restrictions ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "restrictions" self AddMapLegacy
    (**  *)
    and remove_from_restrictions ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "restrictions" self RemoveMap
    (**  *)
    and set_ha_cluster_stack ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "ha_cluster_stack" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.pool_allowed_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.pool_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.pool_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_pool_allowed_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.pool_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "current_operations" self RemoveMap
    (**  *)
    and set_guest_agent_config ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "guest_agent_config" value
    (**  *)
    and add_to_guest_agent_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "guest_agent_config" self AddMapLegacy
    (**  *)
    and remove_from_guest_agent_config ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "guest_agent_config" self RemoveMap
    (**  *)
    and set_cpu_info ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "cpu_info" value
    (**  *)
    and add_to_cpu_info ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool" "cpu_info" self AddMapLegacy
    (**  *)
    and remove_from_cpu_info ~__context ~self ~key =
      let self = DM_to_String.ref_pool self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool" "cpu_info" self RemoveMap
    (**  *)
    and set_policy_no_vendor_device ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "policy_no_vendor_device" value
    (**  *)
    and set_live_patching_disabled ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "live_patching_disabled" value
    (**  *)
    and set_igmp_snooping_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "igmp_snooping_enabled" value
    (**  *)
    and set_uefi_certificates ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "uefi_certificates" value
    (**  *)
    and set_is_psr_pending ~__context ~self ~value =
      let self = DM_to_String.ref_pool self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool" self "is_psr_pending" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pool_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pool_name_label = String_to_DM.string(List.assoc "name_label" __regular_fields);
        API.pool_name_description = String_to_DM.string(List.assoc "name_description" __regular_fields);
        API.pool_master = String_to_DM.ref_host(List.assoc "master" __regular_fields);
        API.pool_default_SR = String_to_DM.ref_SR(List.assoc "default_SR" __regular_fields);
        API.pool_suspend_image_SR = String_to_DM.ref_SR(List.assoc "suspend_image_SR" __regular_fields);
        API.pool_crash_dump_SR = String_to_DM.ref_SR(List.assoc "crash_dump_SR" __regular_fields);
        API.pool_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.pool_ha_enabled = String_to_DM.bool(List.assoc "ha_enabled" __regular_fields);
        API.pool_ha_configuration = String_to_DM.string_to_string_map(List.assoc "ha_configuration" __regular_fields);
        API.pool_ha_statefiles = String_to_DM.string_set(List.assoc "ha_statefiles" __regular_fields);
        API.pool_ha_host_failures_to_tolerate = String_to_DM.int64(List.assoc "ha_host_failures_to_tolerate" __regular_fields);
        API.pool_ha_plan_exists_for = String_to_DM.int64(List.assoc "ha_plan_exists_for" __regular_fields);
        API.pool_ha_allow_overcommit = String_to_DM.bool(List.assoc "ha_allow_overcommit" __regular_fields);
        API.pool_ha_overcommitted = String_to_DM.bool(List.assoc "ha_overcommitted" __regular_fields);
        API.pool_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        API.pool_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        API.pool_gui_config = String_to_DM.string_to_string_map(List.assoc "gui_config" __regular_fields);
        API.pool_health_check_config = String_to_DM.string_to_string_map(List.assoc "health_check_config" __regular_fields);
        API.pool_wlb_url = String_to_DM.string(List.assoc "wlb_url" __regular_fields);
        API.pool_wlb_username = String_to_DM.string(List.assoc "wlb_username" __regular_fields);
        API.pool_wlb_enabled = String_to_DM.bool(List.assoc "wlb_enabled" __regular_fields);
        API.pool_wlb_verify_cert = String_to_DM.bool(List.assoc "wlb_verify_cert" __regular_fields);
        API.pool_redo_log_enabled = String_to_DM.bool(List.assoc "redo_log_enabled" __regular_fields);
        API.pool_redo_log_vdi = String_to_DM.ref_VDI(List.assoc "redo_log_vdi" __regular_fields);
        API.pool_vswitch_controller = String_to_DM.string(List.assoc "vswitch_controller" __regular_fields);
        API.pool_restrictions = String_to_DM.string_to_string_map(List.assoc "restrictions" __regular_fields);
        API.pool_metadata_VDIs = List.map String_to_DM.ref_VDI (List.assoc "metadata_VDIs" __set_refs);
        API.pool_ha_cluster_stack = String_to_DM.string(List.assoc "ha_cluster_stack" __regular_fields);
        API.pool_allowed_operations = String_to_DM.pool_allowed_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.pool_current_operations = String_to_DM.string_to_pool_allowed_operations_map(List.assoc "current_operations" __regular_fields);
        API.pool_guest_agent_config = String_to_DM.string_to_string_map(List.assoc "guest_agent_config" __regular_fields);
        API.pool_cpu_info = String_to_DM.string_to_string_map(List.assoc "cpu_info" __regular_fields);
        API.pool_policy_no_vendor_device = String_to_DM.bool(List.assoc "policy_no_vendor_device" __regular_fields);
        API.pool_live_patching_disabled = String_to_DM.bool(List.assoc "live_patching_disabled" __regular_fields);
        API.pool_igmp_snooping_enabled = String_to_DM.bool(List.assoc "igmp_snooping_enabled" __regular_fields);
        API.pool_uefi_certificates = String_to_DM.string(List.assoc "uefi_certificates" __regular_fields);
        API.pool_is_psr_pending = String_to_DM.bool(List.assoc "is_psr_pending" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pool_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pool_name_label = String_to_DM.string(List.assoc "name_label" __regular_fields);
        pool_name_description = String_to_DM.string(List.assoc "name_description" __regular_fields);
        pool_master = String_to_DM.ref_host(List.assoc "master" __regular_fields);
        pool_default_SR = String_to_DM.ref_SR(List.assoc "default_SR" __regular_fields);
        pool_suspend_image_SR = String_to_DM.ref_SR(List.assoc "suspend_image_SR" __regular_fields);
        pool_crash_dump_SR = String_to_DM.ref_SR(List.assoc "crash_dump_SR" __regular_fields);
        pool_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        pool_ha_enabled = String_to_DM.bool(List.assoc "ha_enabled" __regular_fields);
        pool_ha_configuration = String_to_DM.string_to_string_map(List.assoc "ha_configuration" __regular_fields);
        pool_ha_statefiles = String_to_DM.string_set(List.assoc "ha_statefiles" __regular_fields);
        pool_ha_host_failures_to_tolerate = String_to_DM.int64(List.assoc "ha_host_failures_to_tolerate" __regular_fields);
        pool_ha_plan_exists_for = String_to_DM.int64(List.assoc "ha_plan_exists_for" __regular_fields);
        pool_ha_allow_overcommit = String_to_DM.bool(List.assoc "ha_allow_overcommit" __regular_fields);
        pool_ha_overcommitted = String_to_DM.bool(List.assoc "ha_overcommitted" __regular_fields);
        pool_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        pool_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        pool_gui_config = String_to_DM.string_to_string_map(List.assoc "gui_config" __regular_fields);
        pool_health_check_config = String_to_DM.string_to_string_map(List.assoc "health_check_config" __regular_fields);
        pool_wlb_url = String_to_DM.string(List.assoc "wlb_url" __regular_fields);
        pool_wlb_username = String_to_DM.string(List.assoc "wlb_username" __regular_fields);
        pool_wlb_password = String_to_DM.ref_secret(List.assoc "wlb_password" __regular_fields);
        pool_wlb_enabled = String_to_DM.bool(List.assoc "wlb_enabled" __regular_fields);
        pool_wlb_verify_cert = String_to_DM.bool(List.assoc "wlb_verify_cert" __regular_fields);
        pool_redo_log_enabled = String_to_DM.bool(List.assoc "redo_log_enabled" __regular_fields);
        pool_redo_log_vdi = String_to_DM.ref_VDI(List.assoc "redo_log_vdi" __regular_fields);
        pool_vswitch_controller = String_to_DM.string(List.assoc "vswitch_controller" __regular_fields);
        pool_restrictions = String_to_DM.string_to_string_map(List.assoc "restrictions" __regular_fields);
        pool_metadata_VDIs = List.map String_to_DM.ref_VDI (List.assoc "metadata_VDIs" __set_refs);
        pool_ha_cluster_stack = String_to_DM.string(List.assoc "ha_cluster_stack" __regular_fields);
        pool_allowed_operations = String_to_DM.pool_allowed_operations_set(List.assoc "allowed_operations" __regular_fields);
        pool_current_operations = String_to_DM.string_to_pool_allowed_operations_map(List.assoc "current_operations" __regular_fields);
        pool_guest_agent_config = String_to_DM.string_to_string_map(List.assoc "guest_agent_config" __regular_fields);
        pool_cpu_info = String_to_DM.string_to_string_map(List.assoc "cpu_info" __regular_fields);
        pool_policy_no_vendor_device = String_to_DM.bool(List.assoc "policy_no_vendor_device" __regular_fields);
        pool_live_patching_disabled = String_to_DM.bool(List.assoc "live_patching_disabled" __regular_fields);
        pool_igmp_snooping_enabled = String_to_DM.bool(List.assoc "igmp_snooping_enabled" __regular_fields);
        pool_uefi_certificates = String_to_DM.string(List.assoc "uefi_certificates" __regular_fields);
        pool_is_psr_pending = String_to_DM.bool(List.assoc "is_psr_pending" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "pool" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "pool" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "pool" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Pool_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "pool"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pool_t (Pool.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Pool_patch = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "pool_patch" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "pool_patch" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_pool_patch(DB.read_refs __t "pool_patch")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool_patch (DB.db_get_by_uuid __t "pool_patch" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~version ~filename ~size ~pool_applied ~after_apply_guidance ~pool_update ~other_config =
      let ref = DM_to_String.ref_pool_patch ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let version = DM_to_String.string version in
      let filename = DM_to_String.string filename in
      let size = DM_to_String.int64 size in
      let pool_applied = DM_to_String.bool pool_applied in
      let after_apply_guidance = DM_to_String.after_apply_guidance_set after_apply_guidance in
      let pool_update = DM_to_String.ref_pool_update pool_update in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "pool_patch" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("version", version); ("filename", filename); ("size", size); ("pool_applied", pool_applied); ("after_apply_guidance", after_apply_guidance); ("pool_update", pool_update); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "pool_patch" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_pool_patch (DB.db_get_by_name_label __t "pool_patch" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_patch" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_patch" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_patch" "name__description" self)
    (**  *)
    and get_version ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_patch" "version" self)
    (**  *)
    and get_filename ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_patch" "filename" self)
    (**  *)
    and get_size ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "pool_patch" "size" self)
    (**  *)
    and get_pool_applied ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool_patch" "pool_applied" self)
    (**  *)
    and get_host_patches ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_patch_set (DB.read_field __t "pool_patch" "host_patches" self)
    (**  *)
    and get_after_apply_guidance ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.after_apply_guidance_set (DB.read_field __t "pool_patch" "after_apply_guidance" self)
    (**  *)
    and get_pool_update ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool_update (DB.read_field __t "pool_patch" "pool_update" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_pool_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool_patch" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "name__description" value
    (**  *)
    and set_version ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "version" value
    (**  *)
    and set_filename ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "filename" value
    (**  *)
    and set_size ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "size" value
    (**  *)
    and set_pool_applied ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "pool_applied" value
    (**  *)
    and set_after_apply_guidance ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.after_apply_guidance_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "after_apply_guidance" value
    (**  *)
    and add_after_apply_guidance ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.after_apply_guidance value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool_patch" "after_apply_guidance" self AddSet
    (**  *)
    and remove_after_apply_guidance ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.after_apply_guidance value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool_patch" "after_apply_guidance" self RemoveSet
    (**  *)
    and set_pool_update ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.ref_pool_update value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "pool_update" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_pool_patch self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_patch" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool_patch self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool_patch" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_pool_patch self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool_patch" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pool_patch_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pool_patch_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.pool_patch_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.pool_patch_version = String_to_DM.string(List.assoc "version" __regular_fields);
        API.pool_patch_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        API.pool_patch_pool_applied = String_to_DM.bool(List.assoc "pool_applied" __regular_fields);
        API.pool_patch_host_patches = List.map String_to_DM.ref_host_patch (List.assoc "host_patches" __set_refs);
        API.pool_patch_after_apply_guidance = String_to_DM.after_apply_guidance_set(List.assoc "after_apply_guidance" __regular_fields);
        API.pool_patch_pool_update = String_to_DM.ref_pool_update(List.assoc "pool_update" __regular_fields);
        API.pool_patch_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pool_patch_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pool_patch_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        pool_patch_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        pool_patch_version = String_to_DM.string(List.assoc "version" __regular_fields);
        pool_patch_filename = String_to_DM.string(List.assoc "filename" __regular_fields);
        pool_patch_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        pool_patch_pool_applied = String_to_DM.bool(List.assoc "pool_applied" __regular_fields);
        pool_patch_host_patches = List.map String_to_DM.ref_host_patch (List.assoc "host_patches" __set_refs);
        pool_patch_after_apply_guidance = String_to_DM.after_apply_guidance_set(List.assoc "after_apply_guidance" __regular_fields);
        pool_patch_pool_update = String_to_DM.ref_pool_update(List.assoc "pool_update" __regular_fields);
        pool_patch_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "pool_patch" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "pool_patch" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "pool_patch" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Pool_patch_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "pool_patch"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pool_patch_t (Pool_patch.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Pool_update = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "pool_update" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "pool_update" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_pool_update(DB.read_refs __t "pool_update")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool_update (DB.db_get_by_uuid __t "pool_update" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~version ~installation_size ~key ~after_apply_guidance ~vdi ~other_config ~enforce_homogeneity =
      let ref = DM_to_String.ref_pool_update ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let version = DM_to_String.string version in
      let installation_size = DM_to_String.int64 installation_size in
      let key = DM_to_String.string key in
      let after_apply_guidance = DM_to_String.update_after_apply_guidance_set after_apply_guidance in
      let vdi = DM_to_String.ref_VDI vdi in
      let other_config = DM_to_String.string_to_string_map other_config in
      let enforce_homogeneity = DM_to_String.bool enforce_homogeneity in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "pool_update" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("version", version); ("installation_size", installation_size); ("key", key); ("after_apply_guidance", after_apply_guidance); ("vdi", vdi); ("other_config", other_config); ("enforce_homogeneity", enforce_homogeneity) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "pool_update" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_pool_update (DB.db_get_by_name_label __t "pool_update" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_update" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_update" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_update" "name__description" self)
    (**  *)
    and get_version ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_update" "version" self)
    (**  *)
    and get_installation_size ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "pool_update" "installation_size" self)
    (**  *)
    and get_key ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "pool_update" "key" self)
    (**  *)
    and get_after_apply_guidance ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.update_after_apply_guidance_set (DB.read_field __t "pool_update" "after_apply_guidance" self)
    (**  *)
    and get_vdi ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "pool_update" "vdi" self)
    (**  *)
    and get_hosts ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_set (DB.read_field __t "pool_update" "hosts" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "pool_update" "other_config" self)
    (**  *)
    and get_enforce_homogeneity ~__context ~self =
      let self = DM_to_String.ref_pool_update self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "pool_update" "enforce_homogeneity" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "name__description" value
    (**  *)
    and set_version ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "version" value
    (**  *)
    and set_installation_size ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "installation_size" value
    (**  *)
    and set_key ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "key" value
    (**  *)
    and set_after_apply_guidance ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.update_after_apply_guidance_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "after_apply_guidance" value
    (**  *)
    and add_after_apply_guidance ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.update_after_apply_guidance value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool_update" "after_apply_guidance" self AddSet
    (**  *)
    and remove_after_apply_guidance ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.update_after_apply_guidance value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool_update" "after_apply_guidance" self RemoveSet
    (**  *)
    and set_vdi ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "vdi" value
    (**  *)
    and set_hosts ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.ref_host_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "hosts" value
    (**  *)
    and add_hosts ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool_update" "hosts" self AddSet
    (**  *)
    and remove_hosts ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "pool_update" "hosts" self RemoveSet
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_pool_update self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "pool_update" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_pool_update self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "pool_update" "other_config" self RemoveMap
    (**  *)
    and set_enforce_homogeneity ~__context ~self ~value =
      let self = DM_to_String.ref_pool_update self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "pool_update" self "enforce_homogeneity" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pool_update_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pool_update_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.pool_update_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.pool_update_version = String_to_DM.string(List.assoc "version" __regular_fields);
        API.pool_update_installation_size = String_to_DM.int64(List.assoc "installation_size" __regular_fields);
        API.pool_update_key = String_to_DM.string(List.assoc "key" __regular_fields);
        API.pool_update_after_apply_guidance = String_to_DM.update_after_apply_guidance_set(List.assoc "after_apply_guidance" __regular_fields);
        API.pool_update_vdi = String_to_DM.ref_VDI(List.assoc "vdi" __regular_fields);
        API.pool_update_hosts = List.map String_to_DM.ref_host (List.assoc "hosts" __set_refs);
        API.pool_update_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.pool_update_enforce_homogeneity = String_to_DM.bool(List.assoc "enforce_homogeneity" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pool_update_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pool_update_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        pool_update_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        pool_update_version = String_to_DM.string(List.assoc "version" __regular_fields);
        pool_update_installation_size = String_to_DM.int64(List.assoc "installation_size" __regular_fields);
        pool_update_key = String_to_DM.string(List.assoc "key" __regular_fields);
        pool_update_after_apply_guidance = String_to_DM.update_after_apply_guidance_set(List.assoc "after_apply_guidance" __regular_fields);
        pool_update_vdi = String_to_DM.ref_VDI(List.assoc "vdi" __regular_fields);
        pool_update_hosts = List.map String_to_DM.ref_host (List.assoc "hosts" __set_refs);
        pool_update_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        pool_update_enforce_homogeneity = String_to_DM.bool(List.assoc "enforce_homogeneity" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "pool_update" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "pool_update" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "pool_update" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Pool_update_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "pool_update"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pool_update_t (Pool_update.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VM = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VM(DB.read_refs __t "VM")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.db_get_by_uuid __t "VM" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~allowed_operations ~current_operations ~name_label ~name_description ~power_state ~user_version ~is_a_template ~is_default_template ~suspend_VDI ~resident_on ~scheduled_to_be_resident_on ~affinity ~memory_overhead ~memory_target ~memory_static_max ~memory_dynamic_max ~memory_dynamic_min ~memory_static_min ~vCPUs_params ~vCPUs_max ~vCPUs_at_startup ~actions_after_shutdown ~actions_after_reboot ~actions_after_crash ~pV_bootloader ~pV_kernel ~pV_ramdisk ~pV_args ~pV_bootloader_args ~pV_legacy_args ~hVM_boot_policy ~hVM_boot_params ~hVM_shadow_multiplier ~platform ~pCI_bus ~other_config ~domid ~domarch ~last_boot_CPU_flags ~is_control_domain ~metrics ~guest_metrics ~last_booted_record ~recommendations ~xenstore_data ~ha_always_run ~ha_restart_priority ~is_a_snapshot ~snapshot_of ~snapshot_time ~transportable_snapshot_id ~blobs ~tags ~blocked_operations ~snapshot_info ~snapshot_metadata ~parent ~bios_strings ~protection_policy ~is_snapshot_from_vmpp ~snapshot_schedule ~is_vmss_snapshot ~appliance ~start_delay ~shutdown_delay ~order ~suspend_SR ~version ~generation_id ~hardware_platform_version ~has_vendor_device ~requires_reboot ~reference_label ~domain_type ~nVRAM =
      let ref = DM_to_String.ref_VM ref in
      let uuid = DM_to_String.string uuid in
      let allowed_operations = DM_to_String.vm_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_vm_operations_map current_operations in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let power_state = DM_to_String.vm_power_state power_state in
      let user_version = DM_to_String.int64 user_version in
      let is_a_template = DM_to_String.bool is_a_template in
      let is_default_template = DM_to_String.bool is_default_template in
      let suspend_VDI = DM_to_String.ref_VDI suspend_VDI in
      let resident_on = DM_to_String.ref_host resident_on in
      let scheduled_to_be_resident_on = DM_to_String.ref_host scheduled_to_be_resident_on in
      let affinity = DM_to_String.ref_host affinity in
      let memory_overhead = DM_to_String.int64 memory_overhead in
      let memory_target = DM_to_String.int64 memory_target in
      let memory_static_max = DM_to_String.int64 memory_static_max in
      let memory_dynamic_max = DM_to_String.int64 memory_dynamic_max in
      let memory_dynamic_min = DM_to_String.int64 memory_dynamic_min in
      let memory_static_min = DM_to_String.int64 memory_static_min in
      let vCPUs_params = DM_to_String.string_to_string_map vCPUs_params in
      let vCPUs_max = DM_to_String.int64 vCPUs_max in
      let vCPUs_at_startup = DM_to_String.int64 vCPUs_at_startup in
      let actions_after_shutdown = DM_to_String.on_normal_exit actions_after_shutdown in
      let actions_after_reboot = DM_to_String.on_normal_exit actions_after_reboot in
      let actions_after_crash = DM_to_String.on_crash_behaviour actions_after_crash in
      let pV_bootloader = DM_to_String.string pV_bootloader in
      let pV_kernel = DM_to_String.string pV_kernel in
      let pV_ramdisk = DM_to_String.string pV_ramdisk in
      let pV_args = DM_to_String.string pV_args in
      let pV_bootloader_args = DM_to_String.string pV_bootloader_args in
      let pV_legacy_args = DM_to_String.string pV_legacy_args in
      let hVM_boot_policy = DM_to_String.string hVM_boot_policy in
      let hVM_boot_params = DM_to_String.string_to_string_map hVM_boot_params in
      let hVM_shadow_multiplier = DM_to_String.float hVM_shadow_multiplier in
      let platform = DM_to_String.string_to_string_map platform in
      let pCI_bus = DM_to_String.string pCI_bus in
      let other_config = DM_to_String.string_to_string_map other_config in
      let domid = DM_to_String.int64 domid in
      let domarch = DM_to_String.string domarch in
      let last_boot_CPU_flags = DM_to_String.string_to_string_map last_boot_CPU_flags in
      let is_control_domain = DM_to_String.bool is_control_domain in
      let metrics = DM_to_String.ref_VM_metrics metrics in
      let guest_metrics = DM_to_String.ref_VM_guest_metrics guest_metrics in
      let last_booted_record = DM_to_String.string last_booted_record in
      let recommendations = DM_to_String.string recommendations in
      let xenstore_data = DM_to_String.string_to_string_map xenstore_data in
      let ha_always_run = DM_to_String.bool ha_always_run in
      let ha_restart_priority = DM_to_String.string ha_restart_priority in
      let is_a_snapshot = DM_to_String.bool is_a_snapshot in
      let snapshot_of = DM_to_String.ref_VM snapshot_of in
      let snapshot_time = DM_to_String.datetime snapshot_time in
      let transportable_snapshot_id = DM_to_String.string transportable_snapshot_id in
      let blobs = DM_to_String.string_to_ref_blob_map blobs in
      let tags = DM_to_String.string_set tags in
      let blocked_operations = DM_to_String.vm_operations_to_string_map blocked_operations in
      let snapshot_info = DM_to_String.string_to_string_map snapshot_info in
      let snapshot_metadata = DM_to_String.string snapshot_metadata in
      let parent = DM_to_String.ref_VM parent in
      let bios_strings = DM_to_String.string_to_string_map bios_strings in
      let protection_policy = DM_to_String.ref_VMPP protection_policy in
      let is_snapshot_from_vmpp = DM_to_String.bool is_snapshot_from_vmpp in
      let snapshot_schedule = DM_to_String.ref_VMSS snapshot_schedule in
      let is_vmss_snapshot = DM_to_String.bool is_vmss_snapshot in
      let appliance = DM_to_String.ref_VM_appliance appliance in
      let start_delay = DM_to_String.int64 start_delay in
      let shutdown_delay = DM_to_String.int64 shutdown_delay in
      let order = DM_to_String.int64 order in
      let suspend_SR = DM_to_String.ref_SR suspend_SR in
      let version = DM_to_String.int64 version in
      let generation_id = DM_to_String.string generation_id in
      let hardware_platform_version = DM_to_String.int64 hardware_platform_version in
      let has_vendor_device = DM_to_String.bool has_vendor_device in
      let requires_reboot = DM_to_String.bool requires_reboot in
      let reference_label = DM_to_String.string reference_label in
      let domain_type = DM_to_String.domain_type domain_type in
      let nVRAM = DM_to_String.string_to_string_map nVRAM in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VM" [ ("uuid", uuid); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("name__label", name_label); ("name__description", name_description); ("power_state", power_state); ("user_version", user_version); ("is_a_template", is_a_template); ("is_default_template", is_default_template); ("suspend_VDI", suspend_VDI); ("resident_on", resident_on); ("scheduled_to_be_resident_on", scheduled_to_be_resident_on); ("affinity", affinity); ("memory__overhead", memory_overhead); ("memory__target", memory_target); ("memory__static_max", memory_static_max); ("memory__dynamic_max", memory_dynamic_max); ("memory__dynamic_min", memory_dynamic_min); ("memory__static_min", memory_static_min); ("VCPUs__params", vCPUs_params); ("VCPUs__max", vCPUs_max); ("VCPUs__at_startup", vCPUs_at_startup); ("actions__after_shutdown", actions_after_shutdown); ("actions__after_reboot", actions_after_reboot); ("actions__after_crash", actions_after_crash); ("PV__bootloader", pV_bootloader); ("PV__kernel", pV_kernel); ("PV__ramdisk", pV_ramdisk); ("PV__args", pV_args); ("PV__bootloader_args", pV_bootloader_args); ("PV__legacy_args", pV_legacy_args); ("HVM__boot_policy", hVM_boot_policy); ("HVM__boot_params", hVM_boot_params); ("HVM__shadow_multiplier", hVM_shadow_multiplier); ("platform", platform); ("PCI_bus", pCI_bus); ("other_config", other_config); ("domid", domid); ("domarch", domarch); ("last_boot_CPU_flags", last_boot_CPU_flags); ("is_control_domain", is_control_domain); ("metrics", metrics); ("guest_metrics", guest_metrics); ("last_booted_record", last_booted_record); ("recommendations", recommendations); ("xenstore_data", xenstore_data); ("ha_always_run", ha_always_run); ("ha_restart_priority", ha_restart_priority); ("is_a_snapshot", is_a_snapshot); ("snapshot_of", snapshot_of); ("snapshot_time", snapshot_time); ("transportable_snapshot_id", transportable_snapshot_id); ("blobs", blobs); ("tags", tags); ("blocked_operations", blocked_operations); ("snapshot_info", snapshot_info); ("snapshot_metadata", snapshot_metadata); ("parent", parent); ("bios_strings", bios_strings); ("protection_policy", protection_policy); ("is_snapshot_from_vmpp", is_snapshot_from_vmpp); ("snapshot_schedule", snapshot_schedule); ("is_vmss_snapshot", is_vmss_snapshot); ("appliance", appliance); ("start_delay", start_delay); ("shutdown_delay", shutdown_delay); ("order", order); ("suspend_SR", suspend_SR); ("version", version); ("generation_id", generation_id); ("hardware_platform_version", hardware_platform_version); ("has_vendor_device", has_vendor_device); ("requires_reboot", requires_reboot); ("reference_label", reference_label); ("domain_type", domain_type); ("NVRAM", nVRAM) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VM" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VM (DB.db_get_by_name_label __t "VM" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "uuid" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vm_operations_set (DB.read_field __t "VM" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_vm_operations_map (DB.read_field __t "VM" "current_operations" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "name__description" self)
    (**  *)
    and get_power_state ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vm_power_state (DB.read_field __t "VM" "power_state" self)
    (**  *)
    and get_user_version ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "user_version" self)
    (**  *)
    and get_is_a_template ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "is_a_template" self)
    (**  *)
    and get_is_default_template ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "is_default_template" self)
    (**  *)
    and get_suspend_VDI ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "VM" "suspend_VDI" self)
    (**  *)
    and get_resident_on ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "VM" "resident_on" self)
    (**  *)
    and get_scheduled_to_be_resident_on ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "VM" "scheduled_to_be_resident_on" self)
    (**  *)
    and get_affinity ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "VM" "affinity" self)
    (**  *)
    and get_memory_overhead ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "memory__overhead" self)
    (**  *)
    and get_memory_target ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "memory__target" self)
    (**  *)
    and get_memory_static_max ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "memory__static_max" self)
    (**  *)
    and get_memory_dynamic_max ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "memory__dynamic_max" self)
    (**  *)
    and get_memory_dynamic_min ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "memory__dynamic_min" self)
    (**  *)
    and get_memory_static_min ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "memory__static_min" self)
    (**  *)
    and get_VCPUs_params ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "VCPUs__params" self)
    (**  *)
    and get_VCPUs_max ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "VCPUs__max" self)
    (**  *)
    and get_VCPUs_at_startup ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "VCPUs__at_startup" self)
    (**  *)
    and get_actions_after_shutdown ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.on_normal_exit (DB.read_field __t "VM" "actions__after_shutdown" self)
    (**  *)
    and get_actions_after_reboot ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.on_normal_exit (DB.read_field __t "VM" "actions__after_reboot" self)
    (**  *)
    and get_actions_after_crash ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.on_crash_behaviour (DB.read_field __t "VM" "actions__after_crash" self)
    (**  *)
    and get_consoles ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_console_set (DB.read_field __t "VM" "consoles" self)
    (**  *)
    and get_VIFs ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VIF_set (DB.read_field __t "VM" "VIFs" self)
    (**  *)
    and get_VBDs ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VBD_set (DB.read_field __t "VM" "VBDs" self)
    (**  *)
    and get_VUSBs ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VUSB_set (DB.read_field __t "VM" "VUSBs" self)
    (**  *)
    and get_crash_dumps ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_crashdump_set (DB.read_field __t "VM" "crash_dumps" self)
    (**  *)
    and get_VTPMs ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VTPM_set (DB.read_field __t "VM" "VTPMs" self)
    (**  *)
    and get_PV_bootloader ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "PV__bootloader" self)
    (**  *)
    and get_PV_kernel ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "PV__kernel" self)
    (**  *)
    and get_PV_ramdisk ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "PV__ramdisk" self)
    (**  *)
    and get_PV_args ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "PV__args" self)
    (**  *)
    and get_PV_bootloader_args ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "PV__bootloader_args" self)
    (**  *)
    and get_PV_legacy_args ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "PV__legacy_args" self)
    (**  *)
    and get_HVM_boot_policy ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "HVM__boot_policy" self)
    (**  *)
    and get_HVM_boot_params ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "HVM__boot_params" self)
    (**  *)
    and get_HVM_shadow_multiplier ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "VM" "HVM__shadow_multiplier" self)
    (**  *)
    and get_platform ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "platform" self)
    (**  *)
    and get_PCI_bus ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "PCI_bus" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "other_config" self)
    (**  *)
    and get_domid ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "domid" self)
    (**  *)
    and get_domarch ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "domarch" self)
    (**  *)
    and get_last_boot_CPU_flags ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "last_boot_CPU_flags" self)
    (**  *)
    and get_is_control_domain ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "is_control_domain" self)
    (**  *)
    and get_metrics ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_metrics (DB.read_field __t "VM" "metrics" self)
    (**  *)
    and get_guest_metrics ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_guest_metrics (DB.read_field __t "VM" "guest_metrics" self)
    (**  *)
    and get_last_booted_record ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "last_booted_record" self)
    (**  *)
    and get_recommendations ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "recommendations" self)
    (**  *)
    and get_xenstore_data ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "xenstore_data" self)
    (**  *)
    and get_ha_always_run ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "ha_always_run" self)
    (**  *)
    and get_ha_restart_priority ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "ha_restart_priority" self)
    (**  *)
    and get_is_a_snapshot ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "is_a_snapshot" self)
    (**  *)
    and get_snapshot_of ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VM" "snapshot_of" self)
    (**  *)
    and get_snapshots ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_set (DB.read_field __t "VM" "snapshots" self)
    (**  *)
    and get_snapshot_time ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VM" "snapshot_time" self)
    (**  *)
    and get_transportable_snapshot_id ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "transportable_snapshot_id" self)
    (**  *)
    and get_blobs ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_ref_blob_map (DB.read_field __t "VM" "blobs" self)
    (**  *)
    and get_tags ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VM" "tags" self)
    (**  *)
    and get_blocked_operations ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vm_operations_to_string_map (DB.read_field __t "VM" "blocked_operations" self)
    (**  *)
    and get_snapshot_info ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "snapshot_info" self)
    (**  *)
    and get_snapshot_metadata ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "snapshot_metadata" self)
    (**  *)
    and get_parent ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VM" "parent" self)
    (**  *)
    and get_children ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_set (DB.read_field __t "VM" "children" self)
    (**  *)
    and get_bios_strings ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "bios_strings" self)
    (**  *)
    and get_protection_policy ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VMPP (DB.read_field __t "VM" "protection_policy" self)
    (**  *)
    and get_is_snapshot_from_vmpp ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "is_snapshot_from_vmpp" self)
    (**  *)
    and get_snapshot_schedule ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VMSS (DB.read_field __t "VM" "snapshot_schedule" self)
    (**  *)
    and get_is_vmss_snapshot ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "is_vmss_snapshot" self)
    (**  *)
    and get_appliance ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_appliance (DB.read_field __t "VM" "appliance" self)
    (**  *)
    and get_start_delay ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "start_delay" self)
    (**  *)
    and get_shutdown_delay ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "shutdown_delay" self)
    (**  *)
    and get_order ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "order" self)
    (**  *)
    and get_VGPUs ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_set (DB.read_field __t "VM" "VGPUs" self)
    (**  *)
    and get_attached_PCIs ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI_set (DB.read_field __t "VM" "attached_PCIs" self)
    (**  *)
    and get_suspend_SR ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "VM" "suspend_SR" self)
    (**  *)
    and get_version ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "version" self)
    (**  *)
    and get_generation_id ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "generation_id" self)
    (**  *)
    and get_hardware_platform_version ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM" "hardware_platform_version" self)
    (**  *)
    and get_has_vendor_device ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "has_vendor_device" self)
    (**  *)
    and get_requires_reboot ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM" "requires_reboot" self)
    (**  *)
    and get_reference_label ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM" "reference_label" self)
    (**  *)
    and get_domain_type ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.domain_type (DB.read_field __t "VM" "domain_type" self)
    (**  *)
    and get_NVRAM ~__context ~self =
      let self = DM_to_String.ref_VM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM" "NVRAM" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "uuid" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.vm_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.vm_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.vm_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_vm_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.vm_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "current_operations" self RemoveMap
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "name__description" value
    (**  *)
    and set_power_state ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.vm_power_state value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "power_state" value
    (**  *)
    and set_user_version ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "user_version" value
    (**  *)
    and set_is_a_template ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "is_a_template" value
    (**  *)
    and set_is_default_template ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "is_default_template" value
    (**  *)
    and set_suspend_VDI ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "suspend_VDI" value
    (**  *)
    and set_resident_on ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "resident_on" value
    (**  *)
    and set_scheduled_to_be_resident_on ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "scheduled_to_be_resident_on" value
    (**  *)
    and set_affinity ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "affinity" value
    (**  *)
    and set_memory_overhead ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "memory__overhead" value
    (**  *)
    and set_memory_target ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "memory__target" value
    (**  *)
    and set_memory_static_max ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "memory__static_max" value
    (**  *)
    and set_memory_dynamic_max ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "memory__dynamic_max" value
    (**  *)
    and set_memory_dynamic_min ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "memory__dynamic_min" value
    (**  *)
    and set_memory_static_min ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "memory__static_min" value
    (**  *)
    and set_VCPUs_params ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "VCPUs__params" value
    (**  *)
    and add_to_VCPUs_params ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "VCPUs__params" self AddMapLegacy
    (**  *)
    and remove_from_VCPUs_params ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "VCPUs__params" self RemoveMap
    (**  *)
    and set_VCPUs_max ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "VCPUs__max" value
    (**  *)
    and set_VCPUs_at_startup ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "VCPUs__at_startup" value
    (**  *)
    and set_actions_after_shutdown ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.on_normal_exit value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "actions__after_shutdown" value
    (**  *)
    and set_actions_after_reboot ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.on_normal_exit value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "actions__after_reboot" value
    (**  *)
    and set_actions_after_crash ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.on_crash_behaviour value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "actions__after_crash" value
    (**  *)
    and set_PV_bootloader ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "PV__bootloader" value
    (**  *)
    and set_PV_kernel ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "PV__kernel" value
    (**  *)
    and set_PV_ramdisk ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "PV__ramdisk" value
    (**  *)
    and set_PV_args ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "PV__args" value
    (**  *)
    and set_PV_bootloader_args ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "PV__bootloader_args" value
    (**  *)
    and set_PV_legacy_args ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "PV__legacy_args" value
    (**  *)
    and set_HVM_boot_policy ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "HVM__boot_policy" value
    (**  *)
    and set_HVM_boot_params ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "HVM__boot_params" value
    (**  *)
    and add_to_HVM_boot_params ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "HVM__boot_params" self AddMapLegacy
    (**  *)
    and remove_from_HVM_boot_params ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "HVM__boot_params" self RemoveMap
    (**  *)
    and set_HVM_shadow_multiplier ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "HVM__shadow_multiplier" value
    (**  *)
    and set_platform ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "platform" value
    (**  *)
    and add_to_platform ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "platform" self AddMapLegacy
    (**  *)
    and remove_from_platform ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "platform" self RemoveMap
    (**  *)
    and set_PCI_bus ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "PCI_bus" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "other_config" self RemoveMap
    (**  *)
    and set_domid ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "domid" value
    (**  *)
    and set_domarch ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "domarch" value
    (**  *)
    and set_last_boot_CPU_flags ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "last_boot_CPU_flags" value
    (**  *)
    and add_to_last_boot_CPU_flags ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "last_boot_CPU_flags" self AddMapLegacy
    (**  *)
    and remove_from_last_boot_CPU_flags ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "last_boot_CPU_flags" self RemoveMap
    (**  *)
    and set_is_control_domain ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "is_control_domain" value
    (**  *)
    and set_metrics ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VM_metrics value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "metrics" value
    (**  *)
    and set_guest_metrics ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VM_guest_metrics value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "guest_metrics" value
    (**  *)
    and set_last_booted_record ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "last_booted_record" value
    (**  *)
    and set_recommendations ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "recommendations" value
    (**  *)
    and set_xenstore_data ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "xenstore_data" value
    (**  *)
    and add_to_xenstore_data ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "xenstore_data" self AddMapLegacy
    (**  *)
    and remove_from_xenstore_data ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "xenstore_data" self RemoveMap
    (**  *)
    and set_ha_always_run ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "ha_always_run" value
    (**  *)
    and set_ha_restart_priority ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "ha_restart_priority" value
    (**  *)
    and set_is_a_snapshot ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "is_a_snapshot" value
    (**  *)
    and set_snapshot_of ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "snapshot_of" value
    (**  *)
    and set_snapshot_time ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "snapshot_time" value
    (**  *)
    and set_transportable_snapshot_id ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "transportable_snapshot_id" value
    (**  *)
    and set_blobs ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_ref_blob_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "blobs" value
    (**  *)
    and add_to_blobs ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.ref_blob value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "blobs" self AddMapLegacy
    (**  *)
    and remove_from_blobs ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "blobs" self RemoveMap
    (**  *)
    and set_tags ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "tags" value
    (**  *)
    and add_tags ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM" "tags" self AddSet
    (**  *)
    and remove_tags ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM" "tags" self RemoveSet
    (**  *)
    and set_blocked_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.vm_operations_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "blocked_operations" value
    (**  *)
    and add_to_blocked_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.vm_operations key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "blocked_operations" self AddMapLegacy
    (**  *)
    and remove_from_blocked_operations ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.vm_operations key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "blocked_operations" self RemoveMap
    (**  *)
    and set_snapshot_info ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "snapshot_info" value
    (**  *)
    and add_to_snapshot_info ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "snapshot_info" self AddMapLegacy
    (**  *)
    and remove_from_snapshot_info ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "snapshot_info" self RemoveMap
    (**  *)
    and set_snapshot_metadata ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "snapshot_metadata" value
    (**  *)
    and set_parent ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "parent" value
    (**  *)
    and set_bios_strings ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "bios_strings" value
    (**  *)
    and add_to_bios_strings ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "bios_strings" self AddMapLegacy
    (**  *)
    and remove_from_bios_strings ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "bios_strings" self RemoveMap
    (**  *)
    and set_protection_policy ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VMPP value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "protection_policy" value
    (**  *)
    and set_is_snapshot_from_vmpp ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "is_snapshot_from_vmpp" value
    (**  *)
    and set_snapshot_schedule ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VMSS value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "snapshot_schedule" value
    (**  *)
    and set_is_vmss_snapshot ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "is_vmss_snapshot" value
    (**  *)
    and set_appliance ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_VM_appliance value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "appliance" value
    (**  *)
    and set_start_delay ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "start_delay" value
    (**  *)
    and set_shutdown_delay ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "shutdown_delay" value
    (**  *)
    and set_order ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "order" value
    (**  *)
    and set_attached_PCIs ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_PCI_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "attached_PCIs" value
    (**  *)
    and add_attached_PCIs ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM" "attached_PCIs" self AddSet
    (**  *)
    and remove_attached_PCIs ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM" "attached_PCIs" self RemoveSet
    (**  *)
    and set_suspend_SR ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "suspend_SR" value
    (**  *)
    and set_version ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "version" value
    (**  *)
    and set_generation_id ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "generation_id" value
    (**  *)
    and set_hardware_platform_version ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "hardware_platform_version" value
    (**  *)
    and set_has_vendor_device ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "has_vendor_device" value
    (**  *)
    and set_requires_reboot ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "requires_reboot" value
    (**  *)
    and set_reference_label ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "reference_label" value
    (**  *)
    and set_domain_type ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.domain_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "domain_type" value
    (**  *)
    and set_NVRAM ~__context ~self ~value =
      let self = DM_to_String.ref_VM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM" self "NVRAM" value
    (**  *)
    and add_to_NVRAM ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM" "NVRAM" self AddMapLegacy
    (**  *)
    and remove_from_NVRAM ~__context ~self ~key =
      let self = DM_to_String.ref_VM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM" "NVRAM" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vM_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vM_allowed_operations = String_to_DM.vm_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.vM_current_operations = String_to_DM.string_to_vm_operations_map(List.assoc "current_operations" __regular_fields);
        API.vM_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.vM_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.vM_power_state = String_to_DM.vm_power_state(List.assoc "power_state" __regular_fields);
        API.vM_user_version = String_to_DM.int64(List.assoc "user_version" __regular_fields);
        API.vM_is_a_template = String_to_DM.bool(List.assoc "is_a_template" __regular_fields);
        API.vM_is_default_template = String_to_DM.bool(List.assoc "is_default_template" __regular_fields);
        API.vM_suspend_VDI = String_to_DM.ref_VDI(List.assoc "suspend_VDI" __regular_fields);
        API.vM_resident_on = String_to_DM.ref_host(List.assoc "resident_on" __regular_fields);
        API.vM_scheduled_to_be_resident_on = String_to_DM.ref_host(List.assoc "scheduled_to_be_resident_on" __regular_fields);
        API.vM_affinity = String_to_DM.ref_host(List.assoc "affinity" __regular_fields);
        API.vM_memory_overhead = String_to_DM.int64(List.assoc "memory__overhead" __regular_fields);
        API.vM_memory_target = String_to_DM.int64(List.assoc "memory__target" __regular_fields);
        API.vM_memory_static_max = String_to_DM.int64(List.assoc "memory__static_max" __regular_fields);
        API.vM_memory_dynamic_max = String_to_DM.int64(List.assoc "memory__dynamic_max" __regular_fields);
        API.vM_memory_dynamic_min = String_to_DM.int64(List.assoc "memory__dynamic_min" __regular_fields);
        API.vM_memory_static_min = String_to_DM.int64(List.assoc "memory__static_min" __regular_fields);
        API.vM_VCPUs_params = String_to_DM.string_to_string_map(List.assoc "VCPUs__params" __regular_fields);
        API.vM_VCPUs_max = String_to_DM.int64(List.assoc "VCPUs__max" __regular_fields);
        API.vM_VCPUs_at_startup = String_to_DM.int64(List.assoc "VCPUs__at_startup" __regular_fields);
        API.vM_actions_after_shutdown = String_to_DM.on_normal_exit(List.assoc "actions__after_shutdown" __regular_fields);
        API.vM_actions_after_reboot = String_to_DM.on_normal_exit(List.assoc "actions__after_reboot" __regular_fields);
        API.vM_actions_after_crash = String_to_DM.on_crash_behaviour(List.assoc "actions__after_crash" __regular_fields);
        API.vM_consoles = List.map String_to_DM.ref_console (List.assoc "consoles" __set_refs);
        API.vM_VIFs = List.map String_to_DM.ref_VIF (List.assoc "VIFs" __set_refs);
        API.vM_VBDs = List.map String_to_DM.ref_VBD (List.assoc "VBDs" __set_refs);
        API.vM_VUSBs = List.map String_to_DM.ref_VUSB (List.assoc "VUSBs" __set_refs);
        API.vM_crash_dumps = List.map String_to_DM.ref_crashdump (List.assoc "crash_dumps" __set_refs);
        API.vM_VTPMs = List.map String_to_DM.ref_VTPM (List.assoc "VTPMs" __set_refs);
        API.vM_PV_bootloader = String_to_DM.string(List.assoc "PV__bootloader" __regular_fields);
        API.vM_PV_kernel = String_to_DM.string(List.assoc "PV__kernel" __regular_fields);
        API.vM_PV_ramdisk = String_to_DM.string(List.assoc "PV__ramdisk" __regular_fields);
        API.vM_PV_args = String_to_DM.string(List.assoc "PV__args" __regular_fields);
        API.vM_PV_bootloader_args = String_to_DM.string(List.assoc "PV__bootloader_args" __regular_fields);
        API.vM_PV_legacy_args = String_to_DM.string(List.assoc "PV__legacy_args" __regular_fields);
        API.vM_HVM_boot_policy = String_to_DM.string(List.assoc "HVM__boot_policy" __regular_fields);
        API.vM_HVM_boot_params = String_to_DM.string_to_string_map(List.assoc "HVM__boot_params" __regular_fields);
        API.vM_HVM_shadow_multiplier = String_to_DM.float(List.assoc "HVM__shadow_multiplier" __regular_fields);
        API.vM_platform = String_to_DM.string_to_string_map(List.assoc "platform" __regular_fields);
        API.vM_PCI_bus = String_to_DM.string(List.assoc "PCI_bus" __regular_fields);
        API.vM_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vM_domid = String_to_DM.int64(List.assoc "domid" __regular_fields);
        API.vM_domarch = String_to_DM.string(List.assoc "domarch" __regular_fields);
        API.vM_last_boot_CPU_flags = String_to_DM.string_to_string_map(List.assoc "last_boot_CPU_flags" __regular_fields);
        API.vM_is_control_domain = String_to_DM.bool(List.assoc "is_control_domain" __regular_fields);
        API.vM_metrics = String_to_DM.ref_VM_metrics(List.assoc "metrics" __regular_fields);
        API.vM_guest_metrics = String_to_DM.ref_VM_guest_metrics(List.assoc "guest_metrics" __regular_fields);
        API.vM_last_booted_record = String_to_DM.string(List.assoc "last_booted_record" __regular_fields);
        API.vM_recommendations = String_to_DM.string(List.assoc "recommendations" __regular_fields);
        API.vM_xenstore_data = String_to_DM.string_to_string_map(List.assoc "xenstore_data" __regular_fields);
        API.vM_ha_always_run = String_to_DM.bool(List.assoc "ha_always_run" __regular_fields);
        API.vM_ha_restart_priority = String_to_DM.string(List.assoc "ha_restart_priority" __regular_fields);
        API.vM_is_a_snapshot = String_to_DM.bool(List.assoc "is_a_snapshot" __regular_fields);
        API.vM_snapshot_of = String_to_DM.ref_VM(List.assoc "snapshot_of" __regular_fields);
        API.vM_snapshots = List.map String_to_DM.ref_VM (List.assoc "snapshots" __set_refs);
        API.vM_snapshot_time = String_to_DM.datetime(List.assoc "snapshot_time" __regular_fields);
        API.vM_transportable_snapshot_id = String_to_DM.string(List.assoc "transportable_snapshot_id" __regular_fields);
        API.vM_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        API.vM_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        API.vM_blocked_operations = String_to_DM.vm_operations_to_string_map(List.assoc "blocked_operations" __regular_fields);
        API.vM_snapshot_info = String_to_DM.string_to_string_map(List.assoc "snapshot_info" __regular_fields);
        API.vM_snapshot_metadata = String_to_DM.string(List.assoc "snapshot_metadata" __regular_fields);
        API.vM_parent = String_to_DM.ref_VM(List.assoc "parent" __regular_fields);
        API.vM_children = List.map String_to_DM.ref_VM (List.assoc "children" __set_refs);
        API.vM_bios_strings = String_to_DM.string_to_string_map(List.assoc "bios_strings" __regular_fields);
        API.vM_protection_policy = String_to_DM.ref_VMPP(List.assoc "protection_policy" __regular_fields);
        API.vM_is_snapshot_from_vmpp = String_to_DM.bool(List.assoc "is_snapshot_from_vmpp" __regular_fields);
        API.vM_snapshot_schedule = String_to_DM.ref_VMSS(List.assoc "snapshot_schedule" __regular_fields);
        API.vM_is_vmss_snapshot = String_to_DM.bool(List.assoc "is_vmss_snapshot" __regular_fields);
        API.vM_appliance = String_to_DM.ref_VM_appliance(List.assoc "appliance" __regular_fields);
        API.vM_start_delay = String_to_DM.int64(List.assoc "start_delay" __regular_fields);
        API.vM_shutdown_delay = String_to_DM.int64(List.assoc "shutdown_delay" __regular_fields);
        API.vM_order = String_to_DM.int64(List.assoc "order" __regular_fields);
        API.vM_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "VGPUs" __set_refs);
        API.vM_attached_PCIs = List.map String_to_DM.ref_PCI (List.assoc "attached_PCIs" __set_refs);
        API.vM_suspend_SR = String_to_DM.ref_SR(List.assoc "suspend_SR" __regular_fields);
        API.vM_version = String_to_DM.int64(List.assoc "version" __regular_fields);
        API.vM_generation_id = String_to_DM.string(List.assoc "generation_id" __regular_fields);
        API.vM_hardware_platform_version = String_to_DM.int64(List.assoc "hardware_platform_version" __regular_fields);
        API.vM_has_vendor_device = String_to_DM.bool(List.assoc "has_vendor_device" __regular_fields);
        API.vM_requires_reboot = String_to_DM.bool(List.assoc "requires_reboot" __regular_fields);
        API.vM_reference_label = String_to_DM.string(List.assoc "reference_label" __regular_fields);
        API.vM_domain_type = String_to_DM.domain_type(List.assoc "domain_type" __regular_fields);
        API.vM_NVRAM = String_to_DM.string_to_string_map(List.assoc "NVRAM" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vM_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vM_allowed_operations = String_to_DM.vm_operations_set(List.assoc "allowed_operations" __regular_fields);
        vM_current_operations = String_to_DM.string_to_vm_operations_map(List.assoc "current_operations" __regular_fields);
        vM_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        vM_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        vM_power_state = String_to_DM.vm_power_state(List.assoc "power_state" __regular_fields);
        vM_user_version = String_to_DM.int64(List.assoc "user_version" __regular_fields);
        vM_is_a_template = String_to_DM.bool(List.assoc "is_a_template" __regular_fields);
        vM_is_default_template = String_to_DM.bool(List.assoc "is_default_template" __regular_fields);
        vM_suspend_VDI = String_to_DM.ref_VDI(List.assoc "suspend_VDI" __regular_fields);
        vM_resident_on = String_to_DM.ref_host(List.assoc "resident_on" __regular_fields);
        vM_scheduled_to_be_resident_on = String_to_DM.ref_host(List.assoc "scheduled_to_be_resident_on" __regular_fields);
        vM_affinity = String_to_DM.ref_host(List.assoc "affinity" __regular_fields);
        vM_memory_overhead = String_to_DM.int64(List.assoc "memory__overhead" __regular_fields);
        vM_memory_target = String_to_DM.int64(List.assoc "memory__target" __regular_fields);
        vM_memory_static_max = String_to_DM.int64(List.assoc "memory__static_max" __regular_fields);
        vM_memory_dynamic_max = String_to_DM.int64(List.assoc "memory__dynamic_max" __regular_fields);
        vM_memory_dynamic_min = String_to_DM.int64(List.assoc "memory__dynamic_min" __regular_fields);
        vM_memory_static_min = String_to_DM.int64(List.assoc "memory__static_min" __regular_fields);
        vM_VCPUs_params = String_to_DM.string_to_string_map(List.assoc "VCPUs__params" __regular_fields);
        vM_VCPUs_max = String_to_DM.int64(List.assoc "VCPUs__max" __regular_fields);
        vM_VCPUs_at_startup = String_to_DM.int64(List.assoc "VCPUs__at_startup" __regular_fields);
        vM_actions_after_shutdown = String_to_DM.on_normal_exit(List.assoc "actions__after_shutdown" __regular_fields);
        vM_actions_after_reboot = String_to_DM.on_normal_exit(List.assoc "actions__after_reboot" __regular_fields);
        vM_actions_after_crash = String_to_DM.on_crash_behaviour(List.assoc "actions__after_crash" __regular_fields);
        vM_consoles = List.map String_to_DM.ref_console (List.assoc "consoles" __set_refs);
        vM_VIFs = List.map String_to_DM.ref_VIF (List.assoc "VIFs" __set_refs);
        vM_VBDs = List.map String_to_DM.ref_VBD (List.assoc "VBDs" __set_refs);
        vM_VUSBs = List.map String_to_DM.ref_VUSB (List.assoc "VUSBs" __set_refs);
        vM_crash_dumps = List.map String_to_DM.ref_crashdump (List.assoc "crash_dumps" __set_refs);
        vM_VTPMs = List.map String_to_DM.ref_VTPM (List.assoc "VTPMs" __set_refs);
        vM_PV_bootloader = String_to_DM.string(List.assoc "PV__bootloader" __regular_fields);
        vM_PV_kernel = String_to_DM.string(List.assoc "PV__kernel" __regular_fields);
        vM_PV_ramdisk = String_to_DM.string(List.assoc "PV__ramdisk" __regular_fields);
        vM_PV_args = String_to_DM.string(List.assoc "PV__args" __regular_fields);
        vM_PV_bootloader_args = String_to_DM.string(List.assoc "PV__bootloader_args" __regular_fields);
        vM_PV_legacy_args = String_to_DM.string(List.assoc "PV__legacy_args" __regular_fields);
        vM_HVM_boot_policy = String_to_DM.string(List.assoc "HVM__boot_policy" __regular_fields);
        vM_HVM_boot_params = String_to_DM.string_to_string_map(List.assoc "HVM__boot_params" __regular_fields);
        vM_HVM_shadow_multiplier = String_to_DM.float(List.assoc "HVM__shadow_multiplier" __regular_fields);
        vM_platform = String_to_DM.string_to_string_map(List.assoc "platform" __regular_fields);
        vM_PCI_bus = String_to_DM.string(List.assoc "PCI_bus" __regular_fields);
        vM_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vM_domid = String_to_DM.int64(List.assoc "domid" __regular_fields);
        vM_domarch = String_to_DM.string(List.assoc "domarch" __regular_fields);
        vM_last_boot_CPU_flags = String_to_DM.string_to_string_map(List.assoc "last_boot_CPU_flags" __regular_fields);
        vM_is_control_domain = String_to_DM.bool(List.assoc "is_control_domain" __regular_fields);
        vM_metrics = String_to_DM.ref_VM_metrics(List.assoc "metrics" __regular_fields);
        vM_guest_metrics = String_to_DM.ref_VM_guest_metrics(List.assoc "guest_metrics" __regular_fields);
        vM_last_booted_record = String_to_DM.string(List.assoc "last_booted_record" __regular_fields);
        vM_recommendations = String_to_DM.string(List.assoc "recommendations" __regular_fields);
        vM_xenstore_data = String_to_DM.string_to_string_map(List.assoc "xenstore_data" __regular_fields);
        vM_ha_always_run = String_to_DM.bool(List.assoc "ha_always_run" __regular_fields);
        vM_ha_restart_priority = String_to_DM.string(List.assoc "ha_restart_priority" __regular_fields);
        vM_is_a_snapshot = String_to_DM.bool(List.assoc "is_a_snapshot" __regular_fields);
        vM_snapshot_of = String_to_DM.ref_VM(List.assoc "snapshot_of" __regular_fields);
        vM_snapshots = List.map String_to_DM.ref_VM (List.assoc "snapshots" __set_refs);
        vM_snapshot_time = String_to_DM.datetime(List.assoc "snapshot_time" __regular_fields);
        vM_transportable_snapshot_id = String_to_DM.string(List.assoc "transportable_snapshot_id" __regular_fields);
        vM_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        vM_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        vM_blocked_operations = String_to_DM.vm_operations_to_string_map(List.assoc "blocked_operations" __regular_fields);
        vM_snapshot_info = String_to_DM.string_to_string_map(List.assoc "snapshot_info" __regular_fields);
        vM_snapshot_metadata = String_to_DM.string(List.assoc "snapshot_metadata" __regular_fields);
        vM_parent = String_to_DM.ref_VM(List.assoc "parent" __regular_fields);
        vM_children = List.map String_to_DM.ref_VM (List.assoc "children" __set_refs);
        vM_bios_strings = String_to_DM.string_to_string_map(List.assoc "bios_strings" __regular_fields);
        vM_protection_policy = String_to_DM.ref_VMPP(List.assoc "protection_policy" __regular_fields);
        vM_is_snapshot_from_vmpp = String_to_DM.bool(List.assoc "is_snapshot_from_vmpp" __regular_fields);
        vM_snapshot_schedule = String_to_DM.ref_VMSS(List.assoc "snapshot_schedule" __regular_fields);
        vM_is_vmss_snapshot = String_to_DM.bool(List.assoc "is_vmss_snapshot" __regular_fields);
        vM_appliance = String_to_DM.ref_VM_appliance(List.assoc "appliance" __regular_fields);
        vM_start_delay = String_to_DM.int64(List.assoc "start_delay" __regular_fields);
        vM_shutdown_delay = String_to_DM.int64(List.assoc "shutdown_delay" __regular_fields);
        vM_order = String_to_DM.int64(List.assoc "order" __regular_fields);
        vM_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "VGPUs" __set_refs);
        vM_attached_PCIs = List.map String_to_DM.ref_PCI (List.assoc "attached_PCIs" __set_refs);
        vM_suspend_SR = String_to_DM.ref_SR(List.assoc "suspend_SR" __regular_fields);
        vM_version = String_to_DM.int64(List.assoc "version" __regular_fields);
        vM_generation_id = String_to_DM.string(List.assoc "generation_id" __regular_fields);
        vM_hardware_platform_version = String_to_DM.int64(List.assoc "hardware_platform_version" __regular_fields);
        vM_has_vendor_device = String_to_DM.bool(List.assoc "has_vendor_device" __regular_fields);
        vM_requires_reboot = String_to_DM.bool(List.assoc "requires_reboot" __regular_fields);
        vM_reference_label = String_to_DM.string(List.assoc "reference_label" __regular_fields);
        vM_domain_type = String_to_DM.domain_type(List.assoc "domain_type" __regular_fields);
        vM_NVRAM = String_to_DM.string_to_string_map(List.assoc "NVRAM" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VM" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VM_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VM"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vM_t (VM.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VM_metrics = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM_metrics" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM_metrics" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VM_metrics(DB.read_refs __t "VM_metrics")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_metrics (DB.db_get_by_uuid __t "VM_metrics" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~memory_actual ~vCPUs_number ~vCPUs_utilisation ~vCPUs_CPU ~vCPUs_params ~vCPUs_flags ~state ~start_time ~install_time ~last_updated ~other_config ~hvm ~nested_virt ~nomigrate ~current_domain_type =
      let ref = DM_to_String.ref_VM_metrics ref in
      let uuid = DM_to_String.string uuid in
      let memory_actual = DM_to_String.int64 memory_actual in
      let vCPUs_number = DM_to_String.int64 vCPUs_number in
      let vCPUs_utilisation = DM_to_String.int64_to_float_map vCPUs_utilisation in
      let vCPUs_CPU = DM_to_String.int64_to_int64_map vCPUs_CPU in
      let vCPUs_params = DM_to_String.string_to_string_map vCPUs_params in
      let vCPUs_flags = DM_to_String.int64_to_string_set_map vCPUs_flags in
      let state = DM_to_String.string_set state in
      let start_time = DM_to_String.datetime start_time in
      let install_time = DM_to_String.datetime install_time in
      let last_updated = DM_to_String.datetime last_updated in
      let other_config = DM_to_String.string_to_string_map other_config in
      let hvm = DM_to_String.bool hvm in
      let nested_virt = DM_to_String.bool nested_virt in
      let nomigrate = DM_to_String.bool nomigrate in
      let current_domain_type = DM_to_String.domain_type current_domain_type in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VM_metrics" [ ("uuid", uuid); ("memory__actual", memory_actual); ("VCPUs__number", vCPUs_number); ("VCPUs__utilisation", vCPUs_utilisation); ("VCPUs__CPU", vCPUs_CPU); ("VCPUs__params", vCPUs_params); ("VCPUs__flags", vCPUs_flags); ("state", state); ("start_time", start_time); ("install_time", install_time); ("last_updated", last_updated); ("other_config", other_config); ("hvm", hvm); ("nested_virt", nested_virt); ("nomigrate", nomigrate); ("current_domain_type", current_domain_type) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VM_metrics" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM_metrics" "uuid" self)
    (**  *)
    and get_memory_actual ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM_metrics" "memory__actual" self)
    (**  *)
    and get_VCPUs_number ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VM_metrics" "VCPUs__number" self)
    (**  *)
    and get_VCPUs_utilisation ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64_to_float_map (DB.read_field __t "VM_metrics" "VCPUs__utilisation" self)
    (**  *)
    and get_VCPUs_CPU ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64_to_int64_map (DB.read_field __t "VM_metrics" "VCPUs__CPU" self)
    (**  *)
    and get_VCPUs_params ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_metrics" "VCPUs__params" self)
    (**  *)
    and get_VCPUs_flags ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64_to_string_set_map (DB.read_field __t "VM_metrics" "VCPUs__flags" self)
    (**  *)
    and get_state ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VM_metrics" "state" self)
    (**  *)
    and get_start_time ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VM_metrics" "start_time" self)
    (**  *)
    and get_install_time ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VM_metrics" "install_time" self)
    (**  *)
    and get_last_updated ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VM_metrics" "last_updated" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_metrics" "other_config" self)
    (**  *)
    and get_hvm ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM_metrics" "hvm" self)
    (**  *)
    and get_nested_virt ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM_metrics" "nested_virt" self)
    (**  *)
    and get_nomigrate ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM_metrics" "nomigrate" self)
    (**  *)
    and get_current_domain_type ~__context ~self =
      let self = DM_to_String.ref_VM_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.domain_type (DB.read_field __t "VM_metrics" "current_domain_type" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "uuid" value
    (**  *)
    and set_memory_actual ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "memory__actual" value
    (**  *)
    and set_VCPUs_number ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "VCPUs__number" value
    (**  *)
    and set_VCPUs_utilisation ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.int64_to_float_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "VCPUs__utilisation" value
    (**  *)
    and add_to_VCPUs_utilisation ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.int64 key in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_metrics" "VCPUs__utilisation" self AddMapLegacy
    (**  *)
    and remove_from_VCPUs_utilisation ~__context ~self ~key =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.int64 key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_metrics" "VCPUs__utilisation" self RemoveMap
    (**  *)
    and set_VCPUs_CPU ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.int64_to_int64_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "VCPUs__CPU" value
    (**  *)
    and add_to_VCPUs_CPU ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.int64 key in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_metrics" "VCPUs__CPU" self AddMapLegacy
    (**  *)
    and remove_from_VCPUs_CPU ~__context ~self ~key =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.int64 key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_metrics" "VCPUs__CPU" self RemoveMap
    (**  *)
    and set_VCPUs_params ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "VCPUs__params" value
    (**  *)
    and add_to_VCPUs_params ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_metrics" "VCPUs__params" self AddMapLegacy
    (**  *)
    and remove_from_VCPUs_params ~__context ~self ~key =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_metrics" "VCPUs__params" self RemoveMap
    (**  *)
    and set_VCPUs_flags ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.int64_to_string_set_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "VCPUs__flags" value
    (**  *)
    and add_to_VCPUs_flags ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.int64 key in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_metrics" "VCPUs__flags" self AddMapLegacy
    (**  *)
    and remove_from_VCPUs_flags ~__context ~self ~key =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.int64 key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_metrics" "VCPUs__flags" self RemoveMap
    (**  *)
    and set_state ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "state" value
    (**  *)
    and add_state ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM_metrics" "state" self AddSet
    (**  *)
    and remove_state ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM_metrics" "state" self RemoveSet
    (**  *)
    and set_start_time ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "start_time" value
    (**  *)
    and set_install_time ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "install_time" value
    (**  *)
    and set_last_updated ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "last_updated" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_metrics" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VM_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_metrics" "other_config" self RemoveMap
    (**  *)
    and set_hvm ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "hvm" value
    (**  *)
    and set_nested_virt ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "nested_virt" value
    (**  *)
    and set_nomigrate ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "nomigrate" value
    (**  *)
    and set_current_domain_type ~__context ~self ~value =
      let self = DM_to_String.ref_VM_metrics self in
      let value = DM_to_String.domain_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_metrics" self "current_domain_type" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vM_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vM_metrics_memory_actual = String_to_DM.int64(List.assoc "memory__actual" __regular_fields);
        API.vM_metrics_VCPUs_number = String_to_DM.int64(List.assoc "VCPUs__number" __regular_fields);
        API.vM_metrics_VCPUs_utilisation = String_to_DM.int64_to_float_map(List.assoc "VCPUs__utilisation" __regular_fields);
        API.vM_metrics_VCPUs_CPU = String_to_DM.int64_to_int64_map(List.assoc "VCPUs__CPU" __regular_fields);
        API.vM_metrics_VCPUs_params = String_to_DM.string_to_string_map(List.assoc "VCPUs__params" __regular_fields);
        API.vM_metrics_VCPUs_flags = String_to_DM.int64_to_string_set_map(List.assoc "VCPUs__flags" __regular_fields);
        API.vM_metrics_state = String_to_DM.string_set(List.assoc "state" __regular_fields);
        API.vM_metrics_start_time = String_to_DM.datetime(List.assoc "start_time" __regular_fields);
        API.vM_metrics_install_time = String_to_DM.datetime(List.assoc "install_time" __regular_fields);
        API.vM_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        API.vM_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vM_metrics_hvm = String_to_DM.bool(List.assoc "hvm" __regular_fields);
        API.vM_metrics_nested_virt = String_to_DM.bool(List.assoc "nested_virt" __regular_fields);
        API.vM_metrics_nomigrate = String_to_DM.bool(List.assoc "nomigrate" __regular_fields);
        API.vM_metrics_current_domain_type = String_to_DM.domain_type(List.assoc "current_domain_type" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vM_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vM_metrics_memory_actual = String_to_DM.int64(List.assoc "memory__actual" __regular_fields);
        vM_metrics_VCPUs_number = String_to_DM.int64(List.assoc "VCPUs__number" __regular_fields);
        vM_metrics_VCPUs_utilisation = String_to_DM.int64_to_float_map(List.assoc "VCPUs__utilisation" __regular_fields);
        vM_metrics_VCPUs_CPU = String_to_DM.int64_to_int64_map(List.assoc "VCPUs__CPU" __regular_fields);
        vM_metrics_VCPUs_params = String_to_DM.string_to_string_map(List.assoc "VCPUs__params" __regular_fields);
        vM_metrics_VCPUs_flags = String_to_DM.int64_to_string_set_map(List.assoc "VCPUs__flags" __regular_fields);
        vM_metrics_state = String_to_DM.string_set(List.assoc "state" __regular_fields);
        vM_metrics_start_time = String_to_DM.datetime(List.assoc "start_time" __regular_fields);
        vM_metrics_install_time = String_to_DM.datetime(List.assoc "install_time" __regular_fields);
        vM_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        vM_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vM_metrics_hvm = String_to_DM.bool(List.assoc "hvm" __regular_fields);
        vM_metrics_nested_virt = String_to_DM.bool(List.assoc "nested_virt" __regular_fields);
        vM_metrics_nomigrate = String_to_DM.bool(List.assoc "nomigrate" __regular_fields);
        vM_metrics_current_domain_type = String_to_DM.domain_type(List.assoc "current_domain_type" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VM_metrics" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VM_metrics_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VM_metrics"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vM_metrics_t (VM_metrics.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VM_guest_metrics = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM_guest_metrics" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM_guest_metrics" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VM_guest_metrics(DB.read_refs __t "VM_guest_metrics")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_guest_metrics (DB.db_get_by_uuid __t "VM_guest_metrics" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~os_version ~pV_drivers_version ~pV_drivers_up_to_date ~memory ~disks ~networks ~other ~last_updated ~other_config ~live ~can_use_hotplug_vbd ~can_use_hotplug_vif ~pV_drivers_detected =
      let ref = DM_to_String.ref_VM_guest_metrics ref in
      let uuid = DM_to_String.string uuid in
      let os_version = DM_to_String.string_to_string_map os_version in
      let pV_drivers_version = DM_to_String.string_to_string_map pV_drivers_version in
      let pV_drivers_up_to_date = DM_to_String.bool pV_drivers_up_to_date in
      let memory = DM_to_String.string_to_string_map memory in
      let disks = DM_to_String.string_to_string_map disks in
      let networks = DM_to_String.string_to_string_map networks in
      let other = DM_to_String.string_to_string_map other in
      let last_updated = DM_to_String.datetime last_updated in
      let other_config = DM_to_String.string_to_string_map other_config in
      let live = DM_to_String.bool live in
      let can_use_hotplug_vbd = DM_to_String.tristate_type can_use_hotplug_vbd in
      let can_use_hotplug_vif = DM_to_String.tristate_type can_use_hotplug_vif in
      let pV_drivers_detected = DM_to_String.bool pV_drivers_detected in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VM_guest_metrics" [ ("uuid", uuid); ("os_version", os_version); ("PV_drivers_version", pV_drivers_version); ("PV_drivers_up_to_date", pV_drivers_up_to_date); ("memory", memory); ("disks", disks); ("networks", networks); ("other", other); ("last_updated", last_updated); ("other_config", other_config); ("live", live); ("can_use_hotplug_vbd", can_use_hotplug_vbd); ("can_use_hotplug_vif", can_use_hotplug_vif); ("PV_drivers_detected", pV_drivers_detected) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VM_guest_metrics" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM_guest_metrics" "uuid" self)
    (**  *)
    and get_os_version ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_guest_metrics" "os_version" self)
    (**  *)
    and get_PV_drivers_version ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_guest_metrics" "PV_drivers_version" self)
    (**  *)
    and get_PV_drivers_up_to_date ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM_guest_metrics" "PV_drivers_up_to_date" self)
    (**  *)
    and get_memory ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_guest_metrics" "memory" self)
    (**  *)
    and get_disks ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_guest_metrics" "disks" self)
    (**  *)
    and get_networks ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_guest_metrics" "networks" self)
    (**  *)
    and get_other ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_guest_metrics" "other" self)
    (**  *)
    and get_last_updated ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VM_guest_metrics" "last_updated" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VM_guest_metrics" "other_config" self)
    (**  *)
    and get_live ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM_guest_metrics" "live" self)
    (**  *)
    and get_can_use_hotplug_vbd ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.tristate_type (DB.read_field __t "VM_guest_metrics" "can_use_hotplug_vbd" self)
    (**  *)
    and get_can_use_hotplug_vif ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.tristate_type (DB.read_field __t "VM_guest_metrics" "can_use_hotplug_vif" self)
    (**  *)
    and get_PV_drivers_detected ~__context ~self =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VM_guest_metrics" "PV_drivers_detected" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "uuid" value
    (**  *)
    and set_os_version ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "os_version" value
    (**  *)
    and add_to_os_version ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_guest_metrics" "os_version" self AddMapLegacy
    (**  *)
    and remove_from_os_version ~__context ~self ~key =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_guest_metrics" "os_version" self RemoveMap
    (**  *)
    and set_PV_drivers_version ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "PV_drivers_version" value
    (**  *)
    and add_to_PV_drivers_version ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_guest_metrics" "PV_drivers_version" self AddMapLegacy
    (**  *)
    and remove_from_PV_drivers_version ~__context ~self ~key =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_guest_metrics" "PV_drivers_version" self RemoveMap
    (**  *)
    and set_PV_drivers_up_to_date ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "PV_drivers_up_to_date" value
    (**  *)
    and set_memory ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "memory" value
    (**  *)
    and add_to_memory ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_guest_metrics" "memory" self AddMapLegacy
    (**  *)
    and remove_from_memory ~__context ~self ~key =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_guest_metrics" "memory" self RemoveMap
    (**  *)
    and set_disks ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "disks" value
    (**  *)
    and add_to_disks ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_guest_metrics" "disks" self AddMapLegacy
    (**  *)
    and remove_from_disks ~__context ~self ~key =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_guest_metrics" "disks" self RemoveMap
    (**  *)
    and set_networks ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "networks" value
    (**  *)
    and add_to_networks ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_guest_metrics" "networks" self AddMapLegacy
    (**  *)
    and remove_from_networks ~__context ~self ~key =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_guest_metrics" "networks" self RemoveMap
    (**  *)
    and set_other ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "other" value
    (**  *)
    and add_to_other ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_guest_metrics" "other" self AddMapLegacy
    (**  *)
    and remove_from_other ~__context ~self ~key =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_guest_metrics" "other" self RemoveMap
    (**  *)
    and set_last_updated ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "last_updated" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_guest_metrics" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_guest_metrics" "other_config" self RemoveMap
    (**  *)
    and set_live ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "live" value
    (**  *)
    and set_can_use_hotplug_vbd ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.tristate_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "can_use_hotplug_vbd" value
    (**  *)
    and set_can_use_hotplug_vif ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.tristate_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "can_use_hotplug_vif" value
    (**  *)
    and set_PV_drivers_detected ~__context ~self ~value =
      let self = DM_to_String.ref_VM_guest_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_guest_metrics" self "PV_drivers_detected" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vM_guest_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vM_guest_metrics_os_version = String_to_DM.string_to_string_map(List.assoc "os_version" __regular_fields);
        API.vM_guest_metrics_PV_drivers_version = String_to_DM.string_to_string_map(List.assoc "PV_drivers_version" __regular_fields);
        API.vM_guest_metrics_PV_drivers_up_to_date = String_to_DM.bool(List.assoc "PV_drivers_up_to_date" __regular_fields);
        API.vM_guest_metrics_memory = String_to_DM.string_to_string_map(List.assoc "memory" __regular_fields);
        API.vM_guest_metrics_disks = String_to_DM.string_to_string_map(List.assoc "disks" __regular_fields);
        API.vM_guest_metrics_networks = String_to_DM.string_to_string_map(List.assoc "networks" __regular_fields);
        API.vM_guest_metrics_other = String_to_DM.string_to_string_map(List.assoc "other" __regular_fields);
        API.vM_guest_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        API.vM_guest_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vM_guest_metrics_live = String_to_DM.bool(List.assoc "live" __regular_fields);
        API.vM_guest_metrics_can_use_hotplug_vbd = String_to_DM.tristate_type(List.assoc "can_use_hotplug_vbd" __regular_fields);
        API.vM_guest_metrics_can_use_hotplug_vif = String_to_DM.tristate_type(List.assoc "can_use_hotplug_vif" __regular_fields);
        API.vM_guest_metrics_PV_drivers_detected = String_to_DM.bool(List.assoc "PV_drivers_detected" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vM_guest_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vM_guest_metrics_os_version = String_to_DM.string_to_string_map(List.assoc "os_version" __regular_fields);
        vM_guest_metrics_PV_drivers_version = String_to_DM.string_to_string_map(List.assoc "PV_drivers_version" __regular_fields);
        vM_guest_metrics_PV_drivers_up_to_date = String_to_DM.bool(List.assoc "PV_drivers_up_to_date" __regular_fields);
        vM_guest_metrics_memory = String_to_DM.string_to_string_map(List.assoc "memory" __regular_fields);
        vM_guest_metrics_disks = String_to_DM.string_to_string_map(List.assoc "disks" __regular_fields);
        vM_guest_metrics_networks = String_to_DM.string_to_string_map(List.assoc "networks" __regular_fields);
        vM_guest_metrics_other = String_to_DM.string_to_string_map(List.assoc "other" __regular_fields);
        vM_guest_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        vM_guest_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vM_guest_metrics_live = String_to_DM.bool(List.assoc "live" __regular_fields);
        vM_guest_metrics_can_use_hotplug_vbd = String_to_DM.tristate_type(List.assoc "can_use_hotplug_vbd" __regular_fields);
        vM_guest_metrics_can_use_hotplug_vif = String_to_DM.tristate_type(List.assoc "can_use_hotplug_vif" __regular_fields);
        vM_guest_metrics_PV_drivers_detected = String_to_DM.bool(List.assoc "PV_drivers_detected" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VM_guest_metrics" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM_guest_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM_guest_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VM_guest_metrics_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VM_guest_metrics"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vM_guest_metrics_t (VM_guest_metrics.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VMPP = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VMPP" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VMPP" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VMPP(DB.read_refs __t "VMPP")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VMPP (DB.db_get_by_uuid __t "VMPP" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~is_policy_enabled ~backup_type ~backup_retention_value ~backup_frequency ~backup_schedule ~is_backup_running ~backup_last_run_time ~archive_target_type ~archive_target_config ~archive_frequency ~archive_schedule ~is_archive_running ~archive_last_run_time ~is_alarm_enabled ~alarm_config ~recent_alerts =
      let ref = DM_to_String.ref_VMPP ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let is_policy_enabled = DM_to_String.bool is_policy_enabled in
      let backup_type = DM_to_String.vmpp_backup_type backup_type in
      let backup_retention_value = DM_to_String.int64 backup_retention_value in
      let backup_frequency = DM_to_String.vmpp_backup_frequency backup_frequency in
      let backup_schedule = DM_to_String.string_to_string_map backup_schedule in
      let is_backup_running = DM_to_String.bool is_backup_running in
      let backup_last_run_time = DM_to_String.datetime backup_last_run_time in
      let archive_target_type = DM_to_String.vmpp_archive_target_type archive_target_type in
      let archive_target_config = DM_to_String.string_to_string_map archive_target_config in
      let archive_frequency = DM_to_String.vmpp_archive_frequency archive_frequency in
      let archive_schedule = DM_to_String.string_to_string_map archive_schedule in
      let is_archive_running = DM_to_String.bool is_archive_running in
      let archive_last_run_time = DM_to_String.datetime archive_last_run_time in
      let is_alarm_enabled = DM_to_String.bool is_alarm_enabled in
      let alarm_config = DM_to_String.string_to_string_map alarm_config in
      let recent_alerts = DM_to_String.string_set recent_alerts in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VMPP" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("is_policy_enabled", is_policy_enabled); ("backup_type", backup_type); ("backup_retention_value", backup_retention_value); ("backup_frequency", backup_frequency); ("backup_schedule", backup_schedule); ("is_backup_running", is_backup_running); ("backup_last_run_time", backup_last_run_time); ("archive_target_type", archive_target_type); ("archive_target_config", archive_target_config); ("archive_frequency", archive_frequency); ("archive_schedule", archive_schedule); ("is_archive_running", is_archive_running); ("archive_last_run_time", archive_last_run_time); ("is_alarm_enabled", is_alarm_enabled); ("alarm_config", alarm_config); ("recent_alerts", recent_alerts) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VMPP" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VMPP (DB.db_get_by_name_label __t "VMPP" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VMPP" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VMPP" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VMPP" "name__description" self)
    (**  *)
    and get_is_policy_enabled ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VMPP" "is_policy_enabled" self)
    (**  *)
    and get_backup_type ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vmpp_backup_type (DB.read_field __t "VMPP" "backup_type" self)
    (**  *)
    and get_backup_retention_value ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VMPP" "backup_retention_value" self)
    (**  *)
    and get_backup_frequency ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vmpp_backup_frequency (DB.read_field __t "VMPP" "backup_frequency" self)
    (**  *)
    and get_backup_schedule ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VMPP" "backup_schedule" self)
    (**  *)
    and get_is_backup_running ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VMPP" "is_backup_running" self)
    (**  *)
    and get_backup_last_run_time ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VMPP" "backup_last_run_time" self)
    (**  *)
    and get_archive_target_type ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vmpp_archive_target_type (DB.read_field __t "VMPP" "archive_target_type" self)
    (**  *)
    and get_archive_target_config ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VMPP" "archive_target_config" self)
    (**  *)
    and get_archive_frequency ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vmpp_archive_frequency (DB.read_field __t "VMPP" "archive_frequency" self)
    (**  *)
    and get_archive_schedule ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VMPP" "archive_schedule" self)
    (**  *)
    and get_is_archive_running ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VMPP" "is_archive_running" self)
    (**  *)
    and get_archive_last_run_time ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VMPP" "archive_last_run_time" self)
    (**  *)
    and get_VMs ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_set (DB.read_field __t "VMPP" "VMs" self)
    (**  *)
    and get_is_alarm_enabled ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VMPP" "is_alarm_enabled" self)
    (**  *)
    and get_alarm_config ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VMPP" "alarm_config" self)
    (**  *)
    and get_recent_alerts ~__context ~self =
      let self = DM_to_String.ref_VMPP self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VMPP" "recent_alerts" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "name__description" value
    (**  *)
    and set_is_policy_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "is_policy_enabled" value
    (**  *)
    and set_backup_type ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.vmpp_backup_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "backup_type" value
    (**  *)
    and set_backup_retention_value ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "backup_retention_value" value
    (**  *)
    and set_backup_frequency ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.vmpp_backup_frequency value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "backup_frequency" value
    (**  *)
    and set_backup_schedule ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "backup_schedule" value
    (**  *)
    and add_to_backup_schedule ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VMPP" "backup_schedule" self AddMapLegacy
    (**  *)
    and remove_from_backup_schedule ~__context ~self ~key =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VMPP" "backup_schedule" self RemoveMap
    (**  *)
    and set_is_backup_running ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "is_backup_running" value
    (**  *)
    and set_backup_last_run_time ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "backup_last_run_time" value
    (**  *)
    and set_archive_target_type ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.vmpp_archive_target_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "archive_target_type" value
    (**  *)
    and set_archive_target_config ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "archive_target_config" value
    (**  *)
    and add_to_archive_target_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VMPP" "archive_target_config" self AddMapLegacy
    (**  *)
    and remove_from_archive_target_config ~__context ~self ~key =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VMPP" "archive_target_config" self RemoveMap
    (**  *)
    and set_archive_frequency ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.vmpp_archive_frequency value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "archive_frequency" value
    (**  *)
    and set_archive_schedule ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "archive_schedule" value
    (**  *)
    and add_to_archive_schedule ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VMPP" "archive_schedule" self AddMapLegacy
    (**  *)
    and remove_from_archive_schedule ~__context ~self ~key =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VMPP" "archive_schedule" self RemoveMap
    (**  *)
    and set_is_archive_running ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "is_archive_running" value
    (**  *)
    and set_archive_last_run_time ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "archive_last_run_time" value
    (**  *)
    and set_is_alarm_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "is_alarm_enabled" value
    (**  *)
    and set_alarm_config ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "alarm_config" value
    (**  *)
    and add_to_alarm_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VMPP" "alarm_config" self AddMapLegacy
    (**  *)
    and remove_from_alarm_config ~__context ~self ~key =
      let self = DM_to_String.ref_VMPP self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VMPP" "alarm_config" self RemoveMap
    (**  *)
    and set_recent_alerts ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMPP" self "recent_alerts" value
    (**  *)
    and add_recent_alerts ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VMPP" "recent_alerts" self AddSet
    (**  *)
    and remove_recent_alerts ~__context ~self ~value =
      let self = DM_to_String.ref_VMPP self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VMPP" "recent_alerts" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vMPP_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vMPP_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.vMPP_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.vMPP_is_policy_enabled = String_to_DM.bool(List.assoc "is_policy_enabled" __regular_fields);
        API.vMPP_backup_type = String_to_DM.vmpp_backup_type(List.assoc "backup_type" __regular_fields);
        API.vMPP_backup_retention_value = String_to_DM.int64(List.assoc "backup_retention_value" __regular_fields);
        API.vMPP_backup_frequency = String_to_DM.vmpp_backup_frequency(List.assoc "backup_frequency" __regular_fields);
        API.vMPP_backup_schedule = String_to_DM.string_to_string_map(List.assoc "backup_schedule" __regular_fields);
        API.vMPP_is_backup_running = String_to_DM.bool(List.assoc "is_backup_running" __regular_fields);
        API.vMPP_backup_last_run_time = String_to_DM.datetime(List.assoc "backup_last_run_time" __regular_fields);
        API.vMPP_archive_target_type = String_to_DM.vmpp_archive_target_type(List.assoc "archive_target_type" __regular_fields);
        API.vMPP_archive_target_config = String_to_DM.string_to_string_map(List.assoc "archive_target_config" __regular_fields);
        API.vMPP_archive_frequency = String_to_DM.vmpp_archive_frequency(List.assoc "archive_frequency" __regular_fields);
        API.vMPP_archive_schedule = String_to_DM.string_to_string_map(List.assoc "archive_schedule" __regular_fields);
        API.vMPP_is_archive_running = String_to_DM.bool(List.assoc "is_archive_running" __regular_fields);
        API.vMPP_archive_last_run_time = String_to_DM.datetime(List.assoc "archive_last_run_time" __regular_fields);
        API.vMPP_VMs = List.map String_to_DM.ref_VM (List.assoc "VMs" __set_refs);
        API.vMPP_is_alarm_enabled = String_to_DM.bool(List.assoc "is_alarm_enabled" __regular_fields);
        API.vMPP_alarm_config = String_to_DM.string_to_string_map(List.assoc "alarm_config" __regular_fields);
        API.vMPP_recent_alerts = String_to_DM.string_set(List.assoc "recent_alerts" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vMPP_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vMPP_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        vMPP_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        vMPP_is_policy_enabled = String_to_DM.bool(List.assoc "is_policy_enabled" __regular_fields);
        vMPP_backup_type = String_to_DM.vmpp_backup_type(List.assoc "backup_type" __regular_fields);
        vMPP_backup_retention_value = String_to_DM.int64(List.assoc "backup_retention_value" __regular_fields);
        vMPP_backup_frequency = String_to_DM.vmpp_backup_frequency(List.assoc "backup_frequency" __regular_fields);
        vMPP_backup_schedule = String_to_DM.string_to_string_map(List.assoc "backup_schedule" __regular_fields);
        vMPP_is_backup_running = String_to_DM.bool(List.assoc "is_backup_running" __regular_fields);
        vMPP_backup_last_run_time = String_to_DM.datetime(List.assoc "backup_last_run_time" __regular_fields);
        vMPP_archive_target_type = String_to_DM.vmpp_archive_target_type(List.assoc "archive_target_type" __regular_fields);
        vMPP_archive_target_config = String_to_DM.string_to_string_map(List.assoc "archive_target_config" __regular_fields);
        vMPP_archive_frequency = String_to_DM.vmpp_archive_frequency(List.assoc "archive_frequency" __regular_fields);
        vMPP_archive_schedule = String_to_DM.string_to_string_map(List.assoc "archive_schedule" __regular_fields);
        vMPP_is_archive_running = String_to_DM.bool(List.assoc "is_archive_running" __regular_fields);
        vMPP_archive_last_run_time = String_to_DM.datetime(List.assoc "archive_last_run_time" __regular_fields);
        vMPP_VMs = List.map String_to_DM.ref_VM (List.assoc "VMs" __set_refs);
        vMPP_is_alarm_enabled = String_to_DM.bool(List.assoc "is_alarm_enabled" __regular_fields);
        vMPP_alarm_config = String_to_DM.string_to_string_map(List.assoc "alarm_config" __regular_fields);
        vMPP_recent_alerts = String_to_DM.string_set(List.assoc "recent_alerts" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VMPP" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VMPP" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VMPP" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VMPP_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VMPP"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vMPP_t (VMPP.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VMSS = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VMSS" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VMSS" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VMSS(DB.read_refs __t "VMSS")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VMSS (DB.db_get_by_uuid __t "VMSS" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~enabled ~_type ~retained_snapshots ~frequency ~schedule ~last_run_time =
      let ref = DM_to_String.ref_VMSS ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let enabled = DM_to_String.bool enabled in
      let _type = DM_to_String.vmss_type _type in
      let retained_snapshots = DM_to_String.int64 retained_snapshots in
      let frequency = DM_to_String.vmss_frequency frequency in
      let schedule = DM_to_String.string_to_string_map schedule in
      let last_run_time = DM_to_String.datetime last_run_time in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VMSS" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("enabled", enabled); ("type", _type); ("retained_snapshots", retained_snapshots); ("frequency", frequency); ("schedule", schedule); ("last_run_time", last_run_time) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VMSS" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VMSS (DB.db_get_by_name_label __t "VMSS" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VMSS" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VMSS" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VMSS" "name__description" self)
    (**  *)
    and get_enabled ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VMSS" "enabled" self)
    (**  *)
    and get_type ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vmss_type (DB.read_field __t "VMSS" "type" self)
    (**  *)
    and get_retained_snapshots ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VMSS" "retained_snapshots" self)
    (**  *)
    and get_frequency ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vmss_frequency (DB.read_field __t "VMSS" "frequency" self)
    (**  *)
    and get_schedule ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VMSS" "schedule" self)
    (**  *)
    and get_last_run_time ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VMSS" "last_run_time" self)
    (**  *)
    and get_VMs ~__context ~self =
      let self = DM_to_String.ref_VMSS self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_set (DB.read_field __t "VMSS" "VMs" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "name__description" value
    (**  *)
    and set_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "enabled" value
    (**  *)
    and set_type ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.vmss_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "type" value
    (**  *)
    and set_retained_snapshots ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "retained_snapshots" value
    (**  *)
    and set_frequency ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.vmss_frequency value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "frequency" value
    (**  *)
    and set_schedule ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "schedule" value
    (**  *)
    and add_to_schedule ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VMSS self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VMSS" "schedule" self AddMapLegacy
    (**  *)
    and remove_from_schedule ~__context ~self ~key =
      let self = DM_to_String.ref_VMSS self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VMSS" "schedule" self RemoveMap
    (**  *)
    and set_last_run_time ~__context ~self ~value =
      let self = DM_to_String.ref_VMSS self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VMSS" self "last_run_time" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vMSS_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vMSS_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.vMSS_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.vMSS_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        API.vMSS_type = String_to_DM.vmss_type(List.assoc "type" __regular_fields);
        API.vMSS_retained_snapshots = String_to_DM.int64(List.assoc "retained_snapshots" __regular_fields);
        API.vMSS_frequency = String_to_DM.vmss_frequency(List.assoc "frequency" __regular_fields);
        API.vMSS_schedule = String_to_DM.string_to_string_map(List.assoc "schedule" __regular_fields);
        API.vMSS_last_run_time = String_to_DM.datetime(List.assoc "last_run_time" __regular_fields);
        API.vMSS_VMs = List.map String_to_DM.ref_VM (List.assoc "VMs" __set_refs);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vMSS_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vMSS_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        vMSS_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        vMSS_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        vMSS_type = String_to_DM.vmss_type(List.assoc "type" __regular_fields);
        vMSS_retained_snapshots = String_to_DM.int64(List.assoc "retained_snapshots" __regular_fields);
        vMSS_frequency = String_to_DM.vmss_frequency(List.assoc "frequency" __regular_fields);
        vMSS_schedule = String_to_DM.string_to_string_map(List.assoc "schedule" __regular_fields);
        vMSS_last_run_time = String_to_DM.datetime(List.assoc "last_run_time" __regular_fields);
        vMSS_VMs = List.map String_to_DM.ref_VM (List.assoc "VMs" __set_refs);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VMSS" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VMSS" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VMSS" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VMSS_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VMSS"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vMSS_t (VMSS.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VM_appliance = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM_appliance" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VM_appliance" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VM_appliance(DB.read_refs __t "VM_appliance")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_appliance (DB.db_get_by_uuid __t "VM_appliance" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~allowed_operations ~current_operations =
      let ref = DM_to_String.ref_VM_appliance ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let allowed_operations = DM_to_String.vm_appliance_operation_set allowed_operations in
      let current_operations = DM_to_String.string_to_vm_appliance_operation_map current_operations in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VM_appliance" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("allowed_operations", allowed_operations); ("current_operations", current_operations) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VM_appliance" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VM_appliance (DB.db_get_by_name_label __t "VM_appliance" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM_appliance" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM_appliance" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VM_appliance" "name__description" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vm_appliance_operation_set (DB.read_field __t "VM_appliance" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_vm_appliance_operation_map (DB.read_field __t "VM_appliance" "current_operations" self)
    (**  *)
    and get_VMs ~__context ~self =
      let self = DM_to_String.ref_VM_appliance self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_set (DB.read_field __t "VM_appliance" "VMs" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_appliance" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_appliance" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_appliance" self "name__description" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let value = DM_to_String.vm_appliance_operation_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_appliance" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let value = DM_to_String.vm_appliance_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM_appliance" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let value = DM_to_String.vm_appliance_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VM_appliance" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let value = DM_to_String.string_to_vm_appliance_operation_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VM_appliance" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VM_appliance self in
      let key = DM_to_String.string key in
      let value = DM_to_String.vm_appliance_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VM_appliance" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_VM_appliance self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VM_appliance" "current_operations" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vM_appliance_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vM_appliance_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.vM_appliance_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.vM_appliance_allowed_operations = String_to_DM.vm_appliance_operation_set(List.assoc "allowed_operations" __regular_fields);
        API.vM_appliance_current_operations = String_to_DM.string_to_vm_appliance_operation_map(List.assoc "current_operations" __regular_fields);
        API.vM_appliance_VMs = List.map String_to_DM.ref_VM (List.assoc "VMs" __set_refs);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vM_appliance_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vM_appliance_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        vM_appliance_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        vM_appliance_allowed_operations = String_to_DM.vm_appliance_operation_set(List.assoc "allowed_operations" __regular_fields);
        vM_appliance_current_operations = String_to_DM.string_to_vm_appliance_operation_map(List.assoc "current_operations" __regular_fields);
        vM_appliance_VMs = List.map String_to_DM.ref_VM (List.assoc "VMs" __set_refs);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VM_appliance" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM_appliance" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VM_appliance" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VM_appliance_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VM_appliance"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vM_appliance_t (VM_appliance.get_record ~__context ~self:(Ref.of_string self))))
  end
  module DR_task = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_DR_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "DR_task" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_DR_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "DR_task" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_DR_task(DB.read_refs __t "DR_task")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_DR_task (DB.db_get_by_uuid __t "DR_task" uuid)
    (**  *)
    and create ~__context ~ref ~uuid =
      let ref = DM_to_String.ref_DR_task ref in
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "DR_task" [ ("uuid", uuid) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_DR_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "DR_task" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_DR_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "DR_task" "uuid" self)
    (**  *)
    and get_introduced_SRs ~__context ~self =
      let self = DM_to_String.ref_DR_task self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR_set (DB.read_field __t "DR_task" "introduced_SRs" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_DR_task self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "DR_task" self "uuid" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.dR_task_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.dR_task_introduced_SRs = List.map String_to_DM.ref_SR (List.assoc "introduced_SRs" __set_refs);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        dR_task_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        dR_task_introduced_SRs = List.map String_to_DM.ref_SR (List.assoc "introduced_SRs" __set_refs);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "DR_task" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "DR_task" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "DR_task" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module DR_task_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "DR_task"
      (fun ~__context ~self -> (fun () -> API.rpc_of_dR_task_t (DR_task.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Host = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_host(DB.read_refs __t "host")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.db_get_by_uuid __t "host" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~memory_overhead ~allowed_operations ~current_operations ~aPI_version_major ~aPI_version_minor ~aPI_version_vendor ~aPI_version_vendor_implementation ~enabled ~software_version ~other_config ~capabilities ~cpu_configuration ~sched_policy ~supported_bootloaders ~logging ~suspend_image_sr ~crash_dump_sr ~cpu_info ~hostname ~address ~metrics ~license_params ~boot_free_mem ~ha_statefiles ~ha_network_peers ~blobs ~tags ~external_auth_type ~external_auth_service_name ~external_auth_configuration ~edition ~license_server ~bios_strings ~power_on_mode ~power_on_config ~local_cache_sr ~chipset_info ~ssl_legacy ~guest_VCPUs_params ~display ~virtual_hardware_platform_versions ~control_domain ~updates_requiring_reboot ~iscsi_iqn ~multipathing ~uefi_certificates ~editions ~https_only =
      let ref = DM_to_String.ref_host ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let memory_overhead = DM_to_String.int64 memory_overhead in
      let allowed_operations = DM_to_String.host_allowed_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_host_allowed_operations_map current_operations in
      let aPI_version_major = DM_to_String.int64 aPI_version_major in
      let aPI_version_minor = DM_to_String.int64 aPI_version_minor in
      let aPI_version_vendor = DM_to_String.string aPI_version_vendor in
      let aPI_version_vendor_implementation = DM_to_String.string_to_string_map aPI_version_vendor_implementation in
      let enabled = DM_to_String.bool enabled in
      let software_version = DM_to_String.string_to_string_map software_version in
      let other_config = DM_to_String.string_to_string_map other_config in
      let capabilities = DM_to_String.string_set capabilities in
      let cpu_configuration = DM_to_String.string_to_string_map cpu_configuration in
      let sched_policy = DM_to_String.string sched_policy in
      let supported_bootloaders = DM_to_String.string_set supported_bootloaders in
      let logging = DM_to_String.string_to_string_map logging in
      let suspend_image_sr = DM_to_String.ref_SR suspend_image_sr in
      let crash_dump_sr = DM_to_String.ref_SR crash_dump_sr in
      let cpu_info = DM_to_String.string_to_string_map cpu_info in
      let hostname = DM_to_String.string hostname in
      let address = DM_to_String.string address in
      let metrics = DM_to_String.ref_host_metrics metrics in
      let license_params = DM_to_String.string_to_string_map license_params in
      let boot_free_mem = DM_to_String.int64 boot_free_mem in
      let ha_statefiles = DM_to_String.string_set ha_statefiles in
      let ha_network_peers = DM_to_String.string_set ha_network_peers in
      let blobs = DM_to_String.string_to_ref_blob_map blobs in
      let tags = DM_to_String.string_set tags in
      let external_auth_type = DM_to_String.string external_auth_type in
      let external_auth_service_name = DM_to_String.string external_auth_service_name in
      let external_auth_configuration = DM_to_String.string_to_string_map external_auth_configuration in
      let edition = DM_to_String.string edition in
      let license_server = DM_to_String.string_to_string_map license_server in
      let bios_strings = DM_to_String.string_to_string_map bios_strings in
      let power_on_mode = DM_to_String.string power_on_mode in
      let power_on_config = DM_to_String.string_to_string_map power_on_config in
      let local_cache_sr = DM_to_String.ref_SR local_cache_sr in
      let chipset_info = DM_to_String.string_to_string_map chipset_info in
      let ssl_legacy = DM_to_String.bool ssl_legacy in
      let guest_VCPUs_params = DM_to_String.string_to_string_map guest_VCPUs_params in
      let display = DM_to_String.host_display display in
      let virtual_hardware_platform_versions = DM_to_String.int64_set virtual_hardware_platform_versions in
      let control_domain = DM_to_String.ref_VM control_domain in
      let updates_requiring_reboot = DM_to_String.ref_pool_update_set updates_requiring_reboot in
      let iscsi_iqn = DM_to_String.string iscsi_iqn in
      let multipathing = DM_to_String.bool multipathing in
      let uefi_certificates = DM_to_String.string uefi_certificates in
      let editions = DM_to_String.string_set editions in
      let https_only = DM_to_String.bool https_only in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "host" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("memory__overhead", memory_overhead); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("API_version__major", aPI_version_major); ("API_version__minor", aPI_version_minor); ("API_version__vendor", aPI_version_vendor); ("API_version__vendor_implementation", aPI_version_vendor_implementation); ("enabled", enabled); ("software_version", software_version); ("other_config", other_config); ("capabilities", capabilities); ("cpu_configuration", cpu_configuration); ("sched_policy", sched_policy); ("supported_bootloaders", supported_bootloaders); ("logging", logging); ("suspend_image_sr", suspend_image_sr); ("crash_dump_sr", crash_dump_sr); ("cpu_info", cpu_info); ("hostname", hostname); ("address", address); ("metrics", metrics); ("license_params", license_params); ("boot_free_mem", boot_free_mem); ("ha_statefiles", ha_statefiles); ("ha_network_peers", ha_network_peers); ("blobs", blobs); ("tags", tags); ("external_auth_type", external_auth_type); ("external_auth_service_name", external_auth_service_name); ("external_auth_configuration", external_auth_configuration); ("edition", edition); ("license_server", license_server); ("bios_strings", bios_strings); ("power_on_mode", power_on_mode); ("power_on_config", power_on_config); ("local_cache_sr", local_cache_sr); ("chipset_info", chipset_info); ("ssl_legacy", ssl_legacy); ("guest_VCPUs_params", guest_VCPUs_params); ("display", display); ("virtual_hardware_platform_versions", virtual_hardware_platform_versions); ("control_domain", control_domain); ("updates_requiring_reboot", updates_requiring_reboot); ("iscsi_iqn", iscsi_iqn); ("multipathing", multipathing); ("uefi_certificates", uefi_certificates); ("editions", editions); ("https_only", https_only) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "host" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_host (DB.db_get_by_name_label __t "host" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "name__description" self)
    (**  *)
    and get_memory_overhead ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host" "memory__overhead" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.host_allowed_operations_set (DB.read_field __t "host" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_host_allowed_operations_map (DB.read_field __t "host" "current_operations" self)
    (**  *)
    and get_API_version_major ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host" "API_version__major" self)
    (**  *)
    and get_API_version_minor ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host" "API_version__minor" self)
    (**  *)
    and get_API_version_vendor ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "API_version__vendor" self)
    (**  *)
    and get_API_version_vendor_implementation ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "API_version__vendor_implementation" self)
    (**  *)
    and get_enabled ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "host" "enabled" self)
    (**  *)
    and get_software_version ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "software_version" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "other_config" self)
    (**  *)
    and get_capabilities ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "host" "capabilities" self)
    (**  *)
    and get_cpu_configuration ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "cpu_configuration" self)
    (**  *)
    and get_sched_policy ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "sched_policy" self)
    (**  *)
    and get_supported_bootloaders ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "host" "supported_bootloaders" self)
    (**  *)
    and get_resident_VMs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_set (DB.read_field __t "host" "resident_VMs" self)
    (**  *)
    and get_logging ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "logging" self)
    (**  *)
    and get_PIFs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF_set (DB.read_field __t "host" "PIFs" self)
    (**  *)
    and get_suspend_image_sr ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "host" "suspend_image_sr" self)
    (**  *)
    and get_crash_dump_sr ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "host" "crash_dump_sr" self)
    (**  *)
    and get_crashdumps ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_crashdump_set (DB.read_field __t "host" "crashdumps" self)
    (**  *)
    and get_patches ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_patch_set (DB.read_field __t "host" "patches" self)
    (**  *)
    and get_updates ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool_update_set (DB.read_field __t "host" "updates" self)
    (**  *)
    and get_PBDs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PBD_set (DB.read_field __t "host" "PBDs" self)
    (**  *)
    and get_host_CPUs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_cpu_set (DB.read_field __t "host" "host_CPUs" self)
    (**  *)
    and get_cpu_info ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "cpu_info" self)
    (**  *)
    and get_hostname ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "hostname" self)
    (**  *)
    and get_address ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "address" self)
    (**  *)
    and get_metrics ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_metrics (DB.read_field __t "host" "metrics" self)
    (**  *)
    and get_license_params ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "license_params" self)
    (**  *)
    and get_boot_free_mem ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host" "boot_free_mem" self)
    (**  *)
    and get_ha_statefiles ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "host" "ha_statefiles" self)
    (**  *)
    and get_ha_network_peers ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "host" "ha_network_peers" self)
    (**  *)
    and get_blobs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_ref_blob_map (DB.read_field __t "host" "blobs" self)
    (**  *)
    and get_tags ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "host" "tags" self)
    (**  *)
    and get_external_auth_type ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "external_auth_type" self)
    (**  *)
    and get_external_auth_service_name ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "external_auth_service_name" self)
    (**  *)
    and get_external_auth_configuration ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "external_auth_configuration" self)
    (**  *)
    and get_edition ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "edition" self)
    (**  *)
    and get_license_server ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "license_server" self)
    (**  *)
    and get_bios_strings ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "bios_strings" self)
    (**  *)
    and get_power_on_mode ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "power_on_mode" self)
    (**  *)
    and get_power_on_config ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "power_on_config" self)
    (**  *)
    and get_local_cache_sr ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "host" "local_cache_sr" self)
    (**  *)
    and get_chipset_info ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "chipset_info" self)
    (**  *)
    and get_PCIs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI_set (DB.read_field __t "host" "PCIs" self)
    (**  *)
    and get_PGPUs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PGPU_set (DB.read_field __t "host" "PGPUs" self)
    (**  *)
    and get_PUSBs ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PUSB_set (DB.read_field __t "host" "PUSBs" self)
    (**  *)
    and get_ssl_legacy ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "host" "ssl_legacy" self)
    (**  *)
    and get_guest_VCPUs_params ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host" "guest_VCPUs_params" self)
    (**  *)
    and get_display ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.host_display (DB.read_field __t "host" "display" self)
    (**  *)
    and get_virtual_hardware_platform_versions ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64_set (DB.read_field __t "host" "virtual_hardware_platform_versions" self)
    (**  *)
    and get_control_domain ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "host" "control_domain" self)
    (**  *)
    and get_updates_requiring_reboot ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool_update_set (DB.read_field __t "host" "updates_requiring_reboot" self)
    (**  *)
    and get_features ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Feature_set (DB.read_field __t "host" "features" self)
    (**  *)
    and get_iscsi_iqn ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "iscsi_iqn" self)
    (**  *)
    and get_multipathing ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "host" "multipathing" self)
    (**  *)
    and get_uefi_certificates ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host" "uefi_certificates" self)
    (**  *)
    and get_certificates ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Certificate_set (DB.read_field __t "host" "certificates" self)
    (**  *)
    and get_editions ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "host" "editions" self)
    (**  *)
    and get_https_only ~__context ~self =
      let self = DM_to_String.ref_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "host" "https_only" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "name__description" value
    (**  *)
    and set_memory_overhead ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "memory__overhead" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.host_allowed_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.host_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.host_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_host_allowed_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.host_allowed_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "current_operations" self RemoveMap
    (**  *)
    and set_API_version_major ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "API_version__major" value
    (**  *)
    and set_API_version_minor ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "API_version__minor" value
    (**  *)
    and set_API_version_vendor ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "API_version__vendor" value
    (**  *)
    and set_API_version_vendor_implementation ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "API_version__vendor_implementation" value
    (**  *)
    and add_to_API_version_vendor_implementation ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "API_version__vendor_implementation" self AddMapLegacy
    (**  *)
    and remove_from_API_version_vendor_implementation ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "API_version__vendor_implementation" self RemoveMap
    (**  *)
    and set_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "enabled" value
    (**  *)
    and set_software_version ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "software_version" value
    (**  *)
    and add_to_software_version ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "software_version" self AddMapLegacy
    (**  *)
    and remove_from_software_version ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "software_version" self RemoveMap
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "other_config" self RemoveMap
    (**  *)
    and set_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "capabilities" value
    (**  *)
    and add_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "capabilities" self AddSet
    (**  *)
    and remove_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "capabilities" self RemoveSet
    (**  *)
    and set_cpu_configuration ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "cpu_configuration" value
    (**  *)
    and add_to_cpu_configuration ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "cpu_configuration" self AddMapLegacy
    (**  *)
    and remove_from_cpu_configuration ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "cpu_configuration" self RemoveMap
    (**  *)
    and set_sched_policy ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "sched_policy" value
    (**  *)
    and set_supported_bootloaders ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "supported_bootloaders" value
    (**  *)
    and add_supported_bootloaders ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "supported_bootloaders" self AddSet
    (**  *)
    and remove_supported_bootloaders ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "supported_bootloaders" self RemoveSet
    (**  *)
    and set_logging ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "logging" value
    (**  *)
    and add_to_logging ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "logging" self AddMapLegacy
    (**  *)
    and remove_from_logging ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "logging" self RemoveMap
    (**  *)
    and set_suspend_image_sr ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "suspend_image_sr" value
    (**  *)
    and set_crash_dump_sr ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "crash_dump_sr" value
    (**  *)
    and set_updates ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_pool_update_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "updates" value
    (**  *)
    and add_updates ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_pool_update value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "updates" self AddSet
    (**  *)
    and remove_updates ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_pool_update value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "updates" self RemoveSet
    (**  *)
    and set_cpu_info ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "cpu_info" value
    (**  *)
    and add_to_cpu_info ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "cpu_info" self AddMapLegacy
    (**  *)
    and remove_from_cpu_info ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "cpu_info" self RemoveMap
    (**  *)
    and set_hostname ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "hostname" value
    (**  *)
    and set_address ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "address" value
    (**  *)
    and set_metrics ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_host_metrics value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "metrics" value
    (**  *)
    and set_license_params ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "license_params" value
    (**  *)
    and add_to_license_params ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "license_params" self AddMapLegacy
    (**  *)
    and remove_from_license_params ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "license_params" self RemoveMap
    (**  *)
    and set_boot_free_mem ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "boot_free_mem" value
    (**  *)
    and set_ha_statefiles ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "ha_statefiles" value
    (**  *)
    and add_ha_statefiles ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "ha_statefiles" self AddSet
    (**  *)
    and remove_ha_statefiles ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "ha_statefiles" self RemoveSet
    (**  *)
    and set_ha_network_peers ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "ha_network_peers" value
    (**  *)
    and add_ha_network_peers ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "ha_network_peers" self AddSet
    (**  *)
    and remove_ha_network_peers ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "ha_network_peers" self RemoveSet
    (**  *)
    and set_blobs ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_ref_blob_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "blobs" value
    (**  *)
    and add_to_blobs ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.ref_blob value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "blobs" self AddMapLegacy
    (**  *)
    and remove_from_blobs ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "blobs" self RemoveMap
    (**  *)
    and set_tags ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "tags" value
    (**  *)
    and add_tags ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "tags" self AddSet
    (**  *)
    and remove_tags ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "tags" self RemoveSet
    (**  *)
    and set_external_auth_type ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "external_auth_type" value
    (**  *)
    and set_external_auth_service_name ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "external_auth_service_name" value
    (**  *)
    and set_external_auth_configuration ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "external_auth_configuration" value
    (**  *)
    and add_to_external_auth_configuration ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "external_auth_configuration" self AddMapLegacy
    (**  *)
    and remove_from_external_auth_configuration ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "external_auth_configuration" self RemoveMap
    (**  *)
    and set_edition ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "edition" value
    (**  *)
    and set_license_server ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "license_server" value
    (**  *)
    and add_to_license_server ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "license_server" self AddMapLegacy
    (**  *)
    and remove_from_license_server ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "license_server" self RemoveMap
    (**  *)
    and set_bios_strings ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "bios_strings" value
    (**  *)
    and add_to_bios_strings ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "bios_strings" self AddMapLegacy
    (**  *)
    and remove_from_bios_strings ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "bios_strings" self RemoveMap
    (**  *)
    and set_power_on_mode ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "power_on_mode" value
    (**  *)
    and set_power_on_config ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "power_on_config" value
    (**  *)
    and add_to_power_on_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "power_on_config" self AddMapLegacy
    (**  *)
    and remove_from_power_on_config ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "power_on_config" self RemoveMap
    (**  *)
    and set_local_cache_sr ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "local_cache_sr" value
    (**  *)
    and set_chipset_info ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "chipset_info" value
    (**  *)
    and add_to_chipset_info ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "chipset_info" self AddMapLegacy
    (**  *)
    and remove_from_chipset_info ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "chipset_info" self RemoveMap
    (**  *)
    and set_ssl_legacy ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "ssl_legacy" value
    (**  *)
    and set_guest_VCPUs_params ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "guest_VCPUs_params" value
    (**  *)
    and add_to_guest_VCPUs_params ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host" "guest_VCPUs_params" self AddMapLegacy
    (**  *)
    and remove_from_guest_VCPUs_params ~__context ~self ~key =
      let self = DM_to_String.ref_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host" "guest_VCPUs_params" self RemoveMap
    (**  *)
    and set_display ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.host_display value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "display" value
    (**  *)
    and set_virtual_hardware_platform_versions ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.int64_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "virtual_hardware_platform_versions" value
    (**  *)
    and add_virtual_hardware_platform_versions ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "virtual_hardware_platform_versions" self AddSet
    (**  *)
    and remove_virtual_hardware_platform_versions ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "virtual_hardware_platform_versions" self RemoveSet
    (**  *)
    and set_control_domain ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "control_domain" value
    (**  *)
    and set_updates_requiring_reboot ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_pool_update_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "updates_requiring_reboot" value
    (**  *)
    and add_updates_requiring_reboot ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_pool_update value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "updates_requiring_reboot" self AddSet
    (**  *)
    and remove_updates_requiring_reboot ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.ref_pool_update value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "updates_requiring_reboot" self RemoveSet
    (**  *)
    and set_iscsi_iqn ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "iscsi_iqn" value
    (**  *)
    and set_multipathing ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "multipathing" value
    (**  *)
    and set_uefi_certificates ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "uefi_certificates" value
    (**  *)
    and set_editions ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "editions" value
    (**  *)
    and add_editions ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "editions" self AddSet
    (**  *)
    and remove_editions ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "host" "editions" self RemoveSet
    (**  *)
    and set_https_only ~__context ~self ~value =
      let self = DM_to_String.ref_host self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host" self "https_only" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.host_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.host_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.host_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.host_memory_overhead = String_to_DM.int64(List.assoc "memory__overhead" __regular_fields);
        API.host_allowed_operations = String_to_DM.host_allowed_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.host_current_operations = String_to_DM.string_to_host_allowed_operations_map(List.assoc "current_operations" __regular_fields);
        API.host_API_version_major = String_to_DM.int64(List.assoc "API_version__major" __regular_fields);
        API.host_API_version_minor = String_to_DM.int64(List.assoc "API_version__minor" __regular_fields);
        API.host_API_version_vendor = String_to_DM.string(List.assoc "API_version__vendor" __regular_fields);
        API.host_API_version_vendor_implementation = String_to_DM.string_to_string_map(List.assoc "API_version__vendor_implementation" __regular_fields);
        API.host_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        API.host_software_version = String_to_DM.string_to_string_map(List.assoc "software_version" __regular_fields);
        API.host_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.host_capabilities = String_to_DM.string_set(List.assoc "capabilities" __regular_fields);
        API.host_cpu_configuration = String_to_DM.string_to_string_map(List.assoc "cpu_configuration" __regular_fields);
        API.host_sched_policy = String_to_DM.string(List.assoc "sched_policy" __regular_fields);
        API.host_supported_bootloaders = String_to_DM.string_set(List.assoc "supported_bootloaders" __regular_fields);
        API.host_resident_VMs = List.map String_to_DM.ref_VM (List.assoc "resident_VMs" __set_refs);
        API.host_logging = String_to_DM.string_to_string_map(List.assoc "logging" __regular_fields);
        API.host_PIFs = List.map String_to_DM.ref_PIF (List.assoc "PIFs" __set_refs);
        API.host_suspend_image_sr = String_to_DM.ref_SR(List.assoc "suspend_image_sr" __regular_fields);
        API.host_crash_dump_sr = String_to_DM.ref_SR(List.assoc "crash_dump_sr" __regular_fields);
        API.host_crashdumps = List.map String_to_DM.ref_host_crashdump (List.assoc "crashdumps" __set_refs);
        API.host_patches = List.map String_to_DM.ref_host_patch (List.assoc "patches" __set_refs);
        API.host_updates = List.map String_to_DM.ref_pool_update (List.assoc "updates" __set_refs);
        API.host_PBDs = List.map String_to_DM.ref_PBD (List.assoc "PBDs" __set_refs);
        API.host_host_CPUs = List.map String_to_DM.ref_host_cpu (List.assoc "host_CPUs" __set_refs);
        API.host_cpu_info = String_to_DM.string_to_string_map(List.assoc "cpu_info" __regular_fields);
        API.host_hostname = String_to_DM.string(List.assoc "hostname" __regular_fields);
        API.host_address = String_to_DM.string(List.assoc "address" __regular_fields);
        API.host_metrics = String_to_DM.ref_host_metrics(List.assoc "metrics" __regular_fields);
        API.host_license_params = String_to_DM.string_to_string_map(List.assoc "license_params" __regular_fields);
        API.host_ha_statefiles = String_to_DM.string_set(List.assoc "ha_statefiles" __regular_fields);
        API.host_ha_network_peers = String_to_DM.string_set(List.assoc "ha_network_peers" __regular_fields);
        API.host_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        API.host_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        API.host_external_auth_type = String_to_DM.string(List.assoc "external_auth_type" __regular_fields);
        API.host_external_auth_service_name = String_to_DM.string(List.assoc "external_auth_service_name" __regular_fields);
        API.host_external_auth_configuration = String_to_DM.string_to_string_map(List.assoc "external_auth_configuration" __regular_fields);
        API.host_edition = String_to_DM.string(List.assoc "edition" __regular_fields);
        API.host_license_server = String_to_DM.string_to_string_map(List.assoc "license_server" __regular_fields);
        API.host_bios_strings = String_to_DM.string_to_string_map(List.assoc "bios_strings" __regular_fields);
        API.host_power_on_mode = String_to_DM.string(List.assoc "power_on_mode" __regular_fields);
        API.host_power_on_config = String_to_DM.string_to_string_map(List.assoc "power_on_config" __regular_fields);
        API.host_local_cache_sr = String_to_DM.ref_SR(List.assoc "local_cache_sr" __regular_fields);
        API.host_chipset_info = String_to_DM.string_to_string_map(List.assoc "chipset_info" __regular_fields);
        API.host_PCIs = List.map String_to_DM.ref_PCI (List.assoc "PCIs" __set_refs);
        API.host_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "PGPUs" __set_refs);
        API.host_PUSBs = List.map String_to_DM.ref_PUSB (List.assoc "PUSBs" __set_refs);
        API.host_ssl_legacy = String_to_DM.bool(List.assoc "ssl_legacy" __regular_fields);
        API.host_guest_VCPUs_params = String_to_DM.string_to_string_map(List.assoc "guest_VCPUs_params" __regular_fields);
        API.host_display = String_to_DM.host_display(List.assoc "display" __regular_fields);
        API.host_virtual_hardware_platform_versions = String_to_DM.int64_set(List.assoc "virtual_hardware_platform_versions" __regular_fields);
        API.host_control_domain = String_to_DM.ref_VM(List.assoc "control_domain" __regular_fields);
        API.host_updates_requiring_reboot = String_to_DM.ref_pool_update_set(List.assoc "updates_requiring_reboot" __regular_fields);
        API.host_features = List.map String_to_DM.ref_Feature (List.assoc "features" __set_refs);
        API.host_iscsi_iqn = String_to_DM.string(List.assoc "iscsi_iqn" __regular_fields);
        API.host_multipathing = String_to_DM.bool(List.assoc "multipathing" __regular_fields);
        API.host_uefi_certificates = String_to_DM.string(List.assoc "uefi_certificates" __regular_fields);
        API.host_certificates = List.map String_to_DM.ref_Certificate (List.assoc "certificates" __set_refs);
        API.host_editions = String_to_DM.string_set(List.assoc "editions" __regular_fields);
        API.host_https_only = String_to_DM.bool(List.assoc "https_only" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        host_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        host_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        host_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        host_memory_overhead = String_to_DM.int64(List.assoc "memory__overhead" __regular_fields);
        host_allowed_operations = String_to_DM.host_allowed_operations_set(List.assoc "allowed_operations" __regular_fields);
        host_current_operations = String_to_DM.string_to_host_allowed_operations_map(List.assoc "current_operations" __regular_fields);
        host_API_version_major = String_to_DM.int64(List.assoc "API_version__major" __regular_fields);
        host_API_version_minor = String_to_DM.int64(List.assoc "API_version__minor" __regular_fields);
        host_API_version_vendor = String_to_DM.string(List.assoc "API_version__vendor" __regular_fields);
        host_API_version_vendor_implementation = String_to_DM.string_to_string_map(List.assoc "API_version__vendor_implementation" __regular_fields);
        host_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        host_software_version = String_to_DM.string_to_string_map(List.assoc "software_version" __regular_fields);
        host_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        host_capabilities = String_to_DM.string_set(List.assoc "capabilities" __regular_fields);
        host_cpu_configuration = String_to_DM.string_to_string_map(List.assoc "cpu_configuration" __regular_fields);
        host_sched_policy = String_to_DM.string(List.assoc "sched_policy" __regular_fields);
        host_supported_bootloaders = String_to_DM.string_set(List.assoc "supported_bootloaders" __regular_fields);
        host_resident_VMs = List.map String_to_DM.ref_VM (List.assoc "resident_VMs" __set_refs);
        host_logging = String_to_DM.string_to_string_map(List.assoc "logging" __regular_fields);
        host_PIFs = List.map String_to_DM.ref_PIF (List.assoc "PIFs" __set_refs);
        host_suspend_image_sr = String_to_DM.ref_SR(List.assoc "suspend_image_sr" __regular_fields);
        host_crash_dump_sr = String_to_DM.ref_SR(List.assoc "crash_dump_sr" __regular_fields);
        host_crashdumps = List.map String_to_DM.ref_host_crashdump (List.assoc "crashdumps" __set_refs);
        host_patches = List.map String_to_DM.ref_host_patch (List.assoc "patches" __set_refs);
        host_updates = List.map String_to_DM.ref_pool_update (List.assoc "updates" __set_refs);
        host_PBDs = List.map String_to_DM.ref_PBD (List.assoc "PBDs" __set_refs);
        host_host_CPUs = List.map String_to_DM.ref_host_cpu (List.assoc "host_CPUs" __set_refs);
        host_cpu_info = String_to_DM.string_to_string_map(List.assoc "cpu_info" __regular_fields);
        host_hostname = String_to_DM.string(List.assoc "hostname" __regular_fields);
        host_address = String_to_DM.string(List.assoc "address" __regular_fields);
        host_metrics = String_to_DM.ref_host_metrics(List.assoc "metrics" __regular_fields);
        host_license_params = String_to_DM.string_to_string_map(List.assoc "license_params" __regular_fields);
        host_boot_free_mem = String_to_DM.int64(List.assoc "boot_free_mem" __regular_fields);
        host_ha_statefiles = String_to_DM.string_set(List.assoc "ha_statefiles" __regular_fields);
        host_ha_network_peers = String_to_DM.string_set(List.assoc "ha_network_peers" __regular_fields);
        host_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        host_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        host_external_auth_type = String_to_DM.string(List.assoc "external_auth_type" __regular_fields);
        host_external_auth_service_name = String_to_DM.string(List.assoc "external_auth_service_name" __regular_fields);
        host_external_auth_configuration = String_to_DM.string_to_string_map(List.assoc "external_auth_configuration" __regular_fields);
        host_edition = String_to_DM.string(List.assoc "edition" __regular_fields);
        host_license_server = String_to_DM.string_to_string_map(List.assoc "license_server" __regular_fields);
        host_bios_strings = String_to_DM.string_to_string_map(List.assoc "bios_strings" __regular_fields);
        host_power_on_mode = String_to_DM.string(List.assoc "power_on_mode" __regular_fields);
        host_power_on_config = String_to_DM.string_to_string_map(List.assoc "power_on_config" __regular_fields);
        host_local_cache_sr = String_to_DM.ref_SR(List.assoc "local_cache_sr" __regular_fields);
        host_chipset_info = String_to_DM.string_to_string_map(List.assoc "chipset_info" __regular_fields);
        host_PCIs = List.map String_to_DM.ref_PCI (List.assoc "PCIs" __set_refs);
        host_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "PGPUs" __set_refs);
        host_PUSBs = List.map String_to_DM.ref_PUSB (List.assoc "PUSBs" __set_refs);
        host_ssl_legacy = String_to_DM.bool(List.assoc "ssl_legacy" __regular_fields);
        host_guest_VCPUs_params = String_to_DM.string_to_string_map(List.assoc "guest_VCPUs_params" __regular_fields);
        host_display = String_to_DM.host_display(List.assoc "display" __regular_fields);
        host_virtual_hardware_platform_versions = String_to_DM.int64_set(List.assoc "virtual_hardware_platform_versions" __regular_fields);
        host_control_domain = String_to_DM.ref_VM(List.assoc "control_domain" __regular_fields);
        host_updates_requiring_reboot = String_to_DM.ref_pool_update_set(List.assoc "updates_requiring_reboot" __regular_fields);
        host_features = List.map String_to_DM.ref_Feature (List.assoc "features" __set_refs);
        host_iscsi_iqn = String_to_DM.string(List.assoc "iscsi_iqn" __regular_fields);
        host_multipathing = String_to_DM.bool(List.assoc "multipathing" __regular_fields);
        host_uefi_certificates = String_to_DM.string(List.assoc "uefi_certificates" __regular_fields);
        host_certificates = List.map String_to_DM.ref_Certificate (List.assoc "certificates" __set_refs);
        host_editions = String_to_DM.string_set(List.assoc "editions" __regular_fields);
        host_https_only = String_to_DM.bool(List.assoc "https_only" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "host" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Host_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "host"
      (fun ~__context ~self -> (fun () -> API.rpc_of_host_t (Host.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Host_crashdump = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_crashdump" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_crashdump" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_host_crashdump(DB.read_refs __t "host_crashdump")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_crashdump (DB.db_get_by_uuid __t "host_crashdump" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~host ~timestamp ~size ~filename ~other_config =
      let ref = DM_to_String.ref_host_crashdump ref in
      let uuid = DM_to_String.string uuid in
      let host = DM_to_String.ref_host host in
      let timestamp = DM_to_String.datetime timestamp in
      let size = DM_to_String.int64 size in
      let filename = DM_to_String.string filename in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "host_crashdump" [ ("uuid", uuid); ("host", host); ("timestamp", timestamp); ("size", size); ("filename", filename); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "host_crashdump" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_crashdump" "uuid" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "host_crashdump" "host" self)
    (**  *)
    and get_timestamp ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "host_crashdump" "timestamp" self)
    (**  *)
    and get_size ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_crashdump" "size" self)
    (**  *)
    and get_filename ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_crashdump" "filename" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_host_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host_crashdump" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_host_crashdump self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_crashdump" self "uuid" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_host_crashdump self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_crashdump" self "host" value
    (**  *)
    and set_timestamp ~__context ~self ~value =
      let self = DM_to_String.ref_host_crashdump self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_crashdump" self "timestamp" value
    (**  *)
    and set_size ~__context ~self ~value =
      let self = DM_to_String.ref_host_crashdump self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_crashdump" self "size" value
    (**  *)
    and set_filename ~__context ~self ~value =
      let self = DM_to_String.ref_host_crashdump self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_crashdump" self "filename" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_host_crashdump self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_crashdump" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host_crashdump self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host_crashdump" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_host_crashdump self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host_crashdump" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.host_crashdump_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.host_crashdump_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.host_crashdump_timestamp = String_to_DM.datetime(List.assoc "timestamp" __regular_fields);
        API.host_crashdump_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        API.host_crashdump_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        host_crashdump_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        host_crashdump_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        host_crashdump_timestamp = String_to_DM.datetime(List.assoc "timestamp" __regular_fields);
        host_crashdump_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        host_crashdump_filename = String_to_DM.string(List.assoc "filename" __regular_fields);
        host_crashdump_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "host_crashdump" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_crashdump" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_crashdump" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Host_crashdump_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "host_crashdump"
      (fun ~__context ~self -> (fun () -> API.rpc_of_host_crashdump_t (Host_crashdump.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Host_patch = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_patch" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_patch" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_host_patch(DB.read_refs __t "host_patch")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_patch (DB.db_get_by_uuid __t "host_patch" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~version ~host ~filename ~applied ~timestamp_applied ~size ~pool_patch ~other_config =
      let ref = DM_to_String.ref_host_patch ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let version = DM_to_String.string version in
      let host = DM_to_String.ref_host host in
      let filename = DM_to_String.string filename in
      let applied = DM_to_String.bool applied in
      let timestamp_applied = DM_to_String.datetime timestamp_applied in
      let size = DM_to_String.int64 size in
      let pool_patch = DM_to_String.ref_pool_patch pool_patch in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "host_patch" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("version", version); ("host", host); ("filename", filename); ("applied", applied); ("timestamp_applied", timestamp_applied); ("size", size); ("pool_patch", pool_patch); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "host_patch" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_host_patch (DB.db_get_by_name_label __t "host_patch" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_patch" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_patch" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_patch" "name__description" self)
    (**  *)
    and get_version ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_patch" "version" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "host_patch" "host" self)
    (**  *)
    and get_filename ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_patch" "filename" self)
    (**  *)
    and get_applied ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "host_patch" "applied" self)
    (**  *)
    and get_timestamp_applied ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "host_patch" "timestamp_applied" self)
    (**  *)
    and get_size ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_patch" "size" self)
    (**  *)
    and get_pool_patch ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool_patch (DB.read_field __t "host_patch" "pool_patch" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_host_patch self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host_patch" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "name__description" value
    (**  *)
    and set_version ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "version" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "host" value
    (**  *)
    and set_filename ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "filename" value
    (**  *)
    and set_applied ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "applied" value
    (**  *)
    and set_timestamp_applied ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "timestamp_applied" value
    (**  *)
    and set_size ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "size" value
    (**  *)
    and set_pool_patch ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.ref_pool_patch value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "pool_patch" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_host_patch self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_patch" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host_patch self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host_patch" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_host_patch self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host_patch" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.host_patch_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.host_patch_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.host_patch_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.host_patch_version = String_to_DM.string(List.assoc "version" __regular_fields);
        API.host_patch_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.host_patch_applied = String_to_DM.bool(List.assoc "applied" __regular_fields);
        API.host_patch_timestamp_applied = String_to_DM.datetime(List.assoc "timestamp_applied" __regular_fields);
        API.host_patch_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        API.host_patch_pool_patch = String_to_DM.ref_pool_patch(List.assoc "pool_patch" __regular_fields);
        API.host_patch_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        host_patch_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        host_patch_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        host_patch_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        host_patch_version = String_to_DM.string(List.assoc "version" __regular_fields);
        host_patch_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        host_patch_filename = String_to_DM.string(List.assoc "filename" __regular_fields);
        host_patch_applied = String_to_DM.bool(List.assoc "applied" __regular_fields);
        host_patch_timestamp_applied = String_to_DM.datetime(List.assoc "timestamp_applied" __regular_fields);
        host_patch_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        host_patch_pool_patch = String_to_DM.ref_pool_patch(List.assoc "pool_patch" __regular_fields);
        host_patch_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "host_patch" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_patch" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_patch" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Host_patch_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "host_patch"
      (fun ~__context ~self -> (fun () -> API.rpc_of_host_patch_t (Host_patch.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Host_metrics = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_metrics" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_metrics" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_host_metrics(DB.read_refs __t "host_metrics")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_metrics (DB.db_get_by_uuid __t "host_metrics" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~memory_total ~memory_free ~live ~last_updated ~other_config =
      let ref = DM_to_String.ref_host_metrics ref in
      let uuid = DM_to_String.string uuid in
      let memory_total = DM_to_String.int64 memory_total in
      let memory_free = DM_to_String.int64 memory_free in
      let live = DM_to_String.bool live in
      let last_updated = DM_to_String.datetime last_updated in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "host_metrics" [ ("uuid", uuid); ("memory__total", memory_total); ("memory__free", memory_free); ("live", live); ("last_updated", last_updated); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "host_metrics" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_metrics" "uuid" self)
    (**  *)
    and get_memory_total ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_metrics" "memory__total" self)
    (**  *)
    and get_memory_free ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_metrics" "memory__free" self)
    (**  *)
    and get_live ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "host_metrics" "live" self)
    (**  *)
    and get_last_updated ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "host_metrics" "last_updated" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_host_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host_metrics" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_host_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_metrics" self "uuid" value
    (**  *)
    and set_memory_total ~__context ~self ~value =
      let self = DM_to_String.ref_host_metrics self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_metrics" self "memory__total" value
    (**  *)
    and set_memory_free ~__context ~self ~value =
      let self = DM_to_String.ref_host_metrics self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_metrics" self "memory__free" value
    (**  *)
    and set_live ~__context ~self ~value =
      let self = DM_to_String.ref_host_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_metrics" self "live" value
    (**  *)
    and set_last_updated ~__context ~self ~value =
      let self = DM_to_String.ref_host_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_metrics" self "last_updated" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_host_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_metrics" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host_metrics" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_host_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host_metrics" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.host_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.host_metrics_memory_total = String_to_DM.int64(List.assoc "memory__total" __regular_fields);
        API.host_metrics_memory_free = String_to_DM.int64(List.assoc "memory__free" __regular_fields);
        API.host_metrics_live = String_to_DM.bool(List.assoc "live" __regular_fields);
        API.host_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        API.host_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        host_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        host_metrics_memory_total = String_to_DM.int64(List.assoc "memory__total" __regular_fields);
        host_metrics_memory_free = String_to_DM.int64(List.assoc "memory__free" __regular_fields);
        host_metrics_live = String_to_DM.bool(List.assoc "live" __regular_fields);
        host_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        host_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "host_metrics" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Host_metrics_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "host_metrics"
      (fun ~__context ~self -> (fun () -> API.rpc_of_host_metrics_t (Host_metrics.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Host_cpu = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_cpu" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "host_cpu" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_host_cpu(DB.read_refs __t "host_cpu")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host_cpu (DB.db_get_by_uuid __t "host_cpu" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~host ~number ~vendor ~speed ~modelname ~family ~model ~stepping ~flags ~features ~utilisation ~other_config =
      let ref = DM_to_String.ref_host_cpu ref in
      let uuid = DM_to_String.string uuid in
      let host = DM_to_String.ref_host host in
      let number = DM_to_String.int64 number in
      let vendor = DM_to_String.string vendor in
      let speed = DM_to_String.int64 speed in
      let modelname = DM_to_String.string modelname in
      let family = DM_to_String.int64 family in
      let model = DM_to_String.int64 model in
      let stepping = DM_to_String.string stepping in
      let flags = DM_to_String.string flags in
      let features = DM_to_String.string features in
      let utilisation = DM_to_String.float utilisation in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "host_cpu" [ ("uuid", uuid); ("host", host); ("number", number); ("vendor", vendor); ("speed", speed); ("modelname", modelname); ("family", family); ("model", model); ("stepping", stepping); ("flags", flags); ("features", features); ("utilisation", utilisation); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "host_cpu" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_cpu" "uuid" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "host_cpu" "host" self)
    (**  *)
    and get_number ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_cpu" "number" self)
    (**  *)
    and get_vendor ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_cpu" "vendor" self)
    (**  *)
    and get_speed ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_cpu" "speed" self)
    (**  *)
    and get_modelname ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_cpu" "modelname" self)
    (**  *)
    and get_family ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_cpu" "family" self)
    (**  *)
    and get_model ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "host_cpu" "model" self)
    (**  *)
    and get_stepping ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_cpu" "stepping" self)
    (**  *)
    and get_flags ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_cpu" "flags" self)
    (**  *)
    and get_features ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "host_cpu" "features" self)
    (**  *)
    and get_utilisation ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "host_cpu" "utilisation" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_host_cpu self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "host_cpu" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "uuid" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "host" value
    (**  *)
    and set_number ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "number" value
    (**  *)
    and set_vendor ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "vendor" value
    (**  *)
    and set_speed ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "speed" value
    (**  *)
    and set_modelname ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "modelname" value
    (**  *)
    and set_family ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "family" value
    (**  *)
    and set_model ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "model" value
    (**  *)
    and set_stepping ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "stepping" value
    (**  *)
    and set_flags ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "flags" value
    (**  *)
    and set_features ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "features" value
    (**  *)
    and set_utilisation ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "utilisation" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_host_cpu self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "host_cpu" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_host_cpu self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "host_cpu" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_host_cpu self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "host_cpu" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.host_cpu_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.host_cpu_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.host_cpu_number = String_to_DM.int64(List.assoc "number" __regular_fields);
        API.host_cpu_vendor = String_to_DM.string(List.assoc "vendor" __regular_fields);
        API.host_cpu_speed = String_to_DM.int64(List.assoc "speed" __regular_fields);
        API.host_cpu_modelname = String_to_DM.string(List.assoc "modelname" __regular_fields);
        API.host_cpu_family = String_to_DM.int64(List.assoc "family" __regular_fields);
        API.host_cpu_model = String_to_DM.int64(List.assoc "model" __regular_fields);
        API.host_cpu_stepping = String_to_DM.string(List.assoc "stepping" __regular_fields);
        API.host_cpu_flags = String_to_DM.string(List.assoc "flags" __regular_fields);
        API.host_cpu_features = String_to_DM.string(List.assoc "features" __regular_fields);
        API.host_cpu_utilisation = String_to_DM.float(List.assoc "utilisation" __regular_fields);
        API.host_cpu_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        host_cpu_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        host_cpu_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        host_cpu_number = String_to_DM.int64(List.assoc "number" __regular_fields);
        host_cpu_vendor = String_to_DM.string(List.assoc "vendor" __regular_fields);
        host_cpu_speed = String_to_DM.int64(List.assoc "speed" __regular_fields);
        host_cpu_modelname = String_to_DM.string(List.assoc "modelname" __regular_fields);
        host_cpu_family = String_to_DM.int64(List.assoc "family" __regular_fields);
        host_cpu_model = String_to_DM.int64(List.assoc "model" __regular_fields);
        host_cpu_stepping = String_to_DM.string(List.assoc "stepping" __regular_fields);
        host_cpu_flags = String_to_DM.string(List.assoc "flags" __regular_fields);
        host_cpu_features = String_to_DM.string(List.assoc "features" __regular_fields);
        host_cpu_utilisation = String_to_DM.float(List.assoc "utilisation" __regular_fields);
        host_cpu_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "host_cpu" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_cpu" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "host_cpu" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Host_cpu_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "host_cpu"
      (fun ~__context ~self -> (fun () -> API.rpc_of_host_cpu_t (Host_cpu.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Network = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "network" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "network" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_network(DB.read_refs __t "network")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_network (DB.db_get_by_uuid __t "network" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~allowed_operations ~current_operations ~mTU ~other_config ~bridge ~managed ~blobs ~tags ~default_locking_mode ~assigned_ips ~purpose =
      let ref = DM_to_String.ref_network ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let allowed_operations = DM_to_String.network_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_network_operations_map current_operations in
      let mTU = DM_to_String.int64 mTU in
      let other_config = DM_to_String.string_to_string_map other_config in
      let bridge = DM_to_String.string bridge in
      let managed = DM_to_String.bool managed in
      let blobs = DM_to_String.string_to_ref_blob_map blobs in
      let tags = DM_to_String.string_set tags in
      let default_locking_mode = DM_to_String.network_default_locking_mode default_locking_mode in
      let assigned_ips = DM_to_String.ref_VIF_to_string_map assigned_ips in
      let purpose = DM_to_String.network_purpose_set purpose in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "network" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("MTU", mTU); ("other_config", other_config); ("bridge", bridge); ("managed", managed); ("blobs", blobs); ("tags", tags); ("default_locking_mode", default_locking_mode); ("assigned_ips", assigned_ips); ("purpose", purpose) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "network" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_network (DB.db_get_by_name_label __t "network" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "network" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "network" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "network" "name__description" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.network_operations_set (DB.read_field __t "network" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_network_operations_map (DB.read_field __t "network" "current_operations" self)
    (**  *)
    and get_VIFs ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VIF_set (DB.read_field __t "network" "VIFs" self)
    (**  *)
    and get_PIFs ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF_set (DB.read_field __t "network" "PIFs" self)
    (**  *)
    and get_MTU ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "network" "MTU" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "network" "other_config" self)
    (**  *)
    and get_bridge ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "network" "bridge" self)
    (**  *)
    and get_managed ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "network" "managed" self)
    (**  *)
    and get_blobs ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_ref_blob_map (DB.read_field __t "network" "blobs" self)
    (**  *)
    and get_tags ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "network" "tags" self)
    (**  *)
    and get_default_locking_mode ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.network_default_locking_mode (DB.read_field __t "network" "default_locking_mode" self)
    (**  *)
    and get_assigned_ips ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VIF_to_string_map (DB.read_field __t "network" "assigned_ips" self)
    (**  *)
    and get_purpose ~__context ~self =
      let self = DM_to_String.ref_network self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.network_purpose_set (DB.read_field __t "network" "purpose" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "name__description" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.network_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.network_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "network" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.network_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "network" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string_to_network_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.string key in
      let value = DM_to_String.network_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "network" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "network" "current_operations" self RemoveMap
    (**  *)
    and set_MTU ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "MTU" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "network" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "network" "other_config" self RemoveMap
    (**  *)
    and set_bridge ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "bridge" value
    (**  *)
    and set_managed ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "managed" value
    (**  *)
    and set_blobs ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string_to_ref_blob_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "blobs" value
    (**  *)
    and add_to_blobs ~__context ~self ~key ~value =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.string key in
      let value = DM_to_String.ref_blob value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "network" "blobs" self AddMapLegacy
    (**  *)
    and remove_from_blobs ~__context ~self ~key =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "network" "blobs" self RemoveMap
    (**  *)
    and set_tags ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "tags" value
    (**  *)
    and add_tags ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "network" "tags" self AddSet
    (**  *)
    and remove_tags ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "network" "tags" self RemoveSet
    (**  *)
    and set_default_locking_mode ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.network_default_locking_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "default_locking_mode" value
    (**  *)
    and set_assigned_ips ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.ref_VIF_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "assigned_ips" value
    (**  *)
    and add_to_assigned_ips ~__context ~self ~key ~value =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.ref_VIF key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "network" "assigned_ips" self AddMapLegacy
    (**  *)
    and remove_from_assigned_ips ~__context ~self ~key =
      let self = DM_to_String.ref_network self in
      let key = DM_to_String.ref_VIF key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "network" "assigned_ips" self RemoveMap
    (**  *)
    and set_purpose ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.network_purpose_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network" self "purpose" value
    (**  *)
    and add_purpose ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.network_purpose value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "network" "purpose" self AddSet
    (**  *)
    and remove_purpose ~__context ~self ~value =
      let self = DM_to_String.ref_network self in
      let value = DM_to_String.network_purpose value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "network" "purpose" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.network_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.network_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.network_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.network_allowed_operations = String_to_DM.network_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.network_current_operations = String_to_DM.string_to_network_operations_map(List.assoc "current_operations" __regular_fields);
        API.network_VIFs = List.map String_to_DM.ref_VIF (List.assoc "VIFs" __set_refs);
        API.network_PIFs = List.map String_to_DM.ref_PIF (List.assoc "PIFs" __set_refs);
        API.network_MTU = String_to_DM.int64(List.assoc "MTU" __regular_fields);
        API.network_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.network_bridge = String_to_DM.string(List.assoc "bridge" __regular_fields);
        API.network_managed = String_to_DM.bool(List.assoc "managed" __regular_fields);
        API.network_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        API.network_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        API.network_default_locking_mode = String_to_DM.network_default_locking_mode(List.assoc "default_locking_mode" __regular_fields);
        API.network_assigned_ips = String_to_DM.ref_VIF_to_string_map(List.assoc "assigned_ips" __regular_fields);
        API.network_purpose = String_to_DM.network_purpose_set(List.assoc "purpose" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        network_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        network_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        network_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        network_allowed_operations = String_to_DM.network_operations_set(List.assoc "allowed_operations" __regular_fields);
        network_current_operations = String_to_DM.string_to_network_operations_map(List.assoc "current_operations" __regular_fields);
        network_VIFs = List.map String_to_DM.ref_VIF (List.assoc "VIFs" __set_refs);
        network_PIFs = List.map String_to_DM.ref_PIF (List.assoc "PIFs" __set_refs);
        network_MTU = String_to_DM.int64(List.assoc "MTU" __regular_fields);
        network_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        network_bridge = String_to_DM.string(List.assoc "bridge" __regular_fields);
        network_managed = String_to_DM.bool(List.assoc "managed" __regular_fields);
        network_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        network_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        network_default_locking_mode = String_to_DM.network_default_locking_mode(List.assoc "default_locking_mode" __regular_fields);
        network_assigned_ips = String_to_DM.ref_VIF_to_string_map(List.assoc "assigned_ips" __regular_fields);
        network_purpose = String_to_DM.network_purpose_set(List.assoc "purpose" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "network" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "network" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "network" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Network_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "network"
      (fun ~__context ~self -> (fun () -> API.rpc_of_network_t (Network.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VIF = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VIF" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VIF" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VIF(DB.read_refs __t "VIF")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VIF (DB.db_get_by_uuid __t "VIF" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~allowed_operations ~current_operations ~device ~network ~vM ~mAC ~mTU ~reserved ~other_config ~currently_attached ~status_code ~status_detail ~runtime_properties ~qos_algorithm_type ~qos_algorithm_params ~qos_supported_algorithms ~metrics ~mAC_autogenerated ~locking_mode ~ipv4_allowed ~ipv6_allowed ~ipv4_configuration_mode ~ipv4_addresses ~ipv4_gateway ~ipv6_configuration_mode ~ipv6_addresses ~ipv6_gateway ~reserved_pci =
      let ref = DM_to_String.ref_VIF ref in
      let uuid = DM_to_String.string uuid in
      let allowed_operations = DM_to_String.vif_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_vif_operations_map current_operations in
      let device = DM_to_String.string device in
      let network = DM_to_String.ref_network network in
      let vM = DM_to_String.ref_VM vM in
      let mAC = DM_to_String.string mAC in
      let mTU = DM_to_String.int64 mTU in
      let reserved = DM_to_String.bool reserved in
      let other_config = DM_to_String.string_to_string_map other_config in
      let currently_attached = DM_to_String.bool currently_attached in
      let status_code = DM_to_String.int64 status_code in
      let status_detail = DM_to_String.string status_detail in
      let runtime_properties = DM_to_String.string_to_string_map runtime_properties in
      let qos_algorithm_type = DM_to_String.string qos_algorithm_type in
      let qos_algorithm_params = DM_to_String.string_to_string_map qos_algorithm_params in
      let qos_supported_algorithms = DM_to_String.string_set qos_supported_algorithms in
      let metrics = DM_to_String.ref_VIF_metrics metrics in
      let mAC_autogenerated = DM_to_String.bool mAC_autogenerated in
      let locking_mode = DM_to_String.vif_locking_mode locking_mode in
      let ipv4_allowed = DM_to_String.string_set ipv4_allowed in
      let ipv6_allowed = DM_to_String.string_set ipv6_allowed in
      let ipv4_configuration_mode = DM_to_String.vif_ipv4_configuration_mode ipv4_configuration_mode in
      let ipv4_addresses = DM_to_String.string_set ipv4_addresses in
      let ipv4_gateway = DM_to_String.string ipv4_gateway in
      let ipv6_configuration_mode = DM_to_String.vif_ipv6_configuration_mode ipv6_configuration_mode in
      let ipv6_addresses = DM_to_String.string_set ipv6_addresses in
      let ipv6_gateway = DM_to_String.string ipv6_gateway in
      let reserved_pci = DM_to_String.ref_PCI reserved_pci in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VIF" [ ("uuid", uuid); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("device", device); ("network", network); ("VM", vM); ("MAC", mAC); ("MTU", mTU); ("reserved", reserved); ("other_config", other_config); ("currently_attached", currently_attached); ("status_code", status_code); ("status_detail", status_detail); ("runtime_properties", runtime_properties); ("qos__algorithm_type", qos_algorithm_type); ("qos__algorithm_params", qos_algorithm_params); ("qos__supported_algorithms", qos_supported_algorithms); ("metrics", metrics); ("MAC_autogenerated", mAC_autogenerated); ("locking_mode", locking_mode); ("ipv4_allowed", ipv4_allowed); ("ipv6_allowed", ipv6_allowed); ("ipv4_configuration_mode", ipv4_configuration_mode); ("ipv4_addresses", ipv4_addresses); ("ipv4_gateway", ipv4_gateway); ("ipv6_configuration_mode", ipv6_configuration_mode); ("ipv6_addresses", ipv6_addresses); ("ipv6_gateway", ipv6_gateway); ("reserved_pci", reserved_pci) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VIF" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF" "uuid" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vif_operations_set (DB.read_field __t "VIF" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_vif_operations_map (DB.read_field __t "VIF" "current_operations" self)
    (**  *)
    and get_device ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF" "device" self)
    (**  *)
    and get_network ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_network (DB.read_field __t "VIF" "network" self)
    (**  *)
    and get_VM ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VIF" "VM" self)
    (**  *)
    and get_MAC ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF" "MAC" self)
    (**  *)
    and get_MTU ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VIF" "MTU" self)
    (**  *)
    and get_reserved ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VIF" "reserved" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VIF" "other_config" self)
    (**  *)
    and get_currently_attached ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VIF" "currently_attached" self)
    (**  *)
    and get_status_code ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VIF" "status_code" self)
    (**  *)
    and get_status_detail ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF" "status_detail" self)
    (**  *)
    and get_runtime_properties ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VIF" "runtime_properties" self)
    (**  *)
    and get_qos_algorithm_type ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF" "qos__algorithm_type" self)
    (**  *)
    and get_qos_algorithm_params ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VIF" "qos__algorithm_params" self)
    (**  *)
    and get_qos_supported_algorithms ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VIF" "qos__supported_algorithms" self)
    (**  *)
    and get_metrics ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VIF_metrics (DB.read_field __t "VIF" "metrics" self)
    (**  *)
    and get_MAC_autogenerated ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VIF" "MAC_autogenerated" self)
    (**  *)
    and get_locking_mode ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vif_locking_mode (DB.read_field __t "VIF" "locking_mode" self)
    (**  *)
    and get_ipv4_allowed ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VIF" "ipv4_allowed" self)
    (**  *)
    and get_ipv6_allowed ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VIF" "ipv6_allowed" self)
    (**  *)
    and get_ipv4_configuration_mode ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vif_ipv4_configuration_mode (DB.read_field __t "VIF" "ipv4_configuration_mode" self)
    (**  *)
    and get_ipv4_addresses ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VIF" "ipv4_addresses" self)
    (**  *)
    and get_ipv4_gateway ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF" "ipv4_gateway" self)
    (**  *)
    and get_ipv6_configuration_mode ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vif_ipv6_configuration_mode (DB.read_field __t "VIF" "ipv6_configuration_mode" self)
    (**  *)
    and get_ipv6_addresses ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VIF" "ipv6_addresses" self)
    (**  *)
    and get_ipv6_gateway ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF" "ipv6_gateway" self)
    (**  *)
    and get_reserved_pci ~__context ~self =
      let self = DM_to_String.ref_VIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI (DB.read_field __t "VIF" "reserved_pci" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "uuid" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.vif_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.vif_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.vif_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_to_vif_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let value = DM_to_String.vif_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VIF" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VIF" "current_operations" self RemoveMap
    (**  *)
    and set_device ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "device" value
    (**  *)
    and set_network ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.ref_network value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "network" value
    (**  *)
    and set_VM ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "VM" value
    (**  *)
    and set_MAC ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "MAC" value
    (**  *)
    and set_MTU ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "MTU" value
    (**  *)
    and set_reserved ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "reserved" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VIF" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VIF" "other_config" self RemoveMap
    (**  *)
    and set_currently_attached ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "currently_attached" value
    (**  *)
    and set_status_code ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "status_code" value
    (**  *)
    and set_status_detail ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "status_detail" value
    (**  *)
    and set_runtime_properties ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "runtime_properties" value
    (**  *)
    and add_to_runtime_properties ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VIF" "runtime_properties" self AddMapLegacy
    (**  *)
    and remove_from_runtime_properties ~__context ~self ~key =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VIF" "runtime_properties" self RemoveMap
    (**  *)
    and set_qos_algorithm_type ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "qos__algorithm_type" value
    (**  *)
    and set_qos_algorithm_params ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "qos__algorithm_params" value
    (**  *)
    and add_to_qos_algorithm_params ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VIF" "qos__algorithm_params" self AddMapLegacy
    (**  *)
    and remove_from_qos_algorithm_params ~__context ~self ~key =
      let self = DM_to_String.ref_VIF self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VIF" "qos__algorithm_params" self RemoveMap
    (**  *)
    and set_qos_supported_algorithms ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "qos__supported_algorithms" value
    (**  *)
    and add_qos_supported_algorithms ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "qos__supported_algorithms" self AddSet
    (**  *)
    and remove_qos_supported_algorithms ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "qos__supported_algorithms" self RemoveSet
    (**  *)
    and set_metrics ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.ref_VIF_metrics value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "metrics" value
    (**  *)
    and set_MAC_autogenerated ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "MAC_autogenerated" value
    (**  *)
    and set_locking_mode ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.vif_locking_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "locking_mode" value
    (**  *)
    and set_ipv4_allowed ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv4_allowed" value
    (**  *)
    and add_ipv4_allowed ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv4_allowed" self AddSet
    (**  *)
    and remove_ipv4_allowed ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv4_allowed" self RemoveSet
    (**  *)
    and set_ipv6_allowed ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv6_allowed" value
    (**  *)
    and add_ipv6_allowed ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv6_allowed" self AddSet
    (**  *)
    and remove_ipv6_allowed ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv6_allowed" self RemoveSet
    (**  *)
    and set_ipv4_configuration_mode ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.vif_ipv4_configuration_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv4_configuration_mode" value
    (**  *)
    and set_ipv4_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv4_addresses" value
    (**  *)
    and add_ipv4_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv4_addresses" self AddSet
    (**  *)
    and remove_ipv4_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv4_addresses" self RemoveSet
    (**  *)
    and set_ipv4_gateway ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv4_gateway" value
    (**  *)
    and set_ipv6_configuration_mode ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.vif_ipv6_configuration_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv6_configuration_mode" value
    (**  *)
    and set_ipv6_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv6_addresses" value
    (**  *)
    and add_ipv6_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv6_addresses" self AddSet
    (**  *)
    and remove_ipv6_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VIF" "ipv6_addresses" self RemoveSet
    (**  *)
    and set_ipv6_gateway ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "ipv6_gateway" value
    (**  *)
    and set_reserved_pci ~__context ~self ~value =
      let self = DM_to_String.ref_VIF self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF" self "reserved_pci" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vIF_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vIF_allowed_operations = String_to_DM.vif_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.vIF_current_operations = String_to_DM.string_to_vif_operations_map(List.assoc "current_operations" __regular_fields);
        API.vIF_device = String_to_DM.string(List.assoc "device" __regular_fields);
        API.vIF_network = String_to_DM.ref_network(List.assoc "network" __regular_fields);
        API.vIF_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        API.vIF_MAC = String_to_DM.string(List.assoc "MAC" __regular_fields);
        API.vIF_MTU = String_to_DM.int64(List.assoc "MTU" __regular_fields);
        API.vIF_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vIF_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        API.vIF_status_code = String_to_DM.int64(List.assoc "status_code" __regular_fields);
        API.vIF_status_detail = String_to_DM.string(List.assoc "status_detail" __regular_fields);
        API.vIF_runtime_properties = String_to_DM.string_to_string_map(List.assoc "runtime_properties" __regular_fields);
        API.vIF_qos_algorithm_type = String_to_DM.string(List.assoc "qos__algorithm_type" __regular_fields);
        API.vIF_qos_algorithm_params = String_to_DM.string_to_string_map(List.assoc "qos__algorithm_params" __regular_fields);
        API.vIF_qos_supported_algorithms = String_to_DM.string_set(List.assoc "qos__supported_algorithms" __regular_fields);
        API.vIF_metrics = String_to_DM.ref_VIF_metrics(List.assoc "metrics" __regular_fields);
        API.vIF_MAC_autogenerated = String_to_DM.bool(List.assoc "MAC_autogenerated" __regular_fields);
        API.vIF_locking_mode = String_to_DM.vif_locking_mode(List.assoc "locking_mode" __regular_fields);
        API.vIF_ipv4_allowed = String_to_DM.string_set(List.assoc "ipv4_allowed" __regular_fields);
        API.vIF_ipv6_allowed = String_to_DM.string_set(List.assoc "ipv6_allowed" __regular_fields);
        API.vIF_ipv4_configuration_mode = String_to_DM.vif_ipv4_configuration_mode(List.assoc "ipv4_configuration_mode" __regular_fields);
        API.vIF_ipv4_addresses = String_to_DM.string_set(List.assoc "ipv4_addresses" __regular_fields);
        API.vIF_ipv4_gateway = String_to_DM.string(List.assoc "ipv4_gateway" __regular_fields);
        API.vIF_ipv6_configuration_mode = String_to_DM.vif_ipv6_configuration_mode(List.assoc "ipv6_configuration_mode" __regular_fields);
        API.vIF_ipv6_addresses = String_to_DM.string_set(List.assoc "ipv6_addresses" __regular_fields);
        API.vIF_ipv6_gateway = String_to_DM.string(List.assoc "ipv6_gateway" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vIF_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vIF_allowed_operations = String_to_DM.vif_operations_set(List.assoc "allowed_operations" __regular_fields);
        vIF_current_operations = String_to_DM.string_to_vif_operations_map(List.assoc "current_operations" __regular_fields);
        vIF_device = String_to_DM.string(List.assoc "device" __regular_fields);
        vIF_network = String_to_DM.ref_network(List.assoc "network" __regular_fields);
        vIF_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        vIF_MAC = String_to_DM.string(List.assoc "MAC" __regular_fields);
        vIF_MTU = String_to_DM.int64(List.assoc "MTU" __regular_fields);
        vIF_reserved = String_to_DM.bool(List.assoc "reserved" __regular_fields);
        vIF_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vIF_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        vIF_status_code = String_to_DM.int64(List.assoc "status_code" __regular_fields);
        vIF_status_detail = String_to_DM.string(List.assoc "status_detail" __regular_fields);
        vIF_runtime_properties = String_to_DM.string_to_string_map(List.assoc "runtime_properties" __regular_fields);
        vIF_qos_algorithm_type = String_to_DM.string(List.assoc "qos__algorithm_type" __regular_fields);
        vIF_qos_algorithm_params = String_to_DM.string_to_string_map(List.assoc "qos__algorithm_params" __regular_fields);
        vIF_qos_supported_algorithms = String_to_DM.string_set(List.assoc "qos__supported_algorithms" __regular_fields);
        vIF_metrics = String_to_DM.ref_VIF_metrics(List.assoc "metrics" __regular_fields);
        vIF_MAC_autogenerated = String_to_DM.bool(List.assoc "MAC_autogenerated" __regular_fields);
        vIF_locking_mode = String_to_DM.vif_locking_mode(List.assoc "locking_mode" __regular_fields);
        vIF_ipv4_allowed = String_to_DM.string_set(List.assoc "ipv4_allowed" __regular_fields);
        vIF_ipv6_allowed = String_to_DM.string_set(List.assoc "ipv6_allowed" __regular_fields);
        vIF_ipv4_configuration_mode = String_to_DM.vif_ipv4_configuration_mode(List.assoc "ipv4_configuration_mode" __regular_fields);
        vIF_ipv4_addresses = String_to_DM.string_set(List.assoc "ipv4_addresses" __regular_fields);
        vIF_ipv4_gateway = String_to_DM.string(List.assoc "ipv4_gateway" __regular_fields);
        vIF_ipv6_configuration_mode = String_to_DM.vif_ipv6_configuration_mode(List.assoc "ipv6_configuration_mode" __regular_fields);
        vIF_ipv6_addresses = String_to_DM.string_set(List.assoc "ipv6_addresses" __regular_fields);
        vIF_ipv6_gateway = String_to_DM.string(List.assoc "ipv6_gateway" __regular_fields);
        vIF_reserved_pci = String_to_DM.ref_PCI(List.assoc "reserved_pci" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VIF" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VIF" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VIF" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VIF_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VIF"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vIF_t (VIF.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VIF_metrics = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VIF_metrics" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VIF_metrics" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VIF_metrics(DB.read_refs __t "VIF_metrics")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VIF_metrics (DB.db_get_by_uuid __t "VIF_metrics" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~io_read_kbs ~io_write_kbs ~last_updated ~other_config =
      let ref = DM_to_String.ref_VIF_metrics ref in
      let uuid = DM_to_String.string uuid in
      let io_read_kbs = DM_to_String.float io_read_kbs in
      let io_write_kbs = DM_to_String.float io_write_kbs in
      let last_updated = DM_to_String.datetime last_updated in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VIF_metrics" [ ("uuid", uuid); ("io__read_kbs", io_read_kbs); ("io__write_kbs", io_write_kbs); ("last_updated", last_updated); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VIF_metrics" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VIF_metrics" "uuid" self)
    (**  *)
    and get_io_read_kbs ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "VIF_metrics" "io__read_kbs" self)
    (**  *)
    and get_io_write_kbs ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "VIF_metrics" "io__write_kbs" self)
    (**  *)
    and get_last_updated ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VIF_metrics" "last_updated" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VIF_metrics" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VIF_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF_metrics" self "uuid" value
    (**  *)
    and set_io_read_kbs ~__context ~self ~value =
      let self = DM_to_String.ref_VIF_metrics self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF_metrics" self "io__read_kbs" value
    (**  *)
    and set_io_write_kbs ~__context ~self ~value =
      let self = DM_to_String.ref_VIF_metrics self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF_metrics" self "io__write_kbs" value
    (**  *)
    and set_last_updated ~__context ~self ~value =
      let self = DM_to_String.ref_VIF_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF_metrics" self "last_updated" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VIF_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VIF_metrics" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VIF_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VIF_metrics" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VIF_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VIF_metrics" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vIF_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vIF_metrics_io_read_kbs = String_to_DM.float(List.assoc "io__read_kbs" __regular_fields);
        API.vIF_metrics_io_write_kbs = String_to_DM.float(List.assoc "io__write_kbs" __regular_fields);
        API.vIF_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        API.vIF_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vIF_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vIF_metrics_io_read_kbs = String_to_DM.float(List.assoc "io__read_kbs" __regular_fields);
        vIF_metrics_io_write_kbs = String_to_DM.float(List.assoc "io__write_kbs" __regular_fields);
        vIF_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        vIF_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VIF_metrics" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VIF_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VIF_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VIF_metrics_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VIF_metrics"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vIF_metrics_t (VIF_metrics.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PIF = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PIF" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PIF" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PIF(DB.read_refs __t "PIF")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.db_get_by_uuid __t "PIF" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~device ~network ~host ~mAC ~mTU ~vLAN ~device_name ~metrics ~physical ~currently_attached ~ip_configuration_mode ~iP ~netmask ~gateway ~dNS ~bond_slave_of ~vLAN_master_of ~management ~other_config ~disallow_unplug ~ipv6_configuration_mode ~iPv6 ~ipv6_gateway ~primary_address_type ~managed ~properties ~capabilities ~igmp_snooping_status ~pCI =
      let ref = DM_to_String.ref_PIF ref in
      let uuid = DM_to_String.string uuid in
      let device = DM_to_String.string device in
      let network = DM_to_String.ref_network network in
      let host = DM_to_String.ref_host host in
      let mAC = DM_to_String.string mAC in
      let mTU = DM_to_String.int64 mTU in
      let vLAN = DM_to_String.int64 vLAN in
      let device_name = DM_to_String.string device_name in
      let metrics = DM_to_String.ref_PIF_metrics metrics in
      let physical = DM_to_String.bool physical in
      let currently_attached = DM_to_String.bool currently_attached in
      let ip_configuration_mode = DM_to_String.ip_configuration_mode ip_configuration_mode in
      let iP = DM_to_String.string iP in
      let netmask = DM_to_String.string netmask in
      let gateway = DM_to_String.string gateway in
      let dNS = DM_to_String.string dNS in
      let bond_slave_of = DM_to_String.ref_Bond bond_slave_of in
      let vLAN_master_of = DM_to_String.ref_VLAN vLAN_master_of in
      let management = DM_to_String.bool management in
      let other_config = DM_to_String.string_to_string_map other_config in
      let disallow_unplug = DM_to_String.bool disallow_unplug in
      let ipv6_configuration_mode = DM_to_String.ipv6_configuration_mode ipv6_configuration_mode in
      let iPv6 = DM_to_String.string_set iPv6 in
      let ipv6_gateway = DM_to_String.string ipv6_gateway in
      let primary_address_type = DM_to_String.primary_address_type primary_address_type in
      let managed = DM_to_String.bool managed in
      let properties = DM_to_String.string_to_string_map properties in
      let capabilities = DM_to_String.string_set capabilities in
      let igmp_snooping_status = DM_to_String.pif_igmp_status igmp_snooping_status in
      let pCI = DM_to_String.ref_PCI pCI in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PIF" [ ("uuid", uuid); ("device", device); ("network", network); ("host", host); ("MAC", mAC); ("MTU", mTU); ("VLAN", vLAN); ("device_name", device_name); ("metrics", metrics); ("physical", physical); ("currently_attached", currently_attached); ("ip_configuration_mode", ip_configuration_mode); ("IP", iP); ("netmask", netmask); ("gateway", gateway); ("DNS", dNS); ("bond_slave_of", bond_slave_of); ("VLAN_master_of", vLAN_master_of); ("management", management); ("other_config", other_config); ("disallow_unplug", disallow_unplug); ("ipv6_configuration_mode", ipv6_configuration_mode); ("IPv6", iPv6); ("ipv6_gateway", ipv6_gateway); ("primary_address_type", primary_address_type); ("managed", managed); ("properties", properties); ("capabilities", capabilities); ("igmp_snooping_status", igmp_snooping_status); ("PCI", pCI) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PIF" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "uuid" self)
    (**  *)
    and get_device ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "device" self)
    (**  *)
    and get_network ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_network (DB.read_field __t "PIF" "network" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "PIF" "host" self)
    (**  *)
    and get_MAC ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "MAC" self)
    (**  *)
    and get_MTU ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PIF" "MTU" self)
    (**  *)
    and get_VLAN ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PIF" "VLAN" self)
    (**  *)
    and get_device_name ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "device_name" self)
    (**  *)
    and get_metrics ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF_metrics (DB.read_field __t "PIF" "metrics" self)
    (**  *)
    and get_physical ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PIF" "physical" self)
    (**  *)
    and get_currently_attached ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PIF" "currently_attached" self)
    (**  *)
    and get_ip_configuration_mode ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ip_configuration_mode (DB.read_field __t "PIF" "ip_configuration_mode" self)
    (**  *)
    and get_IP ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "IP" self)
    (**  *)
    and get_netmask ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "netmask" self)
    (**  *)
    and get_gateway ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "gateway" self)
    (**  *)
    and get_DNS ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "DNS" self)
    (**  *)
    and get_bond_slave_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Bond (DB.read_field __t "PIF" "bond_slave_of" self)
    (**  *)
    and get_bond_master_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Bond_set (DB.read_field __t "PIF" "bond_master_of" self)
    (**  *)
    and get_VLAN_master_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VLAN (DB.read_field __t "PIF" "VLAN_master_of" self)
    (**  *)
    and get_VLAN_slave_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VLAN_set (DB.read_field __t "PIF" "VLAN_slave_of" self)
    (**  *)
    and get_management ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PIF" "management" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PIF" "other_config" self)
    (**  *)
    and get_disallow_unplug ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PIF" "disallow_unplug" self)
    (**  *)
    and get_tunnel_access_PIF_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_tunnel_set (DB.read_field __t "PIF" "tunnel_access_PIF_of" self)
    (**  *)
    and get_tunnel_transport_PIF_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_tunnel_set (DB.read_field __t "PIF" "tunnel_transport_PIF_of" self)
    (**  *)
    and get_ipv6_configuration_mode ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ipv6_configuration_mode (DB.read_field __t "PIF" "ipv6_configuration_mode" self)
    (**  *)
    and get_IPv6 ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "PIF" "IPv6" self)
    (**  *)
    and get_ipv6_gateway ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF" "ipv6_gateway" self)
    (**  *)
    and get_primary_address_type ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.primary_address_type (DB.read_field __t "PIF" "primary_address_type" self)
    (**  *)
    and get_managed ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PIF" "managed" self)
    (**  *)
    and get_properties ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PIF" "properties" self)
    (**  *)
    and get_capabilities ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "PIF" "capabilities" self)
    (**  *)
    and get_igmp_snooping_status ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.pif_igmp_status (DB.read_field __t "PIF" "igmp_snooping_status" self)
    (**  *)
    and get_sriov_physical_PIF_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_network_sriov_set (DB.read_field __t "PIF" "sriov_physical_PIF_of" self)
    (**  *)
    and get_sriov_logical_PIF_of ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_network_sriov_set (DB.read_field __t "PIF" "sriov_logical_PIF_of" self)
    (**  *)
    and get_PCI ~__context ~self =
      let self = DM_to_String.ref_PIF self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI (DB.read_field __t "PIF" "PCI" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "uuid" value
    (**  *)
    and set_device ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "device" value
    (**  *)
    and set_network ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ref_network value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "network" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "host" value
    (**  *)
    and set_MAC ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "MAC" value
    (**  *)
    and set_MTU ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "MTU" value
    (**  *)
    and set_VLAN ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "VLAN" value
    (**  *)
    and set_device_name ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "device_name" value
    (**  *)
    and set_metrics ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ref_PIF_metrics value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "metrics" value
    (**  *)
    and set_physical ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "physical" value
    (**  *)
    and set_currently_attached ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "currently_attached" value
    (**  *)
    and set_ip_configuration_mode ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ip_configuration_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "ip_configuration_mode" value
    (**  *)
    and set_IP ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "IP" value
    (**  *)
    and set_netmask ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "netmask" value
    (**  *)
    and set_gateway ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "gateway" value
    (**  *)
    and set_DNS ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "DNS" value
    (**  *)
    and set_bond_slave_of ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ref_Bond value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "bond_slave_of" value
    (**  *)
    and set_VLAN_master_of ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ref_VLAN value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "VLAN_master_of" value
    (**  *)
    and set_management ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "management" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PIF self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PIF" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_PIF self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PIF" "other_config" self RemoveMap
    (**  *)
    and set_disallow_unplug ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "disallow_unplug" value
    (**  *)
    and set_ipv6_configuration_mode ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ipv6_configuration_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "ipv6_configuration_mode" value
    (**  *)
    and set_IPv6 ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "IPv6" value
    (**  *)
    and add_IPv6 ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PIF" "IPv6" self AddSet
    (**  *)
    and remove_IPv6 ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PIF" "IPv6" self RemoveSet
    (**  *)
    and set_ipv6_gateway ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "ipv6_gateway" value
    (**  *)
    and set_primary_address_type ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.primary_address_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "primary_address_type" value
    (**  *)
    and set_managed ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "managed" value
    (**  *)
    and set_properties ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "properties" value
    (**  *)
    and add_to_properties ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PIF self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PIF" "properties" self AddMapLegacy
    (**  *)
    and remove_from_properties ~__context ~self ~key =
      let self = DM_to_String.ref_PIF self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PIF" "properties" self RemoveMap
    (**  *)
    and set_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "capabilities" value
    (**  *)
    and add_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PIF" "capabilities" self AddSet
    (**  *)
    and remove_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PIF" "capabilities" self RemoveSet
    (**  *)
    and set_igmp_snooping_status ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.pif_igmp_status value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "igmp_snooping_status" value
    (**  *)
    and set_PCI ~__context ~self ~value =
      let self = DM_to_String.ref_PIF self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF" self "PCI" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pIF_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pIF_device = String_to_DM.string(List.assoc "device" __regular_fields);
        API.pIF_network = String_to_DM.ref_network(List.assoc "network" __regular_fields);
        API.pIF_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.pIF_MAC = String_to_DM.string(List.assoc "MAC" __regular_fields);
        API.pIF_MTU = String_to_DM.int64(List.assoc "MTU" __regular_fields);
        API.pIF_VLAN = String_to_DM.int64(List.assoc "VLAN" __regular_fields);
        API.pIF_metrics = String_to_DM.ref_PIF_metrics(List.assoc "metrics" __regular_fields);
        API.pIF_physical = String_to_DM.bool(List.assoc "physical" __regular_fields);
        API.pIF_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        API.pIF_ip_configuration_mode = String_to_DM.ip_configuration_mode(List.assoc "ip_configuration_mode" __regular_fields);
        API.pIF_IP = String_to_DM.string(List.assoc "IP" __regular_fields);
        API.pIF_netmask = String_to_DM.string(List.assoc "netmask" __regular_fields);
        API.pIF_gateway = String_to_DM.string(List.assoc "gateway" __regular_fields);
        API.pIF_DNS = String_to_DM.string(List.assoc "DNS" __regular_fields);
        API.pIF_bond_slave_of = String_to_DM.ref_Bond(List.assoc "bond_slave_of" __regular_fields);
        API.pIF_bond_master_of = List.map String_to_DM.ref_Bond (List.assoc "bond_master_of" __set_refs);
        API.pIF_VLAN_master_of = String_to_DM.ref_VLAN(List.assoc "VLAN_master_of" __regular_fields);
        API.pIF_VLAN_slave_of = List.map String_to_DM.ref_VLAN (List.assoc "VLAN_slave_of" __set_refs);
        API.pIF_management = String_to_DM.bool(List.assoc "management" __regular_fields);
        API.pIF_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.pIF_disallow_unplug = String_to_DM.bool(List.assoc "disallow_unplug" __regular_fields);
        API.pIF_tunnel_access_PIF_of = List.map String_to_DM.ref_tunnel (List.assoc "tunnel_access_PIF_of" __set_refs);
        API.pIF_tunnel_transport_PIF_of = List.map String_to_DM.ref_tunnel (List.assoc "tunnel_transport_PIF_of" __set_refs);
        API.pIF_ipv6_configuration_mode = String_to_DM.ipv6_configuration_mode(List.assoc "ipv6_configuration_mode" __regular_fields);
        API.pIF_IPv6 = String_to_DM.string_set(List.assoc "IPv6" __regular_fields);
        API.pIF_ipv6_gateway = String_to_DM.string(List.assoc "ipv6_gateway" __regular_fields);
        API.pIF_primary_address_type = String_to_DM.primary_address_type(List.assoc "primary_address_type" __regular_fields);
        API.pIF_managed = String_to_DM.bool(List.assoc "managed" __regular_fields);
        API.pIF_properties = String_to_DM.string_to_string_map(List.assoc "properties" __regular_fields);
        API.pIF_capabilities = String_to_DM.string_set(List.assoc "capabilities" __regular_fields);
        API.pIF_igmp_snooping_status = String_to_DM.pif_igmp_status(List.assoc "igmp_snooping_status" __regular_fields);
        API.pIF_sriov_physical_PIF_of = List.map String_to_DM.ref_network_sriov (List.assoc "sriov_physical_PIF_of" __set_refs);
        API.pIF_sriov_logical_PIF_of = List.map String_to_DM.ref_network_sriov (List.assoc "sriov_logical_PIF_of" __set_refs);
        API.pIF_PCI = String_to_DM.ref_PCI(List.assoc "PCI" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pIF_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pIF_device = String_to_DM.string(List.assoc "device" __regular_fields);
        pIF_network = String_to_DM.ref_network(List.assoc "network" __regular_fields);
        pIF_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        pIF_MAC = String_to_DM.string(List.assoc "MAC" __regular_fields);
        pIF_MTU = String_to_DM.int64(List.assoc "MTU" __regular_fields);
        pIF_VLAN = String_to_DM.int64(List.assoc "VLAN" __regular_fields);
        pIF_device_name = String_to_DM.string(List.assoc "device_name" __regular_fields);
        pIF_metrics = String_to_DM.ref_PIF_metrics(List.assoc "metrics" __regular_fields);
        pIF_physical = String_to_DM.bool(List.assoc "physical" __regular_fields);
        pIF_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        pIF_ip_configuration_mode = String_to_DM.ip_configuration_mode(List.assoc "ip_configuration_mode" __regular_fields);
        pIF_IP = String_to_DM.string(List.assoc "IP" __regular_fields);
        pIF_netmask = String_to_DM.string(List.assoc "netmask" __regular_fields);
        pIF_gateway = String_to_DM.string(List.assoc "gateway" __regular_fields);
        pIF_DNS = String_to_DM.string(List.assoc "DNS" __regular_fields);
        pIF_bond_slave_of = String_to_DM.ref_Bond(List.assoc "bond_slave_of" __regular_fields);
        pIF_bond_master_of = List.map String_to_DM.ref_Bond (List.assoc "bond_master_of" __set_refs);
        pIF_VLAN_master_of = String_to_DM.ref_VLAN(List.assoc "VLAN_master_of" __regular_fields);
        pIF_VLAN_slave_of = List.map String_to_DM.ref_VLAN (List.assoc "VLAN_slave_of" __set_refs);
        pIF_management = String_to_DM.bool(List.assoc "management" __regular_fields);
        pIF_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        pIF_disallow_unplug = String_to_DM.bool(List.assoc "disallow_unplug" __regular_fields);
        pIF_tunnel_access_PIF_of = List.map String_to_DM.ref_tunnel (List.assoc "tunnel_access_PIF_of" __set_refs);
        pIF_tunnel_transport_PIF_of = List.map String_to_DM.ref_tunnel (List.assoc "tunnel_transport_PIF_of" __set_refs);
        pIF_ipv6_configuration_mode = String_to_DM.ipv6_configuration_mode(List.assoc "ipv6_configuration_mode" __regular_fields);
        pIF_IPv6 = String_to_DM.string_set(List.assoc "IPv6" __regular_fields);
        pIF_ipv6_gateway = String_to_DM.string(List.assoc "ipv6_gateway" __regular_fields);
        pIF_primary_address_type = String_to_DM.primary_address_type(List.assoc "primary_address_type" __regular_fields);
        pIF_managed = String_to_DM.bool(List.assoc "managed" __regular_fields);
        pIF_properties = String_to_DM.string_to_string_map(List.assoc "properties" __regular_fields);
        pIF_capabilities = String_to_DM.string_set(List.assoc "capabilities" __regular_fields);
        pIF_igmp_snooping_status = String_to_DM.pif_igmp_status(List.assoc "igmp_snooping_status" __regular_fields);
        pIF_sriov_physical_PIF_of = List.map String_to_DM.ref_network_sriov (List.assoc "sriov_physical_PIF_of" __set_refs);
        pIF_sriov_logical_PIF_of = List.map String_to_DM.ref_network_sriov (List.assoc "sriov_logical_PIF_of" __set_refs);
        pIF_PCI = String_to_DM.ref_PCI(List.assoc "PCI" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PIF" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PIF" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PIF" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PIF_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PIF"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pIF_t (PIF.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PIF_metrics = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PIF_metrics" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PIF_metrics" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PIF_metrics(DB.read_refs __t "PIF_metrics")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF_metrics (DB.db_get_by_uuid __t "PIF_metrics" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~io_read_kbs ~io_write_kbs ~carrier ~vendor_id ~vendor_name ~device_id ~device_name ~speed ~duplex ~pci_bus_path ~last_updated ~other_config =
      let ref = DM_to_String.ref_PIF_metrics ref in
      let uuid = DM_to_String.string uuid in
      let io_read_kbs = DM_to_String.float io_read_kbs in
      let io_write_kbs = DM_to_String.float io_write_kbs in
      let carrier = DM_to_String.bool carrier in
      let vendor_id = DM_to_String.string vendor_id in
      let vendor_name = DM_to_String.string vendor_name in
      let device_id = DM_to_String.string device_id in
      let device_name = DM_to_String.string device_name in
      let speed = DM_to_String.int64 speed in
      let duplex = DM_to_String.bool duplex in
      let pci_bus_path = DM_to_String.string pci_bus_path in
      let last_updated = DM_to_String.datetime last_updated in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PIF_metrics" [ ("uuid", uuid); ("io__read_kbs", io_read_kbs); ("io__write_kbs", io_write_kbs); ("carrier", carrier); ("vendor_id", vendor_id); ("vendor_name", vendor_name); ("device_id", device_id); ("device_name", device_name); ("speed", speed); ("duplex", duplex); ("pci_bus_path", pci_bus_path); ("last_updated", last_updated); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PIF_metrics" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF_metrics" "uuid" self)
    (**  *)
    and get_io_read_kbs ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "PIF_metrics" "io__read_kbs" self)
    (**  *)
    and get_io_write_kbs ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "PIF_metrics" "io__write_kbs" self)
    (**  *)
    and get_carrier ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PIF_metrics" "carrier" self)
    (**  *)
    and get_vendor_id ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF_metrics" "vendor_id" self)
    (**  *)
    and get_vendor_name ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF_metrics" "vendor_name" self)
    (**  *)
    and get_device_id ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF_metrics" "device_id" self)
    (**  *)
    and get_device_name ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF_metrics" "device_name" self)
    (**  *)
    and get_speed ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PIF_metrics" "speed" self)
    (**  *)
    and get_duplex ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PIF_metrics" "duplex" self)
    (**  *)
    and get_pci_bus_path ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PIF_metrics" "pci_bus_path" self)
    (**  *)
    and get_last_updated ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "PIF_metrics" "last_updated" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_PIF_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PIF_metrics" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "uuid" value
    (**  *)
    and set_io_read_kbs ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "io__read_kbs" value
    (**  *)
    and set_io_write_kbs ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "io__write_kbs" value
    (**  *)
    and set_carrier ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "carrier" value
    (**  *)
    and set_vendor_id ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "vendor_id" value
    (**  *)
    and set_vendor_name ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "vendor_name" value
    (**  *)
    and set_device_id ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "device_id" value
    (**  *)
    and set_device_name ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "device_name" value
    (**  *)
    and set_speed ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "speed" value
    (**  *)
    and set_duplex ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "duplex" value
    (**  *)
    and set_pci_bus_path ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "pci_bus_path" value
    (**  *)
    and set_last_updated ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "last_updated" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PIF_metrics" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PIF_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PIF_metrics" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_PIF_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PIF_metrics" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pIF_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pIF_metrics_io_read_kbs = String_to_DM.float(List.assoc "io__read_kbs" __regular_fields);
        API.pIF_metrics_io_write_kbs = String_to_DM.float(List.assoc "io__write_kbs" __regular_fields);
        API.pIF_metrics_carrier = String_to_DM.bool(List.assoc "carrier" __regular_fields);
        API.pIF_metrics_vendor_id = String_to_DM.string(List.assoc "vendor_id" __regular_fields);
        API.pIF_metrics_vendor_name = String_to_DM.string(List.assoc "vendor_name" __regular_fields);
        API.pIF_metrics_device_id = String_to_DM.string(List.assoc "device_id" __regular_fields);
        API.pIF_metrics_device_name = String_to_DM.string(List.assoc "device_name" __regular_fields);
        API.pIF_metrics_speed = String_to_DM.int64(List.assoc "speed" __regular_fields);
        API.pIF_metrics_duplex = String_to_DM.bool(List.assoc "duplex" __regular_fields);
        API.pIF_metrics_pci_bus_path = String_to_DM.string(List.assoc "pci_bus_path" __regular_fields);
        API.pIF_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        API.pIF_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pIF_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pIF_metrics_io_read_kbs = String_to_DM.float(List.assoc "io__read_kbs" __regular_fields);
        pIF_metrics_io_write_kbs = String_to_DM.float(List.assoc "io__write_kbs" __regular_fields);
        pIF_metrics_carrier = String_to_DM.bool(List.assoc "carrier" __regular_fields);
        pIF_metrics_vendor_id = String_to_DM.string(List.assoc "vendor_id" __regular_fields);
        pIF_metrics_vendor_name = String_to_DM.string(List.assoc "vendor_name" __regular_fields);
        pIF_metrics_device_id = String_to_DM.string(List.assoc "device_id" __regular_fields);
        pIF_metrics_device_name = String_to_DM.string(List.assoc "device_name" __regular_fields);
        pIF_metrics_speed = String_to_DM.int64(List.assoc "speed" __regular_fields);
        pIF_metrics_duplex = String_to_DM.bool(List.assoc "duplex" __regular_fields);
        pIF_metrics_pci_bus_path = String_to_DM.string(List.assoc "pci_bus_path" __regular_fields);
        pIF_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        pIF_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PIF_metrics" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PIF_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PIF_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PIF_metrics_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PIF_metrics"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pIF_metrics_t (PIF_metrics.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Bond = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Bond" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Bond" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_Bond(DB.read_refs __t "Bond")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Bond (DB.db_get_by_uuid __t "Bond" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~master ~other_config ~primary_slave ~mode ~properties ~links_up ~auto_update_mac =
      let ref = DM_to_String.ref_Bond ref in
      let uuid = DM_to_String.string uuid in
      let master = DM_to_String.ref_PIF master in
      let other_config = DM_to_String.string_to_string_map other_config in
      let primary_slave = DM_to_String.ref_PIF primary_slave in
      let mode = DM_to_String.bond_mode mode in
      let properties = DM_to_String.string_to_string_map properties in
      let links_up = DM_to_String.int64 links_up in
      let auto_update_mac = DM_to_String.bool auto_update_mac in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "Bond" [ ("uuid", uuid); ("master", master); ("other_config", other_config); ("primary_slave", primary_slave); ("mode", mode); ("properties", properties); ("links_up", links_up); ("auto_update_mac", auto_update_mac) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "Bond" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Bond" "uuid" self)
    (**  *)
    and get_master ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "Bond" "master" self)
    (**  *)
    and get_slaves ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF_set (DB.read_field __t "Bond" "slaves" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "Bond" "other_config" self)
    (**  *)
    and get_primary_slave ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "Bond" "primary_slave" self)
    (**  *)
    and get_mode ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bond_mode (DB.read_field __t "Bond" "mode" self)
    (**  *)
    and get_properties ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "Bond" "properties" self)
    (**  *)
    and get_links_up ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "Bond" "links_up" self)
    (**  *)
    and get_auto_update_mac ~__context ~self =
      let self = DM_to_String.ref_Bond self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "Bond" "auto_update_mac" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "uuid" value
    (**  *)
    and set_master ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "master" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_Bond self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "Bond" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_Bond self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "Bond" "other_config" self RemoveMap
    (**  *)
    and set_primary_slave ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "primary_slave" value
    (**  *)
    and set_mode ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.bond_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "mode" value
    (**  *)
    and set_properties ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "properties" value
    (**  *)
    and add_to_properties ~__context ~self ~key ~value =
      let self = DM_to_String.ref_Bond self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "Bond" "properties" self AddMapLegacy
    (**  *)
    and remove_from_properties ~__context ~self ~key =
      let self = DM_to_String.ref_Bond self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "Bond" "properties" self RemoveMap
    (**  *)
    and set_links_up ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "links_up" value
    (**  *)
    and set_auto_update_mac ~__context ~self ~value =
      let self = DM_to_String.ref_Bond self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Bond" self "auto_update_mac" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.bond_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.bond_master = String_to_DM.ref_PIF(List.assoc "master" __regular_fields);
        API.bond_slaves = List.map String_to_DM.ref_PIF (List.assoc "slaves" __set_refs);
        API.bond_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.bond_primary_slave = String_to_DM.ref_PIF(List.assoc "primary_slave" __regular_fields);
        API.bond_mode = String_to_DM.bond_mode(List.assoc "mode" __regular_fields);
        API.bond_properties = String_to_DM.string_to_string_map(List.assoc "properties" __regular_fields);
        API.bond_links_up = String_to_DM.int64(List.assoc "links_up" __regular_fields);
        API.bond_auto_update_mac = String_to_DM.bool(List.assoc "auto_update_mac" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        bond_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        bond_master = String_to_DM.ref_PIF(List.assoc "master" __regular_fields);
        bond_slaves = List.map String_to_DM.ref_PIF (List.assoc "slaves" __set_refs);
        bond_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        bond_primary_slave = String_to_DM.ref_PIF(List.assoc "primary_slave" __regular_fields);
        bond_mode = String_to_DM.bond_mode(List.assoc "mode" __regular_fields);
        bond_properties = String_to_DM.string_to_string_map(List.assoc "properties" __regular_fields);
        bond_links_up = String_to_DM.int64(List.assoc "links_up" __regular_fields);
        bond_auto_update_mac = String_to_DM.bool(List.assoc "auto_update_mac" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "Bond" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Bond" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Bond" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Bond_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "Bond"
      (fun ~__context ~self -> (fun () -> API.rpc_of_bond_t (Bond.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VLAN = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VLAN" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VLAN" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VLAN(DB.read_refs __t "VLAN")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VLAN (DB.db_get_by_uuid __t "VLAN" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~tagged_PIF ~untagged_PIF ~tag ~other_config =
      let ref = DM_to_String.ref_VLAN ref in
      let uuid = DM_to_String.string uuid in
      let tagged_PIF = DM_to_String.ref_PIF tagged_PIF in
      let untagged_PIF = DM_to_String.ref_PIF untagged_PIF in
      let tag = DM_to_String.int64 tag in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VLAN" [ ("uuid", uuid); ("tagged_PIF", tagged_PIF); ("untagged_PIF", untagged_PIF); ("tag", tag); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VLAN" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VLAN" "uuid" self)
    (**  *)
    and get_tagged_PIF ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "VLAN" "tagged_PIF" self)
    (**  *)
    and get_untagged_PIF ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "VLAN" "untagged_PIF" self)
    (**  *)
    and get_tag ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VLAN" "tag" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VLAN self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VLAN" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VLAN self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VLAN" self "uuid" value
    (**  *)
    and set_tagged_PIF ~__context ~self ~value =
      let self = DM_to_String.ref_VLAN self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VLAN" self "tagged_PIF" value
    (**  *)
    and set_untagged_PIF ~__context ~self ~value =
      let self = DM_to_String.ref_VLAN self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VLAN" self "untagged_PIF" value
    (**  *)
    and set_tag ~__context ~self ~value =
      let self = DM_to_String.ref_VLAN self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VLAN" self "tag" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VLAN self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VLAN" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VLAN self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VLAN" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VLAN self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VLAN" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vLAN_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vLAN_tagged_PIF = String_to_DM.ref_PIF(List.assoc "tagged_PIF" __regular_fields);
        API.vLAN_untagged_PIF = String_to_DM.ref_PIF(List.assoc "untagged_PIF" __regular_fields);
        API.vLAN_tag = String_to_DM.int64(List.assoc "tag" __regular_fields);
        API.vLAN_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vLAN_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vLAN_tagged_PIF = String_to_DM.ref_PIF(List.assoc "tagged_PIF" __regular_fields);
        vLAN_untagged_PIF = String_to_DM.ref_PIF(List.assoc "untagged_PIF" __regular_fields);
        vLAN_tag = String_to_DM.int64(List.assoc "tag" __regular_fields);
        vLAN_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VLAN" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VLAN" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VLAN" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VLAN_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VLAN"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vLAN_t (VLAN.get_record ~__context ~self:(Ref.of_string self))))
  end
  module SM = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "SM" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "SM" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_SM(DB.read_refs __t "SM")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SM (DB.db_get_by_uuid __t "SM" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~_type ~vendor ~copyright ~version ~required_api_version ~configuration ~capabilities ~features ~other_config ~driver_filename ~required_cluster_stack =
      let ref = DM_to_String.ref_SM ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let _type = DM_to_String.string _type in
      let vendor = DM_to_String.string vendor in
      let copyright = DM_to_String.string copyright in
      let version = DM_to_String.string version in
      let required_api_version = DM_to_String.string required_api_version in
      let configuration = DM_to_String.string_to_string_map configuration in
      let capabilities = DM_to_String.string_set capabilities in
      let features = DM_to_String.string_to_int64_map features in
      let other_config = DM_to_String.string_to_string_map other_config in
      let driver_filename = DM_to_String.string driver_filename in
      let required_cluster_stack = DM_to_String.string_set required_cluster_stack in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "SM" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("type", _type); ("vendor", vendor); ("copyright", copyright); ("version", version); ("required_api_version", required_api_version); ("configuration", configuration); ("capabilities", capabilities); ("features", features); ("other_config", other_config); ("driver_filename", driver_filename); ("required_cluster_stack", required_cluster_stack) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "SM" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_SM (DB.db_get_by_name_label __t "SM" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "name__description" self)
    (**  *)
    and get_type ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "type" self)
    (**  *)
    and get_vendor ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "vendor" self)
    (**  *)
    and get_copyright ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "copyright" self)
    (**  *)
    and get_version ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "version" self)
    (**  *)
    and get_required_api_version ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "required_api_version" self)
    (**  *)
    and get_configuration ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "SM" "configuration" self)
    (**  *)
    and get_capabilities ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "SM" "capabilities" self)
    (**  *)
    and get_features ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_int64_map (DB.read_field __t "SM" "features" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "SM" "other_config" self)
    (**  *)
    and get_driver_filename ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SM" "driver_filename" self)
    (**  *)
    and get_required_cluster_stack ~__context ~self =
      let self = DM_to_String.ref_SM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "SM" "required_cluster_stack" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "name__description" value
    (**  *)
    and set_type ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "type" value
    (**  *)
    and set_vendor ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "vendor" value
    (**  *)
    and set_copyright ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "copyright" value
    (**  *)
    and set_version ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "version" value
    (**  *)
    and set_required_api_version ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "required_api_version" value
    (**  *)
    and set_configuration ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "configuration" value
    (**  *)
    and add_to_configuration ~__context ~self ~key ~value =
      let self = DM_to_String.ref_SM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "SM" "configuration" self AddMapLegacy
    (**  *)
    and remove_from_configuration ~__context ~self ~key =
      let self = DM_to_String.ref_SM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "SM" "configuration" self RemoveMap
    (**  *)
    and set_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "capabilities" value
    (**  *)
    and add_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SM" "capabilities" self AddSet
    (**  *)
    and remove_capabilities ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SM" "capabilities" self RemoveSet
    (**  *)
    and set_features ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string_to_int64_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "features" value
    (**  *)
    and add_to_features ~__context ~self ~key ~value =
      let self = DM_to_String.ref_SM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "SM" "features" self AddMapLegacy
    (**  *)
    and remove_from_features ~__context ~self ~key =
      let self = DM_to_String.ref_SM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "SM" "features" self RemoveMap
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_SM self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "SM" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_SM self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "SM" "other_config" self RemoveMap
    (**  *)
    and set_driver_filename ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "driver_filename" value
    (**  *)
    and set_required_cluster_stack ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SM" self "required_cluster_stack" value
    (**  *)
    and add_required_cluster_stack ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SM" "required_cluster_stack" self AddSet
    (**  *)
    and remove_required_cluster_stack ~__context ~self ~value =
      let self = DM_to_String.ref_SM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SM" "required_cluster_stack" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.sM_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.sM_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.sM_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.sM_type = String_to_DM.string(List.assoc "type" __regular_fields);
        API.sM_vendor = String_to_DM.string(List.assoc "vendor" __regular_fields);
        API.sM_copyright = String_to_DM.string(List.assoc "copyright" __regular_fields);
        API.sM_version = String_to_DM.string(List.assoc "version" __regular_fields);
        API.sM_required_api_version = String_to_DM.string(List.assoc "required_api_version" __regular_fields);
        API.sM_configuration = String_to_DM.string_to_string_map(List.assoc "configuration" __regular_fields);
        API.sM_capabilities = String_to_DM.string_set(List.assoc "capabilities" __regular_fields);
        API.sM_features = String_to_DM.string_to_int64_map(List.assoc "features" __regular_fields);
        API.sM_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.sM_driver_filename = String_to_DM.string(List.assoc "driver_filename" __regular_fields);
        API.sM_required_cluster_stack = String_to_DM.string_set(List.assoc "required_cluster_stack" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        sM_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        sM_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        sM_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        sM_type = String_to_DM.string(List.assoc "type" __regular_fields);
        sM_vendor = String_to_DM.string(List.assoc "vendor" __regular_fields);
        sM_copyright = String_to_DM.string(List.assoc "copyright" __regular_fields);
        sM_version = String_to_DM.string(List.assoc "version" __regular_fields);
        sM_required_api_version = String_to_DM.string(List.assoc "required_api_version" __regular_fields);
        sM_configuration = String_to_DM.string_to_string_map(List.assoc "configuration" __regular_fields);
        sM_capabilities = String_to_DM.string_set(List.assoc "capabilities" __regular_fields);
        sM_features = String_to_DM.string_to_int64_map(List.assoc "features" __regular_fields);
        sM_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        sM_driver_filename = String_to_DM.string(List.assoc "driver_filename" __regular_fields);
        sM_required_cluster_stack = String_to_DM.string_set(List.assoc "required_cluster_stack" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "SM" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "SM" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "SM" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module SM_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "SM"
      (fun ~__context ~self -> (fun () -> API.rpc_of_sM_t (SM.get_record ~__context ~self:(Ref.of_string self))))
  end
  module SR = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "SR" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "SR" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_SR(DB.read_refs __t "SR")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.db_get_by_uuid __t "SR" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~allowed_operations ~current_operations ~virtual_allocation ~physical_utilisation ~physical_size ~_type ~content_type ~shared ~other_config ~tags ~default_vdi_visibility ~sm_config ~blobs ~local_cache_enabled ~introduced_by ~clustered ~is_tools_sr =
      let ref = DM_to_String.ref_SR ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let allowed_operations = DM_to_String.storage_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_storage_operations_map current_operations in
      let virtual_allocation = DM_to_String.int64 virtual_allocation in
      let physical_utilisation = DM_to_String.int64 physical_utilisation in
      let physical_size = DM_to_String.int64 physical_size in
      let _type = DM_to_String.string _type in
      let content_type = DM_to_String.string content_type in
      let shared = DM_to_String.bool shared in
      let other_config = DM_to_String.string_to_string_map other_config in
      let tags = DM_to_String.string_set tags in
      let default_vdi_visibility = DM_to_String.bool default_vdi_visibility in
      let sm_config = DM_to_String.string_to_string_map sm_config in
      let blobs = DM_to_String.string_to_ref_blob_map blobs in
      let local_cache_enabled = DM_to_String.bool local_cache_enabled in
      let introduced_by = DM_to_String.ref_DR_task introduced_by in
      let clustered = DM_to_String.bool clustered in
      let is_tools_sr = DM_to_String.bool is_tools_sr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "SR" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("virtual_allocation", virtual_allocation); ("physical_utilisation", physical_utilisation); ("physical_size", physical_size); ("type", _type); ("content_type", content_type); ("shared", shared); ("other_config", other_config); ("tags", tags); ("default_vdi_visibility", default_vdi_visibility); ("sm_config", sm_config); ("blobs", blobs); ("local_cache_enabled", local_cache_enabled); ("introduced_by", introduced_by); ("clustered", clustered); ("is_tools_sr", is_tools_sr) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "SR" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_SR (DB.db_get_by_name_label __t "SR" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SR" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SR" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SR" "name__description" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.storage_operations_set (DB.read_field __t "SR" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_storage_operations_map (DB.read_field __t "SR" "current_operations" self)
    (**  *)
    and get_VDIs ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI_set (DB.read_field __t "SR" "VDIs" self)
    (**  *)
    and get_PBDs ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PBD_set (DB.read_field __t "SR" "PBDs" self)
    (**  *)
    and get_virtual_allocation ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "SR" "virtual_allocation" self)
    (**  *)
    and get_physical_utilisation ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "SR" "physical_utilisation" self)
    (**  *)
    and get_physical_size ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "SR" "physical_size" self)
    (**  *)
    and get_type ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SR" "type" self)
    (**  *)
    and get_content_type ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SR" "content_type" self)
    (**  *)
    and get_shared ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "SR" "shared" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "SR" "other_config" self)
    (**  *)
    and get_tags ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "SR" "tags" self)
    (**  *)
    and get_default_vdi_visibility ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "SR" "default_vdi_visibility" self)
    (**  *)
    and get_sm_config ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "SR" "sm_config" self)
    (**  *)
    and get_blobs ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_ref_blob_map (DB.read_field __t "SR" "blobs" self)
    (**  *)
    and get_local_cache_enabled ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "SR" "local_cache_enabled" self)
    (**  *)
    and get_introduced_by ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_DR_task (DB.read_field __t "SR" "introduced_by" self)
    (**  *)
    and get_clustered ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "SR" "clustered" self)
    (**  *)
    and get_is_tools_sr ~__context ~self =
      let self = DM_to_String.ref_SR self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "SR" "is_tools_sr" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "name__description" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.storage_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.storage_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SR" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.storage_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SR" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string_to_storage_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let value = DM_to_String.storage_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "SR" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "SR" "current_operations" self RemoveMap
    (**  *)
    and set_virtual_allocation ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "virtual_allocation" value
    (**  *)
    and set_physical_utilisation ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "physical_utilisation" value
    (**  *)
    and set_physical_size ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "physical_size" value
    (**  *)
    and set_type ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "type" value
    (**  *)
    and set_content_type ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "content_type" value
    (**  *)
    and set_shared ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "shared" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "SR" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "SR" "other_config" self RemoveMap
    (**  *)
    and set_tags ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "tags" value
    (**  *)
    and add_tags ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SR" "tags" self AddSet
    (**  *)
    and remove_tags ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "SR" "tags" self RemoveSet
    (**  *)
    and set_default_vdi_visibility ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "default_vdi_visibility" value
    (**  *)
    and set_sm_config ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "sm_config" value
    (**  *)
    and add_to_sm_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "SR" "sm_config" self AddMapLegacy
    (**  *)
    and remove_from_sm_config ~__context ~self ~key =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "SR" "sm_config" self RemoveMap
    (**  *)
    and set_blobs ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.string_to_ref_blob_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "blobs" value
    (**  *)
    and add_to_blobs ~__context ~self ~key ~value =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let value = DM_to_String.ref_blob value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "SR" "blobs" self AddMapLegacy
    (**  *)
    and remove_from_blobs ~__context ~self ~key =
      let self = DM_to_String.ref_SR self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "SR" "blobs" self RemoveMap
    (**  *)
    and set_local_cache_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "local_cache_enabled" value
    (**  *)
    and set_introduced_by ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.ref_DR_task value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "introduced_by" value
    (**  *)
    and set_clustered ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "clustered" value
    (**  *)
    and set_is_tools_sr ~__context ~self ~value =
      let self = DM_to_String.ref_SR self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SR" self "is_tools_sr" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.sR_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.sR_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.sR_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.sR_allowed_operations = String_to_DM.storage_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.sR_current_operations = String_to_DM.string_to_storage_operations_map(List.assoc "current_operations" __regular_fields);
        API.sR_VDIs = List.map String_to_DM.ref_VDI (List.assoc "VDIs" __set_refs);
        API.sR_PBDs = List.map String_to_DM.ref_PBD (List.assoc "PBDs" __set_refs);
        API.sR_virtual_allocation = String_to_DM.int64(List.assoc "virtual_allocation" __regular_fields);
        API.sR_physical_utilisation = String_to_DM.int64(List.assoc "physical_utilisation" __regular_fields);
        API.sR_physical_size = String_to_DM.int64(List.assoc "physical_size" __regular_fields);
        API.sR_type = String_to_DM.string(List.assoc "type" __regular_fields);
        API.sR_content_type = String_to_DM.string(List.assoc "content_type" __regular_fields);
        API.sR_shared = String_to_DM.bool(List.assoc "shared" __regular_fields);
        API.sR_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.sR_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        API.sR_sm_config = String_to_DM.string_to_string_map(List.assoc "sm_config" __regular_fields);
        API.sR_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        API.sR_local_cache_enabled = String_to_DM.bool(List.assoc "local_cache_enabled" __regular_fields);
        API.sR_introduced_by = String_to_DM.ref_DR_task(List.assoc "introduced_by" __regular_fields);
        API.sR_clustered = String_to_DM.bool(List.assoc "clustered" __regular_fields);
        API.sR_is_tools_sr = String_to_DM.bool(List.assoc "is_tools_sr" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        sR_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        sR_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        sR_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        sR_allowed_operations = String_to_DM.storage_operations_set(List.assoc "allowed_operations" __regular_fields);
        sR_current_operations = String_to_DM.string_to_storage_operations_map(List.assoc "current_operations" __regular_fields);
        sR_VDIs = List.map String_to_DM.ref_VDI (List.assoc "VDIs" __set_refs);
        sR_PBDs = List.map String_to_DM.ref_PBD (List.assoc "PBDs" __set_refs);
        sR_virtual_allocation = String_to_DM.int64(List.assoc "virtual_allocation" __regular_fields);
        sR_physical_utilisation = String_to_DM.int64(List.assoc "physical_utilisation" __regular_fields);
        sR_physical_size = String_to_DM.int64(List.assoc "physical_size" __regular_fields);
        sR_type = String_to_DM.string(List.assoc "type" __regular_fields);
        sR_content_type = String_to_DM.string(List.assoc "content_type" __regular_fields);
        sR_shared = String_to_DM.bool(List.assoc "shared" __regular_fields);
        sR_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        sR_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        sR_default_vdi_visibility = String_to_DM.bool(List.assoc "default_vdi_visibility" __regular_fields);
        sR_sm_config = String_to_DM.string_to_string_map(List.assoc "sm_config" __regular_fields);
        sR_blobs = String_to_DM.string_to_ref_blob_map(List.assoc "blobs" __regular_fields);
        sR_local_cache_enabled = String_to_DM.bool(List.assoc "local_cache_enabled" __regular_fields);
        sR_introduced_by = String_to_DM.ref_DR_task(List.assoc "introduced_by" __regular_fields);
        sR_clustered = String_to_DM.bool(List.assoc "clustered" __regular_fields);
        sR_is_tools_sr = String_to_DM.bool(List.assoc "is_tools_sr" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "SR" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "SR" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "SR" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module SR_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "SR"
      (fun ~__context ~self -> (fun () -> API.rpc_of_sR_t (SR.get_record ~__context ~self:(Ref.of_string self))))
  end
  module LVHD = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_LVHD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "LVHD" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_LVHD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "LVHD" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_LVHD(DB.read_refs __t "LVHD")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_LVHD (DB.db_get_by_uuid __t "LVHD" uuid)
    (**  *)
    and create ~__context ~ref ~uuid =
      let ref = DM_to_String.ref_LVHD ref in
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "LVHD" [ ("uuid", uuid) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_LVHD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "LVHD" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_LVHD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "LVHD" "uuid" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_LVHD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "LVHD" self "uuid" value
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.lVHD_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        lVHD_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "LVHD" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "LVHD" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "LVHD" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module LVHD_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "LVHD"
      (fun ~__context ~self -> (fun () -> API.rpc_of_lVHD_t (LVHD.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VDI = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VDI" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VDI" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VDI(DB.read_refs __t "VDI")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.db_get_by_uuid __t "VDI" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~allowed_operations ~current_operations ~sR ~virtual_size ~physical_utilisation ~_type ~sharable ~read_only ~other_config ~storage_lock ~location ~managed ~missing ~parent ~xenstore_data ~sm_config ~is_a_snapshot ~snapshot_of ~snapshot_time ~tags ~allow_caching ~on_boot ~metadata_of_pool ~metadata_latest ~is_tools_iso ~cbt_enabled =
      let ref = DM_to_String.ref_VDI ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let allowed_operations = DM_to_String.vdi_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_vdi_operations_map current_operations in
      let sR = DM_to_String.ref_SR sR in
      let virtual_size = DM_to_String.int64 virtual_size in
      let physical_utilisation = DM_to_String.int64 physical_utilisation in
      let _type = DM_to_String.vdi_type _type in
      let sharable = DM_to_String.bool sharable in
      let read_only = DM_to_String.bool read_only in
      let other_config = DM_to_String.string_to_string_map other_config in
      let storage_lock = DM_to_String.bool storage_lock in
      let location = DM_to_String.string location in
      let managed = DM_to_String.bool managed in
      let missing = DM_to_String.bool missing in
      let parent = DM_to_String.ref_VDI parent in
      let xenstore_data = DM_to_String.string_to_string_map xenstore_data in
      let sm_config = DM_to_String.string_to_string_map sm_config in
      let is_a_snapshot = DM_to_String.bool is_a_snapshot in
      let snapshot_of = DM_to_String.ref_VDI snapshot_of in
      let snapshot_time = DM_to_String.datetime snapshot_time in
      let tags = DM_to_String.string_set tags in
      let allow_caching = DM_to_String.bool allow_caching in
      let on_boot = DM_to_String.on_boot on_boot in
      let metadata_of_pool = DM_to_String.ref_pool metadata_of_pool in
      let metadata_latest = DM_to_String.bool metadata_latest in
      let is_tools_iso = DM_to_String.bool is_tools_iso in
      let cbt_enabled = DM_to_String.bool cbt_enabled in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VDI" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("SR", sR); ("virtual_size", virtual_size); ("physical_utilisation", physical_utilisation); ("type", _type); ("sharable", sharable); ("read_only", read_only); ("other_config", other_config); ("storage_lock", storage_lock); ("location", location); ("managed", managed); ("missing", missing); ("parent", parent); ("xenstore_data", xenstore_data); ("sm_config", sm_config); ("is_a_snapshot", is_a_snapshot); ("snapshot_of", snapshot_of); ("snapshot_time", snapshot_time); ("tags", tags); ("allow_caching", allow_caching); ("on_boot", on_boot); ("metadata_of_pool", metadata_of_pool); ("metadata_latest", metadata_latest); ("is_tools_iso", is_tools_iso); ("cbt_enabled", cbt_enabled) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VDI" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VDI (DB.db_get_by_name_label __t "VDI" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VDI" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VDI" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VDI" "name__description" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vdi_operations_set (DB.read_field __t "VDI" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_vdi_operations_map (DB.read_field __t "VDI" "current_operations" self)
    (**  *)
    and get_SR ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "VDI" "SR" self)
    (**  *)
    and get_VBDs ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VBD_set (DB.read_field __t "VDI" "VBDs" self)
    (**  *)
    and get_crash_dumps ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_crashdump_set (DB.read_field __t "VDI" "crash_dumps" self)
    (**  *)
    and get_virtual_size ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VDI" "virtual_size" self)
    (**  *)
    and get_physical_utilisation ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VDI" "physical_utilisation" self)
    (**  *)
    and get_type ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vdi_type (DB.read_field __t "VDI" "type" self)
    (**  *)
    and get_sharable ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "sharable" self)
    (**  *)
    and get_read_only ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "read_only" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VDI" "other_config" self)
    (**  *)
    and get_storage_lock ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "storage_lock" self)
    (**  *)
    and get_location ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VDI" "location" self)
    (**  *)
    and get_managed ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "managed" self)
    (**  *)
    and get_missing ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "missing" self)
    (**  *)
    and get_parent ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "VDI" "parent" self)
    (**  *)
    and get_xenstore_data ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VDI" "xenstore_data" self)
    (**  *)
    and get_sm_config ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VDI" "sm_config" self)
    (**  *)
    and get_is_a_snapshot ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "is_a_snapshot" self)
    (**  *)
    and get_snapshot_of ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "VDI" "snapshot_of" self)
    (**  *)
    and get_snapshots ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI_set (DB.read_field __t "VDI" "snapshots" self)
    (**  *)
    and get_snapshot_time ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VDI" "snapshot_time" self)
    (**  *)
    and get_tags ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VDI" "tags" self)
    (**  *)
    and get_allow_caching ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "allow_caching" self)
    (**  *)
    and get_on_boot ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.on_boot (DB.read_field __t "VDI" "on_boot" self)
    (**  *)
    and get_metadata_of_pool ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_pool (DB.read_field __t "VDI" "metadata_of_pool" self)
    (**  *)
    and get_metadata_latest ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "metadata_latest" self)
    (**  *)
    and get_is_tools_iso ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "is_tools_iso" self)
    (**  *)
    and get_cbt_enabled ~__context ~self =
      let self = DM_to_String.ref_VDI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VDI" "cbt_enabled" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "name__description" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.vdi_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.vdi_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VDI" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.vdi_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VDI" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string_to_vdi_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let value = DM_to_String.vdi_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VDI" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VDI" "current_operations" self RemoveMap
    (**  *)
    and set_SR ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "SR" value
    (**  *)
    and set_virtual_size ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "virtual_size" value
    (**  *)
    and set_physical_utilisation ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "physical_utilisation" value
    (**  *)
    and set_type ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.vdi_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "type" value
    (**  *)
    and set_sharable ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "sharable" value
    (**  *)
    and set_read_only ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "read_only" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VDI" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VDI" "other_config" self RemoveMap
    (**  *)
    and set_storage_lock ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "storage_lock" value
    (**  *)
    and set_location ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "location" value
    (**  *)
    and set_managed ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "managed" value
    (**  *)
    and set_missing ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "missing" value
    (**  *)
    and set_parent ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "parent" value
    (**  *)
    and set_xenstore_data ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "xenstore_data" value
    (**  *)
    and add_to_xenstore_data ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VDI" "xenstore_data" self AddMapLegacy
    (**  *)
    and remove_from_xenstore_data ~__context ~self ~key =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VDI" "xenstore_data" self RemoveMap
    (**  *)
    and set_sm_config ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "sm_config" value
    (**  *)
    and add_to_sm_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VDI" "sm_config" self AddMapLegacy
    (**  *)
    and remove_from_sm_config ~__context ~self ~key =
      let self = DM_to_String.ref_VDI self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VDI" "sm_config" self RemoveMap
    (**  *)
    and set_is_a_snapshot ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "is_a_snapshot" value
    (**  *)
    and set_snapshot_of ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "snapshot_of" value
    (**  *)
    and set_snapshot_time ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "snapshot_time" value
    (**  *)
    and set_tags ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "tags" value
    (**  *)
    and add_tags ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VDI" "tags" self AddSet
    (**  *)
    and remove_tags ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VDI" "tags" self RemoveSet
    (**  *)
    and set_allow_caching ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "allow_caching" value
    (**  *)
    and set_on_boot ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.on_boot value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "on_boot" value
    (**  *)
    and set_metadata_of_pool ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.ref_pool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "metadata_of_pool" value
    (**  *)
    and set_metadata_latest ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "metadata_latest" value
    (**  *)
    and set_is_tools_iso ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "is_tools_iso" value
    (**  *)
    and set_cbt_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_VDI self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VDI" self "cbt_enabled" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vDI_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vDI_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.vDI_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.vDI_allowed_operations = String_to_DM.vdi_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.vDI_current_operations = String_to_DM.string_to_vdi_operations_map(List.assoc "current_operations" __regular_fields);
        API.vDI_SR = String_to_DM.ref_SR(List.assoc "SR" __regular_fields);
        API.vDI_VBDs = List.map String_to_DM.ref_VBD (List.assoc "VBDs" __set_refs);
        API.vDI_crash_dumps = List.map String_to_DM.ref_crashdump (List.assoc "crash_dumps" __set_refs);
        API.vDI_virtual_size = String_to_DM.int64(List.assoc "virtual_size" __regular_fields);
        API.vDI_physical_utilisation = String_to_DM.int64(List.assoc "physical_utilisation" __regular_fields);
        API.vDI_type = String_to_DM.vdi_type(List.assoc "type" __regular_fields);
        API.vDI_sharable = String_to_DM.bool(List.assoc "sharable" __regular_fields);
        API.vDI_read_only = String_to_DM.bool(List.assoc "read_only" __regular_fields);
        API.vDI_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vDI_storage_lock = String_to_DM.bool(List.assoc "storage_lock" __regular_fields);
        API.vDI_location = String_to_DM.string(List.assoc "location" __regular_fields);
        API.vDI_managed = String_to_DM.bool(List.assoc "managed" __regular_fields);
        API.vDI_missing = String_to_DM.bool(List.assoc "missing" __regular_fields);
        API.vDI_parent = String_to_DM.ref_VDI(List.assoc "parent" __regular_fields);
        API.vDI_xenstore_data = String_to_DM.string_to_string_map(List.assoc "xenstore_data" __regular_fields);
        API.vDI_sm_config = String_to_DM.string_to_string_map(List.assoc "sm_config" __regular_fields);
        API.vDI_is_a_snapshot = String_to_DM.bool(List.assoc "is_a_snapshot" __regular_fields);
        API.vDI_snapshot_of = String_to_DM.ref_VDI(List.assoc "snapshot_of" __regular_fields);
        API.vDI_snapshots = List.map String_to_DM.ref_VDI (List.assoc "snapshots" __set_refs);
        API.vDI_snapshot_time = String_to_DM.datetime(List.assoc "snapshot_time" __regular_fields);
        API.vDI_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        API.vDI_allow_caching = String_to_DM.bool(List.assoc "allow_caching" __regular_fields);
        API.vDI_on_boot = String_to_DM.on_boot(List.assoc "on_boot" __regular_fields);
        API.vDI_metadata_of_pool = String_to_DM.ref_pool(List.assoc "metadata_of_pool" __regular_fields);
        API.vDI_metadata_latest = String_to_DM.bool(List.assoc "metadata_latest" __regular_fields);
        API.vDI_is_tools_iso = String_to_DM.bool(List.assoc "is_tools_iso" __regular_fields);
        API.vDI_cbt_enabled = String_to_DM.bool(List.assoc "cbt_enabled" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vDI_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vDI_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        vDI_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        vDI_allowed_operations = String_to_DM.vdi_operations_set(List.assoc "allowed_operations" __regular_fields);
        vDI_current_operations = String_to_DM.string_to_vdi_operations_map(List.assoc "current_operations" __regular_fields);
        vDI_SR = String_to_DM.ref_SR(List.assoc "SR" __regular_fields);
        vDI_VBDs = List.map String_to_DM.ref_VBD (List.assoc "VBDs" __set_refs);
        vDI_crash_dumps = List.map String_to_DM.ref_crashdump (List.assoc "crash_dumps" __set_refs);
        vDI_virtual_size = String_to_DM.int64(List.assoc "virtual_size" __regular_fields);
        vDI_physical_utilisation = String_to_DM.int64(List.assoc "physical_utilisation" __regular_fields);
        vDI_type = String_to_DM.vdi_type(List.assoc "type" __regular_fields);
        vDI_sharable = String_to_DM.bool(List.assoc "sharable" __regular_fields);
        vDI_read_only = String_to_DM.bool(List.assoc "read_only" __regular_fields);
        vDI_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vDI_storage_lock = String_to_DM.bool(List.assoc "storage_lock" __regular_fields);
        vDI_location = String_to_DM.string(List.assoc "location" __regular_fields);
        vDI_managed = String_to_DM.bool(List.assoc "managed" __regular_fields);
        vDI_missing = String_to_DM.bool(List.assoc "missing" __regular_fields);
        vDI_parent = String_to_DM.ref_VDI(List.assoc "parent" __regular_fields);
        vDI_xenstore_data = String_to_DM.string_to_string_map(List.assoc "xenstore_data" __regular_fields);
        vDI_sm_config = String_to_DM.string_to_string_map(List.assoc "sm_config" __regular_fields);
        vDI_is_a_snapshot = String_to_DM.bool(List.assoc "is_a_snapshot" __regular_fields);
        vDI_snapshot_of = String_to_DM.ref_VDI(List.assoc "snapshot_of" __regular_fields);
        vDI_snapshots = List.map String_to_DM.ref_VDI (List.assoc "snapshots" __set_refs);
        vDI_snapshot_time = String_to_DM.datetime(List.assoc "snapshot_time" __regular_fields);
        vDI_tags = String_to_DM.string_set(List.assoc "tags" __regular_fields);
        vDI_allow_caching = String_to_DM.bool(List.assoc "allow_caching" __regular_fields);
        vDI_on_boot = String_to_DM.on_boot(List.assoc "on_boot" __regular_fields);
        vDI_metadata_of_pool = String_to_DM.ref_pool(List.assoc "metadata_of_pool" __regular_fields);
        vDI_metadata_latest = String_to_DM.bool(List.assoc "metadata_latest" __regular_fields);
        vDI_is_tools_iso = String_to_DM.bool(List.assoc "is_tools_iso" __regular_fields);
        vDI_cbt_enabled = String_to_DM.bool(List.assoc "cbt_enabled" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VDI" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VDI" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VDI" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VDI_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VDI"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vDI_t (VDI.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VBD = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VBD" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VBD" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VBD(DB.read_refs __t "VBD")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VBD (DB.db_get_by_uuid __t "VBD" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~allowed_operations ~current_operations ~vM ~vDI ~device ~userdevice ~bootable ~mode ~_type ~unpluggable ~storage_lock ~empty ~reserved ~other_config ~currently_attached ~status_code ~status_detail ~runtime_properties ~qos_algorithm_type ~qos_algorithm_params ~qos_supported_algorithms ~metrics =
      let ref = DM_to_String.ref_VBD ref in
      let uuid = DM_to_String.string uuid in
      let allowed_operations = DM_to_String.vbd_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_vbd_operations_map current_operations in
      let vM = DM_to_String.ref_VM vM in
      let vDI = DM_to_String.ref_VDI vDI in
      let device = DM_to_String.string device in
      let userdevice = DM_to_String.string userdevice in
      let bootable = DM_to_String.bool bootable in
      let mode = DM_to_String.vbd_mode mode in
      let _type = DM_to_String.vbd_type _type in
      let unpluggable = DM_to_String.bool unpluggable in
      let storage_lock = DM_to_String.bool storage_lock in
      let empty = DM_to_String.bool empty in
      let reserved = DM_to_String.bool reserved in
      let other_config = DM_to_String.string_to_string_map other_config in
      let currently_attached = DM_to_String.bool currently_attached in
      let status_code = DM_to_String.int64 status_code in
      let status_detail = DM_to_String.string status_detail in
      let runtime_properties = DM_to_String.string_to_string_map runtime_properties in
      let qos_algorithm_type = DM_to_String.string qos_algorithm_type in
      let qos_algorithm_params = DM_to_String.string_to_string_map qos_algorithm_params in
      let qos_supported_algorithms = DM_to_String.string_set qos_supported_algorithms in
      let metrics = DM_to_String.ref_VBD_metrics metrics in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VBD" [ ("uuid", uuid); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("VM", vM); ("VDI", vDI); ("device", device); ("userdevice", userdevice); ("bootable", bootable); ("mode", mode); ("type", _type); ("unpluggable", unpluggable); ("storage_lock", storage_lock); ("empty", empty); ("reserved", reserved); ("other_config", other_config); ("currently_attached", currently_attached); ("status_code", status_code); ("status_detail", status_detail); ("runtime_properties", runtime_properties); ("qos__algorithm_type", qos_algorithm_type); ("qos__algorithm_params", qos_algorithm_params); ("qos__supported_algorithms", qos_supported_algorithms); ("metrics", metrics) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VBD" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VBD" "uuid" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vbd_operations_set (DB.read_field __t "VBD" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_vbd_operations_map (DB.read_field __t "VBD" "current_operations" self)
    (**  *)
    and get_VM ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VBD" "VM" self)
    (**  *)
    and get_VDI ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "VBD" "VDI" self)
    (**  *)
    and get_device ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VBD" "device" self)
    (**  *)
    and get_userdevice ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VBD" "userdevice" self)
    (**  *)
    and get_bootable ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VBD" "bootable" self)
    (**  *)
    and get_mode ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vbd_mode (DB.read_field __t "VBD" "mode" self)
    (**  *)
    and get_type ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vbd_type (DB.read_field __t "VBD" "type" self)
    (**  *)
    and get_unpluggable ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VBD" "unpluggable" self)
    (**  *)
    and get_storage_lock ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VBD" "storage_lock" self)
    (**  *)
    and get_empty ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VBD" "empty" self)
    (**  *)
    and get_reserved ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VBD" "reserved" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VBD" "other_config" self)
    (**  *)
    and get_currently_attached ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VBD" "currently_attached" self)
    (**  *)
    and get_status_code ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VBD" "status_code" self)
    (**  *)
    and get_status_detail ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VBD" "status_detail" self)
    (**  *)
    and get_runtime_properties ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VBD" "runtime_properties" self)
    (**  *)
    and get_qos_algorithm_type ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VBD" "qos__algorithm_type" self)
    (**  *)
    and get_qos_algorithm_params ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VBD" "qos__algorithm_params" self)
    (**  *)
    and get_qos_supported_algorithms ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "VBD" "qos__supported_algorithms" self)
    (**  *)
    and get_metrics ~__context ~self =
      let self = DM_to_String.ref_VBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VBD_metrics (DB.read_field __t "VBD" "metrics" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "uuid" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.vbd_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.vbd_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VBD" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.vbd_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VBD" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string_to_vbd_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let value = DM_to_String.vbd_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VBD" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VBD" "current_operations" self RemoveMap
    (**  *)
    and set_VM ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "VM" value
    (**  *)
    and set_VDI ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "VDI" value
    (**  *)
    and set_device ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "device" value
    (**  *)
    and set_userdevice ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "userdevice" value
    (**  *)
    and set_bootable ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "bootable" value
    (**  *)
    and set_mode ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.vbd_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "mode" value
    (**  *)
    and set_type ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.vbd_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "type" value
    (**  *)
    and set_unpluggable ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "unpluggable" value
    (**  *)
    and set_storage_lock ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "storage_lock" value
    (**  *)
    and set_empty ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "empty" value
    (**  *)
    and set_reserved ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "reserved" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VBD" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VBD" "other_config" self RemoveMap
    (**  *)
    and set_currently_attached ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "currently_attached" value
    (**  *)
    and set_status_code ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "status_code" value
    (**  *)
    and set_status_detail ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "status_detail" value
    (**  *)
    and set_runtime_properties ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "runtime_properties" value
    (**  *)
    and add_to_runtime_properties ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VBD" "runtime_properties" self AddMapLegacy
    (**  *)
    and remove_from_runtime_properties ~__context ~self ~key =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VBD" "runtime_properties" self RemoveMap
    (**  *)
    and set_qos_algorithm_type ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "qos__algorithm_type" value
    (**  *)
    and set_qos_algorithm_params ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "qos__algorithm_params" value
    (**  *)
    and add_to_qos_algorithm_params ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VBD" "qos__algorithm_params" self AddMapLegacy
    (**  *)
    and remove_from_qos_algorithm_params ~__context ~self ~key =
      let self = DM_to_String.ref_VBD self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VBD" "qos__algorithm_params" self RemoveMap
    (**  *)
    and set_qos_supported_algorithms ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "qos__supported_algorithms" value
    (**  *)
    and add_qos_supported_algorithms ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VBD" "qos__supported_algorithms" self AddSet
    (**  *)
    and remove_qos_supported_algorithms ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VBD" "qos__supported_algorithms" self RemoveSet
    (**  *)
    and set_metrics ~__context ~self ~value =
      let self = DM_to_String.ref_VBD self in
      let value = DM_to_String.ref_VBD_metrics value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD" self "metrics" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vBD_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vBD_allowed_operations = String_to_DM.vbd_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.vBD_current_operations = String_to_DM.string_to_vbd_operations_map(List.assoc "current_operations" __regular_fields);
        API.vBD_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        API.vBD_VDI = String_to_DM.ref_VDI(List.assoc "VDI" __regular_fields);
        API.vBD_device = String_to_DM.string(List.assoc "device" __regular_fields);
        API.vBD_userdevice = String_to_DM.string(List.assoc "userdevice" __regular_fields);
        API.vBD_bootable = String_to_DM.bool(List.assoc "bootable" __regular_fields);
        API.vBD_mode = String_to_DM.vbd_mode(List.assoc "mode" __regular_fields);
        API.vBD_type = String_to_DM.vbd_type(List.assoc "type" __regular_fields);
        API.vBD_unpluggable = String_to_DM.bool(List.assoc "unpluggable" __regular_fields);
        API.vBD_storage_lock = String_to_DM.bool(List.assoc "storage_lock" __regular_fields);
        API.vBD_empty = String_to_DM.bool(List.assoc "empty" __regular_fields);
        API.vBD_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vBD_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        API.vBD_status_code = String_to_DM.int64(List.assoc "status_code" __regular_fields);
        API.vBD_status_detail = String_to_DM.string(List.assoc "status_detail" __regular_fields);
        API.vBD_runtime_properties = String_to_DM.string_to_string_map(List.assoc "runtime_properties" __regular_fields);
        API.vBD_qos_algorithm_type = String_to_DM.string(List.assoc "qos__algorithm_type" __regular_fields);
        API.vBD_qos_algorithm_params = String_to_DM.string_to_string_map(List.assoc "qos__algorithm_params" __regular_fields);
        API.vBD_qos_supported_algorithms = String_to_DM.string_set(List.assoc "qos__supported_algorithms" __regular_fields);
        API.vBD_metrics = String_to_DM.ref_VBD_metrics(List.assoc "metrics" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vBD_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vBD_allowed_operations = String_to_DM.vbd_operations_set(List.assoc "allowed_operations" __regular_fields);
        vBD_current_operations = String_to_DM.string_to_vbd_operations_map(List.assoc "current_operations" __regular_fields);
        vBD_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        vBD_VDI = String_to_DM.ref_VDI(List.assoc "VDI" __regular_fields);
        vBD_device = String_to_DM.string(List.assoc "device" __regular_fields);
        vBD_userdevice = String_to_DM.string(List.assoc "userdevice" __regular_fields);
        vBD_bootable = String_to_DM.bool(List.assoc "bootable" __regular_fields);
        vBD_mode = String_to_DM.vbd_mode(List.assoc "mode" __regular_fields);
        vBD_type = String_to_DM.vbd_type(List.assoc "type" __regular_fields);
        vBD_unpluggable = String_to_DM.bool(List.assoc "unpluggable" __regular_fields);
        vBD_storage_lock = String_to_DM.bool(List.assoc "storage_lock" __regular_fields);
        vBD_empty = String_to_DM.bool(List.assoc "empty" __regular_fields);
        vBD_reserved = String_to_DM.bool(List.assoc "reserved" __regular_fields);
        vBD_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vBD_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        vBD_status_code = String_to_DM.int64(List.assoc "status_code" __regular_fields);
        vBD_status_detail = String_to_DM.string(List.assoc "status_detail" __regular_fields);
        vBD_runtime_properties = String_to_DM.string_to_string_map(List.assoc "runtime_properties" __regular_fields);
        vBD_qos_algorithm_type = String_to_DM.string(List.assoc "qos__algorithm_type" __regular_fields);
        vBD_qos_algorithm_params = String_to_DM.string_to_string_map(List.assoc "qos__algorithm_params" __regular_fields);
        vBD_qos_supported_algorithms = String_to_DM.string_set(List.assoc "qos__supported_algorithms" __regular_fields);
        vBD_metrics = String_to_DM.ref_VBD_metrics(List.assoc "metrics" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VBD" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VBD" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VBD" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VBD_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VBD"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vBD_t (VBD.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VBD_metrics = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VBD_metrics" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VBD_metrics" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VBD_metrics(DB.read_refs __t "VBD_metrics")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VBD_metrics (DB.db_get_by_uuid __t "VBD_metrics" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~io_read_kbs ~io_write_kbs ~last_updated ~other_config =
      let ref = DM_to_String.ref_VBD_metrics ref in
      let uuid = DM_to_String.string uuid in
      let io_read_kbs = DM_to_String.float io_read_kbs in
      let io_write_kbs = DM_to_String.float io_write_kbs in
      let last_updated = DM_to_String.datetime last_updated in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VBD_metrics" [ ("uuid", uuid); ("io__read_kbs", io_read_kbs); ("io__write_kbs", io_write_kbs); ("last_updated", last_updated); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VBD_metrics" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VBD_metrics" "uuid" self)
    (**  *)
    and get_io_read_kbs ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "VBD_metrics" "io__read_kbs" self)
    (**  *)
    and get_io_write_kbs ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "VBD_metrics" "io__write_kbs" self)
    (**  *)
    and get_last_updated ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "VBD_metrics" "last_updated" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VBD_metrics self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VBD_metrics" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VBD_metrics self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD_metrics" self "uuid" value
    (**  *)
    and set_io_read_kbs ~__context ~self ~value =
      let self = DM_to_String.ref_VBD_metrics self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD_metrics" self "io__read_kbs" value
    (**  *)
    and set_io_write_kbs ~__context ~self ~value =
      let self = DM_to_String.ref_VBD_metrics self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD_metrics" self "io__write_kbs" value
    (**  *)
    and set_last_updated ~__context ~self ~value =
      let self = DM_to_String.ref_VBD_metrics self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD_metrics" self "last_updated" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VBD_metrics self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VBD_metrics" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VBD_metrics self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VBD_metrics" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VBD_metrics self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VBD_metrics" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vBD_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vBD_metrics_io_read_kbs = String_to_DM.float(List.assoc "io__read_kbs" __regular_fields);
        API.vBD_metrics_io_write_kbs = String_to_DM.float(List.assoc "io__write_kbs" __regular_fields);
        API.vBD_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        API.vBD_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vBD_metrics_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vBD_metrics_io_read_kbs = String_to_DM.float(List.assoc "io__read_kbs" __regular_fields);
        vBD_metrics_io_write_kbs = String_to_DM.float(List.assoc "io__write_kbs" __regular_fields);
        vBD_metrics_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        vBD_metrics_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VBD_metrics" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VBD_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VBD_metrics" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VBD_metrics_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VBD_metrics"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vBD_metrics_t (VBD_metrics.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PBD = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PBD" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PBD" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PBD(DB.read_refs __t "PBD")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PBD (DB.db_get_by_uuid __t "PBD" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~host ~sR ~device_config ~currently_attached ~other_config =
      let ref = DM_to_String.ref_PBD ref in
      let uuid = DM_to_String.string uuid in
      let host = DM_to_String.ref_host host in
      let sR = DM_to_String.ref_SR sR in
      let device_config = DM_to_String.string_to_string_map device_config in
      let currently_attached = DM_to_String.bool currently_attached in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PBD" [ ("uuid", uuid); ("host", host); ("SR", sR); ("device_config", device_config); ("currently_attached", currently_attached); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PBD" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PBD" "uuid" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "PBD" "host" self)
    (**  *)
    and get_SR ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "PBD" "SR" self)
    (**  *)
    and get_device_config ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PBD" "device_config" self)
    (**  *)
    and get_currently_attached ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PBD" "currently_attached" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_PBD self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PBD" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PBD self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PBD" self "uuid" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_PBD self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PBD" self "host" value
    (**  *)
    and set_SR ~__context ~self ~value =
      let self = DM_to_String.ref_PBD self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PBD" self "SR" value
    (**  *)
    and set_device_config ~__context ~self ~value =
      let self = DM_to_String.ref_PBD self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PBD" self "device_config" value
    (**  *)
    and add_to_device_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PBD self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PBD" "device_config" self AddMapLegacy
    (**  *)
    and remove_from_device_config ~__context ~self ~key =
      let self = DM_to_String.ref_PBD self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PBD" "device_config" self RemoveMap
    (**  *)
    and set_currently_attached ~__context ~self ~value =
      let self = DM_to_String.ref_PBD self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PBD" self "currently_attached" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_PBD self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PBD" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PBD self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PBD" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_PBD self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PBD" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pBD_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pBD_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.pBD_SR = String_to_DM.ref_SR(List.assoc "SR" __regular_fields);
        API.pBD_device_config = String_to_DM.string_to_string_map(List.assoc "device_config" __regular_fields);
        API.pBD_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        API.pBD_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pBD_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pBD_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        pBD_SR = String_to_DM.ref_SR(List.assoc "SR" __regular_fields);
        pBD_device_config = String_to_DM.string_to_string_map(List.assoc "device_config" __regular_fields);
        pBD_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        pBD_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PBD" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PBD" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PBD" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PBD_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PBD"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pBD_t (PBD.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Crashdump = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "crashdump" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "crashdump" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_crashdump(DB.read_refs __t "crashdump")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_crashdump (DB.db_get_by_uuid __t "crashdump" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~vM ~vDI ~other_config =
      let ref = DM_to_String.ref_crashdump ref in
      let uuid = DM_to_String.string uuid in
      let vM = DM_to_String.ref_VM vM in
      let vDI = DM_to_String.ref_VDI vDI in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "crashdump" [ ("uuid", uuid); ("VM", vM); ("VDI", vDI); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "crashdump" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "crashdump" "uuid" self)
    (**  *)
    and get_VM ~__context ~self =
      let self = DM_to_String.ref_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "crashdump" "VM" self)
    (**  *)
    and get_VDI ~__context ~self =
      let self = DM_to_String.ref_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "crashdump" "VDI" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_crashdump self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "crashdump" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_crashdump self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "crashdump" self "uuid" value
    (**  *)
    and set_VM ~__context ~self ~value =
      let self = DM_to_String.ref_crashdump self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "crashdump" self "VM" value
    (**  *)
    and set_VDI ~__context ~self ~value =
      let self = DM_to_String.ref_crashdump self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "crashdump" self "VDI" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_crashdump self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "crashdump" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_crashdump self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "crashdump" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_crashdump self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "crashdump" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.crashdump_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.crashdump_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        API.crashdump_VDI = String_to_DM.ref_VDI(List.assoc "VDI" __regular_fields);
        API.crashdump_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        crashdump_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        crashdump_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        crashdump_VDI = String_to_DM.ref_VDI(List.assoc "VDI" __regular_fields);
        crashdump_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "crashdump" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "crashdump" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "crashdump" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Crashdump_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "crashdump"
      (fun ~__context ~self -> (fun () -> API.rpc_of_crashdump_t (Crashdump.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VTPM = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VTPM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VTPM" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VTPM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VTPM" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VTPM(DB.read_refs __t "VTPM")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VTPM (DB.db_get_by_uuid __t "VTPM" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~vM ~backend =
      let ref = DM_to_String.ref_VTPM ref in
      let uuid = DM_to_String.string uuid in
      let vM = DM_to_String.ref_VM vM in
      let backend = DM_to_String.ref_VM backend in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VTPM" [ ("uuid", uuid); ("VM", vM); ("backend", backend) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VTPM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VTPM" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VTPM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VTPM" "uuid" self)
    (**  *)
    and get_VM ~__context ~self =
      let self = DM_to_String.ref_VTPM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VTPM" "VM" self)
    (**  *)
    and get_backend ~__context ~self =
      let self = DM_to_String.ref_VTPM self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VTPM" "backend" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VTPM self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VTPM" self "uuid" value
    (**  *)
    and set_VM ~__context ~self ~value =
      let self = DM_to_String.ref_VTPM self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VTPM" self "VM" value
    (**  *)
    and set_backend ~__context ~self ~value =
      let self = DM_to_String.ref_VTPM self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VTPM" self "backend" value
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vTPM_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vTPM_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        API.vTPM_backend = String_to_DM.ref_VM(List.assoc "backend" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vTPM_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vTPM_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        vTPM_backend = String_to_DM.ref_VM(List.assoc "backend" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VTPM" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VTPM" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VTPM" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VTPM_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VTPM"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vTPM_t (VTPM.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Console = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "console" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "console" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_console(DB.read_refs __t "console")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_console (DB.db_get_by_uuid __t "console" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~protocol ~location ~vM ~other_config ~port =
      let ref = DM_to_String.ref_console ref in
      let uuid = DM_to_String.string uuid in
      let protocol = DM_to_String.console_protocol protocol in
      let location = DM_to_String.string location in
      let vM = DM_to_String.ref_VM vM in
      let other_config = DM_to_String.string_to_string_map other_config in
      let port = DM_to_String.int64 port in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "console" [ ("uuid", uuid); ("protocol", protocol); ("location", location); ("VM", vM); ("other_config", other_config); ("port", port) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "console" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "console" "uuid" self)
    (**  *)
    and get_protocol ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.console_protocol (DB.read_field __t "console" "protocol" self)
    (**  *)
    and get_location ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "console" "location" self)
    (**  *)
    and get_VM ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "console" "VM" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "console" "other_config" self)
    (**  *)
    and get_port ~__context ~self =
      let self = DM_to_String.ref_console self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "console" "port" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_console self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "console" self "uuid" value
    (**  *)
    and set_protocol ~__context ~self ~value =
      let self = DM_to_String.ref_console self in
      let value = DM_to_String.console_protocol value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "console" self "protocol" value
    (**  *)
    and set_location ~__context ~self ~value =
      let self = DM_to_String.ref_console self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "console" self "location" value
    (**  *)
    and set_VM ~__context ~self ~value =
      let self = DM_to_String.ref_console self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "console" self "VM" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_console self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "console" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_console self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "console" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_console self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "console" "other_config" self RemoveMap
    (**  *)
    and set_port ~__context ~self ~value =
      let self = DM_to_String.ref_console self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "console" self "port" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.console_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.console_protocol = String_to_DM.console_protocol(List.assoc "protocol" __regular_fields);
        API.console_location = String_to_DM.string(List.assoc "location" __regular_fields);
        API.console_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        API.console_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        console_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        console_protocol = String_to_DM.console_protocol(List.assoc "protocol" __regular_fields);
        console_location = String_to_DM.string(List.assoc "location" __regular_fields);
        console_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        console_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        console_port = String_to_DM.int64(List.assoc "port" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "console" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "console" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "console" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Console_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "console"
      (fun ~__context ~self -> (fun () -> API.rpc_of_console_t (Console.get_record ~__context ~self:(Ref.of_string self))))
  end
  module User = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_user self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "user" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_user self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "user" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_user(DB.read_refs __t "user")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_user (DB.db_get_by_uuid __t "user" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~short_name ~fullname ~other_config =
      let ref = DM_to_String.ref_user ref in
      let uuid = DM_to_String.string uuid in
      let short_name = DM_to_String.string short_name in
      let fullname = DM_to_String.string fullname in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "user" [ ("uuid", uuid); ("short_name", short_name); ("fullname", fullname); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_user self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "user" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_user self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "user" "uuid" self)
    (**  *)
    and get_short_name ~__context ~self =
      let self = DM_to_String.ref_user self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "user" "short_name" self)
    (**  *)
    and get_fullname ~__context ~self =
      let self = DM_to_String.ref_user self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "user" "fullname" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_user self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "user" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_user self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "user" self "uuid" value
    (**  *)
    and set_short_name ~__context ~self ~value =
      let self = DM_to_String.ref_user self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "user" self "short_name" value
    (**  *)
    and set_fullname ~__context ~self ~value =
      let self = DM_to_String.ref_user self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "user" self "fullname" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_user self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "user" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_user self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "user" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_user self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "user" "other_config" self RemoveMap
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.user_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.user_short_name = String_to_DM.string(List.assoc "short_name" __regular_fields);
        API.user_fullname = String_to_DM.string(List.assoc "fullname" __regular_fields);
        API.user_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        user_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        user_short_name = String_to_DM.string(List.assoc "short_name" __regular_fields);
        user_fullname = String_to_DM.string(List.assoc "fullname" __regular_fields);
        user_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "user" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "user" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "user" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module User_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "user"
      (fun ~__context ~self -> (fun () -> API.rpc_of_user_t (User.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Blob = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "blob" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "blob" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_blob(DB.read_refs __t "blob")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_blob (DB.db_get_by_uuid __t "blob" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~size ~public ~last_updated ~mime_type =
      let ref = DM_to_String.ref_blob ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let size = DM_to_String.int64 size in
      let public = DM_to_String.bool public in
      let last_updated = DM_to_String.datetime last_updated in
      let mime_type = DM_to_String.string mime_type in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "blob" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("size", size); ("public", public); ("last_updated", last_updated); ("mime_type", mime_type) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "blob" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_blob (DB.db_get_by_name_label __t "blob" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "blob" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "blob" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "blob" "name__description" self)
    (**  *)
    and get_size ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "blob" "size" self)
    (**  *)
    and get_public ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "blob" "public" self)
    (**  *)
    and get_last_updated ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "blob" "last_updated" self)
    (**  *)
    and get_mime_type ~__context ~self =
      let self = DM_to_String.ref_blob self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "blob" "mime_type" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_blob self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "blob" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_blob self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "blob" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_blob self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "blob" self "name__description" value
    (**  *)
    and set_size ~__context ~self ~value =
      let self = DM_to_String.ref_blob self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "blob" self "size" value
    (**  *)
    and set_public ~__context ~self ~value =
      let self = DM_to_String.ref_blob self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "blob" self "public" value
    (**  *)
    and set_last_updated ~__context ~self ~value =
      let self = DM_to_String.ref_blob self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "blob" self "last_updated" value
    (**  *)
    and set_mime_type ~__context ~self ~value =
      let self = DM_to_String.ref_blob self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "blob" self "mime_type" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.blob_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.blob_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.blob_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.blob_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        API.blob_public = String_to_DM.bool(List.assoc "public" __regular_fields);
        API.blob_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        API.blob_mime_type = String_to_DM.string(List.assoc "mime_type" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        blob_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        blob_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        blob_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        blob_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        blob_public = String_to_DM.bool(List.assoc "public" __regular_fields);
        blob_last_updated = String_to_DM.datetime(List.assoc "last_updated" __regular_fields);
        blob_mime_type = String_to_DM.string(List.assoc "mime_type" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "blob" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "blob" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "blob" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Blob_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "blob"
      (fun ~__context ~self -> (fun () -> API.rpc_of_blob_t (Blob.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Secret = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_secret self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "secret" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_secret self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "secret" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_secret(DB.read_refs __t "secret")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_secret (DB.db_get_by_uuid __t "secret" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~value ~other_config =
      let ref = DM_to_String.ref_secret ref in
      let uuid = DM_to_String.string uuid in
      let value = DM_to_String.string value in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "secret" [ ("uuid", uuid); ("value", value); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_secret self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "secret" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_secret self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "secret" "uuid" self)
    (**  *)
    and get_value ~__context ~self =
      let self = DM_to_String.ref_secret self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "secret" "value" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_secret self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "secret" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_secret self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "secret" self "uuid" value
    (**  *)
    and set_value ~__context ~self ~value =
      let self = DM_to_String.ref_secret self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "secret" self "value" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_secret self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "secret" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_secret self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "secret" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_secret self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "secret" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.secret_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.secret_value = String_to_DM.string(List.assoc "value" __regular_fields);
        API.secret_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        secret_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        secret_value = String_to_DM.string(List.assoc "value" __regular_fields);
        secret_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "secret" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "secret" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "secret" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Secret_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "secret"
      (fun ~__context ~self -> (fun () -> API.rpc_of_secret_t (Secret.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Tunnel = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "tunnel" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "tunnel" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_tunnel(DB.read_refs __t "tunnel")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_tunnel (DB.db_get_by_uuid __t "tunnel" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~access_PIF ~transport_PIF ~status ~other_config ~protocol =
      let ref = DM_to_String.ref_tunnel ref in
      let uuid = DM_to_String.string uuid in
      let access_PIF = DM_to_String.ref_PIF access_PIF in
      let transport_PIF = DM_to_String.ref_PIF transport_PIF in
      let status = DM_to_String.string_to_string_map status in
      let other_config = DM_to_String.string_to_string_map other_config in
      let protocol = DM_to_String.tunnel_protocol protocol in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "tunnel" [ ("uuid", uuid); ("access_PIF", access_PIF); ("transport_PIF", transport_PIF); ("status", status); ("other_config", other_config); ("protocol", protocol) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "tunnel" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "tunnel" "uuid" self)
    (**  *)
    and get_access_PIF ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "tunnel" "access_PIF" self)
    (**  *)
    and get_transport_PIF ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "tunnel" "transport_PIF" self)
    (**  *)
    and get_status ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "tunnel" "status" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "tunnel" "other_config" self)
    (**  *)
    and get_protocol ~__context ~self =
      let self = DM_to_String.ref_tunnel self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.tunnel_protocol (DB.read_field __t "tunnel" "protocol" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_tunnel self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "tunnel" self "uuid" value
    (**  *)
    and set_access_PIF ~__context ~self ~value =
      let self = DM_to_String.ref_tunnel self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "tunnel" self "access_PIF" value
    (**  *)
    and set_transport_PIF ~__context ~self ~value =
      let self = DM_to_String.ref_tunnel self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "tunnel" self "transport_PIF" value
    (**  *)
    and set_status ~__context ~self ~value =
      let self = DM_to_String.ref_tunnel self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "tunnel" self "status" value
    (**  *)
    and add_to_status ~__context ~self ~key ~value =
      let self = DM_to_String.ref_tunnel self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "tunnel" "status" self AddMapLegacy
    (**  *)
    and remove_from_status ~__context ~self ~key =
      let self = DM_to_String.ref_tunnel self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "tunnel" "status" self RemoveMap
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_tunnel self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "tunnel" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_tunnel self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "tunnel" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_tunnel self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "tunnel" "other_config" self RemoveMap
    (**  *)
    and set_protocol ~__context ~self ~value =
      let self = DM_to_String.ref_tunnel self in
      let value = DM_to_String.tunnel_protocol value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "tunnel" self "protocol" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.tunnel_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.tunnel_access_PIF = String_to_DM.ref_PIF(List.assoc "access_PIF" __regular_fields);
        API.tunnel_transport_PIF = String_to_DM.ref_PIF(List.assoc "transport_PIF" __regular_fields);
        API.tunnel_status = String_to_DM.string_to_string_map(List.assoc "status" __regular_fields);
        API.tunnel_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.tunnel_protocol = String_to_DM.tunnel_protocol(List.assoc "protocol" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        tunnel_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        tunnel_access_PIF = String_to_DM.ref_PIF(List.assoc "access_PIF" __regular_fields);
        tunnel_transport_PIF = String_to_DM.ref_PIF(List.assoc "transport_PIF" __regular_fields);
        tunnel_status = String_to_DM.string_to_string_map(List.assoc "status" __regular_fields);
        tunnel_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        tunnel_protocol = String_to_DM.tunnel_protocol(List.assoc "protocol" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "tunnel" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "tunnel" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "tunnel" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Tunnel_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "tunnel"
      (fun ~__context ~self -> (fun () -> API.rpc_of_tunnel_t (Tunnel.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Network_sriov = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "network_sriov" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "network_sriov" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_network_sriov(DB.read_refs __t "network_sriov")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_network_sriov (DB.db_get_by_uuid __t "network_sriov" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~physical_PIF ~logical_PIF ~requires_reboot ~configuration_mode =
      let ref = DM_to_String.ref_network_sriov ref in
      let uuid = DM_to_String.string uuid in
      let physical_PIF = DM_to_String.ref_PIF physical_PIF in
      let logical_PIF = DM_to_String.ref_PIF logical_PIF in
      let requires_reboot = DM_to_String.bool requires_reboot in
      let configuration_mode = DM_to_String.sriov_configuration_mode configuration_mode in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "network_sriov" [ ("uuid", uuid); ("physical_PIF", physical_PIF); ("logical_PIF", logical_PIF); ("requires_reboot", requires_reboot); ("configuration_mode", configuration_mode) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "network_sriov" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "network_sriov" "uuid" self)
    (**  *)
    and get_physical_PIF ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "network_sriov" "physical_PIF" self)
    (**  *)
    and get_logical_PIF ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "network_sriov" "logical_PIF" self)
    (**  *)
    and get_requires_reboot ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "network_sriov" "requires_reboot" self)
    (**  *)
    and get_configuration_mode ~__context ~self =
      let self = DM_to_String.ref_network_sriov self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.sriov_configuration_mode (DB.read_field __t "network_sriov" "configuration_mode" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_network_sriov self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network_sriov" self "uuid" value
    (**  *)
    and set_physical_PIF ~__context ~self ~value =
      let self = DM_to_String.ref_network_sriov self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network_sriov" self "physical_PIF" value
    (**  *)
    and set_logical_PIF ~__context ~self ~value =
      let self = DM_to_String.ref_network_sriov self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network_sriov" self "logical_PIF" value
    (**  *)
    and set_requires_reboot ~__context ~self ~value =
      let self = DM_to_String.ref_network_sriov self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network_sriov" self "requires_reboot" value
    (**  *)
    and set_configuration_mode ~__context ~self ~value =
      let self = DM_to_String.ref_network_sriov self in
      let value = DM_to_String.sriov_configuration_mode value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "network_sriov" self "configuration_mode" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.network_sriov_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.network_sriov_physical_PIF = String_to_DM.ref_PIF(List.assoc "physical_PIF" __regular_fields);
        API.network_sriov_logical_PIF = String_to_DM.ref_PIF(List.assoc "logical_PIF" __regular_fields);
        API.network_sriov_requires_reboot = String_to_DM.bool(List.assoc "requires_reboot" __regular_fields);
        API.network_sriov_configuration_mode = String_to_DM.sriov_configuration_mode(List.assoc "configuration_mode" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        network_sriov_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        network_sriov_physical_PIF = String_to_DM.ref_PIF(List.assoc "physical_PIF" __regular_fields);
        network_sriov_logical_PIF = String_to_DM.ref_PIF(List.assoc "logical_PIF" __regular_fields);
        network_sriov_requires_reboot = String_to_DM.bool(List.assoc "requires_reboot" __regular_fields);
        network_sriov_configuration_mode = String_to_DM.sriov_configuration_mode(List.assoc "configuration_mode" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "network_sriov" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "network_sriov" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "network_sriov" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Network_sriov_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "network_sriov"
      (fun ~__context ~self -> (fun () -> API.rpc_of_network_sriov_t (Network_sriov.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PCI = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PCI" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PCI" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PCI(DB.read_refs __t "PCI")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI (DB.db_get_by_uuid __t "PCI" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~class_id ~class_name ~vendor_id ~vendor_name ~device_id ~device_name ~host ~pci_id ~functions ~physical_function ~dependencies ~other_config ~subsystem_vendor_id ~subsystem_vendor_name ~subsystem_device_id ~subsystem_device_name ~scheduled_to_be_attached_to ~driver_name =
      let ref = DM_to_String.ref_PCI ref in
      let uuid = DM_to_String.string uuid in
      let class_id = DM_to_String.string class_id in
      let class_name = DM_to_String.string class_name in
      let vendor_id = DM_to_String.string vendor_id in
      let vendor_name = DM_to_String.string vendor_name in
      let device_id = DM_to_String.string device_id in
      let device_name = DM_to_String.string device_name in
      let host = DM_to_String.ref_host host in
      let pci_id = DM_to_String.string pci_id in
      let functions = DM_to_String.int64 functions in
      let physical_function = DM_to_String.ref_PCI physical_function in
      let dependencies = DM_to_String.ref_PCI_set dependencies in
      let other_config = DM_to_String.string_to_string_map other_config in
      let subsystem_vendor_id = DM_to_String.string subsystem_vendor_id in
      let subsystem_vendor_name = DM_to_String.string subsystem_vendor_name in
      let subsystem_device_id = DM_to_String.string subsystem_device_id in
      let subsystem_device_name = DM_to_String.string subsystem_device_name in
      let scheduled_to_be_attached_to = DM_to_String.ref_VM scheduled_to_be_attached_to in
      let driver_name = DM_to_String.string driver_name in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PCI" [ ("uuid", uuid); ("class_id", class_id); ("class_name", class_name); ("vendor_id", vendor_id); ("vendor_name", vendor_name); ("device_id", device_id); ("device_name", device_name); ("host", host); ("pci_id", pci_id); ("functions", functions); ("physical_function", physical_function); ("dependencies", dependencies); ("other_config", other_config); ("subsystem_vendor_id", subsystem_vendor_id); ("subsystem_vendor_name", subsystem_vendor_name); ("subsystem_device_id", subsystem_device_id); ("subsystem_device_name", subsystem_device_name); ("scheduled_to_be_attached_to", scheduled_to_be_attached_to); ("driver_name", driver_name) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PCI" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "uuid" self)
    (**  *)
    and get_class_id ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "class_id" self)
    (**  *)
    and get_class_name ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "class_name" self)
    (**  *)
    and get_vendor_id ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "vendor_id" self)
    (**  *)
    and get_vendor_name ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "vendor_name" self)
    (**  *)
    and get_device_id ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "device_id" self)
    (**  *)
    and get_device_name ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "device_name" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "PCI" "host" self)
    (**  *)
    and get_pci_id ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "pci_id" self)
    (**  *)
    and get_functions ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PCI" "functions" self)
    (**  *)
    and get_virtual_functions ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI_set (DB.read_field __t "PCI" "virtual_functions" self)
    (**  *)
    and get_physical_function ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI (DB.read_field __t "PCI" "physical_function" self)
    (**  *)
    and get_attached_VMs ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM_set (DB.read_field __t "PCI" "attached_VMs" self)
    (**  *)
    and get_dependencies ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI_set (DB.read_field __t "PCI" "dependencies" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PCI" "other_config" self)
    (**  *)
    and get_subsystem_vendor_id ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "subsystem_vendor_id" self)
    (**  *)
    and get_subsystem_vendor_name ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "subsystem_vendor_name" self)
    (**  *)
    and get_subsystem_device_id ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "subsystem_device_id" self)
    (**  *)
    and get_subsystem_device_name ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "subsystem_device_name" self)
    (**  *)
    and get_scheduled_to_be_attached_to ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "PCI" "scheduled_to_be_attached_to" self)
    (**  *)
    and get_driver_name ~__context ~self =
      let self = DM_to_String.ref_PCI self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PCI" "driver_name" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "uuid" value
    (**  *)
    and set_class_id ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "class_id" value
    (**  *)
    and set_class_name ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "class_name" value
    (**  *)
    and set_vendor_id ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "vendor_id" value
    (**  *)
    and set_vendor_name ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "vendor_name" value
    (**  *)
    and set_device_id ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "device_id" value
    (**  *)
    and set_device_name ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "device_name" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "host" value
    (**  *)
    and set_pci_id ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "pci_id" value
    (**  *)
    and set_functions ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "functions" value
    (**  *)
    and set_physical_function ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "physical_function" value
    (**  *)
    and set_attached_VMs ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_VM_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "attached_VMs" value
    (**  *)
    and add_attached_VMs ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PCI" "attached_VMs" self AddSet
    (**  *)
    and remove_attached_VMs ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PCI" "attached_VMs" self RemoveSet
    (**  *)
    and set_dependencies ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_PCI_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "dependencies" value
    (**  *)
    and add_dependencies ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PCI" "dependencies" self AddSet
    (**  *)
    and remove_dependencies ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PCI" "dependencies" self RemoveSet
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PCI self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PCI" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_PCI self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PCI" "other_config" self RemoveMap
    (**  *)
    and set_subsystem_vendor_id ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "subsystem_vendor_id" value
    (**  *)
    and set_subsystem_vendor_name ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "subsystem_vendor_name" value
    (**  *)
    and set_subsystem_device_id ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "subsystem_device_id" value
    (**  *)
    and set_subsystem_device_name ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "subsystem_device_name" value
    (**  *)
    and set_scheduled_to_be_attached_to ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "scheduled_to_be_attached_to" value
    (**  *)
    and set_driver_name ~__context ~self ~value =
      let self = DM_to_String.ref_PCI self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PCI" self "driver_name" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pCI_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pCI_class_name = String_to_DM.string(List.assoc "class_name" __regular_fields);
        API.pCI_vendor_name = String_to_DM.string(List.assoc "vendor_name" __regular_fields);
        API.pCI_device_name = String_to_DM.string(List.assoc "device_name" __regular_fields);
        API.pCI_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.pCI_pci_id = String_to_DM.string(List.assoc "pci_id" __regular_fields);
        API.pCI_dependencies = String_to_DM.ref_PCI_set(List.assoc "dependencies" __regular_fields);
        API.pCI_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.pCI_subsystem_vendor_name = String_to_DM.string(List.assoc "subsystem_vendor_name" __regular_fields);
        API.pCI_subsystem_device_name = String_to_DM.string(List.assoc "subsystem_device_name" __regular_fields);
        API.pCI_driver_name = String_to_DM.string(List.assoc "driver_name" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pCI_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pCI_class_id = String_to_DM.string(List.assoc "class_id" __regular_fields);
        pCI_class_name = String_to_DM.string(List.assoc "class_name" __regular_fields);
        pCI_vendor_id = String_to_DM.string(List.assoc "vendor_id" __regular_fields);
        pCI_vendor_name = String_to_DM.string(List.assoc "vendor_name" __regular_fields);
        pCI_device_id = String_to_DM.string(List.assoc "device_id" __regular_fields);
        pCI_device_name = String_to_DM.string(List.assoc "device_name" __regular_fields);
        pCI_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        pCI_pci_id = String_to_DM.string(List.assoc "pci_id" __regular_fields);
        pCI_functions = String_to_DM.int64(List.assoc "functions" __regular_fields);
        pCI_virtual_functions = List.map String_to_DM.ref_PCI (List.assoc "virtual_functions" __set_refs);
        pCI_physical_function = String_to_DM.ref_PCI(List.assoc "physical_function" __regular_fields);
        pCI_attached_VMs = List.map String_to_DM.ref_VM (List.assoc "attached_VMs" __set_refs);
        pCI_dependencies = String_to_DM.ref_PCI_set(List.assoc "dependencies" __regular_fields);
        pCI_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        pCI_subsystem_vendor_id = String_to_DM.string(List.assoc "subsystem_vendor_id" __regular_fields);
        pCI_subsystem_vendor_name = String_to_DM.string(List.assoc "subsystem_vendor_name" __regular_fields);
        pCI_subsystem_device_id = String_to_DM.string(List.assoc "subsystem_device_id" __regular_fields);
        pCI_subsystem_device_name = String_to_DM.string(List.assoc "subsystem_device_name" __regular_fields);
        pCI_scheduled_to_be_attached_to = String_to_DM.ref_VM(List.assoc "scheduled_to_be_attached_to" __regular_fields);
        pCI_driver_name = String_to_DM.string(List.assoc "driver_name" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PCI" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PCI" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PCI" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PCI_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PCI"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pCI_t (PCI.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PGPU = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PGPU" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PGPU" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PGPU(DB.read_refs __t "PGPU")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PGPU (DB.db_get_by_uuid __t "PGPU" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~pCI ~gPU_group ~host ~other_config ~size ~supported_VGPU_max_capacities ~dom0_access ~is_system_display_device ~compatibility_metadata =
      let ref = DM_to_String.ref_PGPU ref in
      let uuid = DM_to_String.string uuid in
      let pCI = DM_to_String.ref_PCI pCI in
      let gPU_group = DM_to_String.ref_GPU_group gPU_group in
      let host = DM_to_String.ref_host host in
      let other_config = DM_to_String.string_to_string_map other_config in
      let size = DM_to_String.int64 size in
      let supported_VGPU_max_capacities = DM_to_String.ref_VGPU_type_to_int64_map supported_VGPU_max_capacities in
      let dom0_access = DM_to_String.pgpu_dom0_access dom0_access in
      let is_system_display_device = DM_to_String.bool is_system_display_device in
      let compatibility_metadata = DM_to_String.string_to_string_map compatibility_metadata in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PGPU" [ ("uuid", uuid); ("PCI", pCI); ("GPU_group", gPU_group); ("host", host); ("other_config", other_config); ("size", size); ("supported_VGPU_max_capacities", supported_VGPU_max_capacities); ("dom0_access", dom0_access); ("is_system_display_device", is_system_display_device); ("compatibility_metadata", compatibility_metadata) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PGPU" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PGPU" "uuid" self)
    (**  *)
    and get_PCI ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI (DB.read_field __t "PGPU" "PCI" self)
    (**  *)
    and get_GPU_group ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_GPU_group (DB.read_field __t "PGPU" "GPU_group" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "PGPU" "host" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PGPU" "other_config" self)
    (**  *)
    and get_supported_VGPU_types ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type_set (DB.read_field __t "PGPU" "supported_VGPU_types" self)
    (**  *)
    and get_enabled_VGPU_types ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type_set (DB.read_field __t "PGPU" "enabled_VGPU_types" self)
    (**  *)
    and get_resident_VGPUs ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_set (DB.read_field __t "PGPU" "resident_VGPUs" self)
    (**  *)
    and get_size ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PGPU" "size" self)
    (**  *)
    and get_supported_VGPU_max_capacities ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type_to_int64_map (DB.read_field __t "PGPU" "supported_VGPU_max_capacities" self)
    (**  *)
    and get_dom0_access ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.pgpu_dom0_access (DB.read_field __t "PGPU" "dom0_access" self)
    (**  *)
    and get_is_system_display_device ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PGPU" "is_system_display_device" self)
    (**  *)
    and get_compatibility_metadata ~__context ~self =
      let self = DM_to_String.ref_PGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PGPU" "compatibility_metadata" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "uuid" value
    (**  *)
    and set_PCI ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "PCI" value
    (**  *)
    and set_GPU_group ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_GPU_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "GPU_group" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "host" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PGPU self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PGPU" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_PGPU self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PGPU" "other_config" self RemoveMap
    (**  *)
    and set_supported_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_VGPU_type_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "supported_VGPU_types" value
    (**  *)
    and add_supported_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PGPU" "supported_VGPU_types" self AddSet
    (**  *)
    and remove_supported_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PGPU" "supported_VGPU_types" self RemoveSet
    (**  *)
    and set_enabled_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_VGPU_type_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "enabled_VGPU_types" value
    (**  *)
    and add_enabled_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PGPU" "enabled_VGPU_types" self AddSet
    (**  *)
    and remove_enabled_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PGPU" "enabled_VGPU_types" self RemoveSet
    (**  *)
    and set_size ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "size" value
    (**  *)
    and set_supported_VGPU_max_capacities ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.ref_VGPU_type_to_int64_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "supported_VGPU_max_capacities" value
    (**  *)
    and add_to_supported_VGPU_max_capacities ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PGPU self in
      let key = DM_to_String.ref_VGPU_type key in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PGPU" "supported_VGPU_max_capacities" self AddMapLegacy
    (**  *)
    and remove_from_supported_VGPU_max_capacities ~__context ~self ~key =
      let self = DM_to_String.ref_PGPU self in
      let key = DM_to_String.ref_VGPU_type key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PGPU" "supported_VGPU_max_capacities" self RemoveMap
    (**  *)
    and set_dom0_access ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.pgpu_dom0_access value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "dom0_access" value
    (**  *)
    and set_is_system_display_device ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "is_system_display_device" value
    (**  *)
    and set_compatibility_metadata ~__context ~self ~value =
      let self = DM_to_String.ref_PGPU self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PGPU" self "compatibility_metadata" value
    (**  *)
    and add_to_compatibility_metadata ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PGPU self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PGPU" "compatibility_metadata" self AddMapLegacy
    (**  *)
    and remove_from_compatibility_metadata ~__context ~self ~key =
      let self = DM_to_String.ref_PGPU self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PGPU" "compatibility_metadata" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pGPU_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pGPU_PCI = String_to_DM.ref_PCI(List.assoc "PCI" __regular_fields);
        API.pGPU_GPU_group = String_to_DM.ref_GPU_group(List.assoc "GPU_group" __regular_fields);
        API.pGPU_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.pGPU_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.pGPU_supported_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "supported_VGPU_types" __set_refs);
        API.pGPU_enabled_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "enabled_VGPU_types" __set_refs);
        API.pGPU_resident_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "resident_VGPUs" __set_refs);
        API.pGPU_supported_VGPU_max_capacities = String_to_DM.ref_VGPU_type_to_int64_map(List.assoc "supported_VGPU_max_capacities" __regular_fields);
        API.pGPU_dom0_access = String_to_DM.pgpu_dom0_access(List.assoc "dom0_access" __regular_fields);
        API.pGPU_is_system_display_device = String_to_DM.bool(List.assoc "is_system_display_device" __regular_fields);
        API.pGPU_compatibility_metadata = String_to_DM.string_to_string_map(List.assoc "compatibility_metadata" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pGPU_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pGPU_PCI = String_to_DM.ref_PCI(List.assoc "PCI" __regular_fields);
        pGPU_GPU_group = String_to_DM.ref_GPU_group(List.assoc "GPU_group" __regular_fields);
        pGPU_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        pGPU_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        pGPU_supported_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "supported_VGPU_types" __set_refs);
        pGPU_enabled_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "enabled_VGPU_types" __set_refs);
        pGPU_resident_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "resident_VGPUs" __set_refs);
        pGPU_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        pGPU_supported_VGPU_max_capacities = String_to_DM.ref_VGPU_type_to_int64_map(List.assoc "supported_VGPU_max_capacities" __regular_fields);
        pGPU_dom0_access = String_to_DM.pgpu_dom0_access(List.assoc "dom0_access" __regular_fields);
        pGPU_is_system_display_device = String_to_DM.bool(List.assoc "is_system_display_device" __regular_fields);
        pGPU_compatibility_metadata = String_to_DM.string_to_string_map(List.assoc "compatibility_metadata" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PGPU" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PGPU" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PGPU" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PGPU_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PGPU"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pGPU_t (PGPU.get_record ~__context ~self:(Ref.of_string self))))
  end
  module GPU_group = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "GPU_group" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "GPU_group" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_GPU_group(DB.read_refs __t "GPU_group")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_GPU_group (DB.db_get_by_uuid __t "GPU_group" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~gPU_types ~other_config ~allocation_algorithm =
      let ref = DM_to_String.ref_GPU_group ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let gPU_types = DM_to_String.string_set gPU_types in
      let other_config = DM_to_String.string_to_string_map other_config in
      let allocation_algorithm = DM_to_String.allocation_algorithm allocation_algorithm in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "GPU_group" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("GPU_types", gPU_types); ("other_config", other_config); ("allocation_algorithm", allocation_algorithm) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "GPU_group" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_GPU_group (DB.db_get_by_name_label __t "GPU_group" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "GPU_group" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "GPU_group" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "GPU_group" "name__description" self)
    (**  *)
    and get_PGPUs ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PGPU_set (DB.read_field __t "GPU_group" "PGPUs" self)
    (**  *)
    and get_VGPUs ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_set (DB.read_field __t "GPU_group" "VGPUs" self)
    (**  *)
    and get_GPU_types ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "GPU_group" "GPU_types" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "GPU_group" "other_config" self)
    (**  *)
    and get_allocation_algorithm ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.allocation_algorithm (DB.read_field __t "GPU_group" "allocation_algorithm" self)
    (**  *)
    and get_supported_VGPU_types ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type_set (DB.read_field __t "GPU_group" "supported_VGPU_types" self)
    (**  *)
    and get_enabled_VGPU_types ~__context ~self =
      let self = DM_to_String.ref_GPU_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type_set (DB.read_field __t "GPU_group" "enabled_VGPU_types" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "name__description" value
    (**  *)
    and set_GPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "GPU_types" value
    (**  *)
    and add_GPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "GPU_group" "GPU_types" self AddSet
    (**  *)
    and remove_GPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "GPU_group" "GPU_types" self RemoveSet
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_GPU_group self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "GPU_group" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_GPU_group self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "GPU_group" "other_config" self RemoveMap
    (**  *)
    and set_allocation_algorithm ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.allocation_algorithm value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "allocation_algorithm" value
    (**  *)
    and set_supported_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.ref_VGPU_type_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "supported_VGPU_types" value
    (**  *)
    and add_supported_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "GPU_group" "supported_VGPU_types" self AddSet
    (**  *)
    and remove_supported_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "GPU_group" "supported_VGPU_types" self RemoveSet
    (**  *)
    and set_enabled_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.ref_VGPU_type_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "GPU_group" self "enabled_VGPU_types" value
    (**  *)
    and add_enabled_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "GPU_group" "enabled_VGPU_types" self AddSet
    (**  *)
    and remove_enabled_VGPU_types ~__context ~self ~value =
      let self = DM_to_String.ref_GPU_group self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "GPU_group" "enabled_VGPU_types" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.gPU_group_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.gPU_group_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.gPU_group_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.gPU_group_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "PGPUs" __set_refs);
        API.gPU_group_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "VGPUs" __set_refs);
        API.gPU_group_GPU_types = String_to_DM.string_set(List.assoc "GPU_types" __regular_fields);
        API.gPU_group_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.gPU_group_allocation_algorithm = String_to_DM.allocation_algorithm(List.assoc "allocation_algorithm" __regular_fields);
        API.gPU_group_supported_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "supported_VGPU_types" __set_refs);
        API.gPU_group_enabled_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "enabled_VGPU_types" __set_refs);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        gPU_group_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        gPU_group_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        gPU_group_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        gPU_group_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "PGPUs" __set_refs);
        gPU_group_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "VGPUs" __set_refs);
        gPU_group_GPU_types = String_to_DM.string_set(List.assoc "GPU_types" __regular_fields);
        gPU_group_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        gPU_group_allocation_algorithm = String_to_DM.allocation_algorithm(List.assoc "allocation_algorithm" __regular_fields);
        gPU_group_supported_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "supported_VGPU_types" __set_refs);
        gPU_group_enabled_VGPU_types = List.map String_to_DM.ref_VGPU_type (List.assoc "enabled_VGPU_types" __set_refs);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "GPU_group" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "GPU_group" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "GPU_group" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module GPU_group_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "GPU_group"
      (fun ~__context ~self -> (fun () -> API.rpc_of_gPU_group_t (GPU_group.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VGPU = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VGPU" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VGPU" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VGPU(DB.read_refs __t "VGPU")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU (DB.db_get_by_uuid __t "VGPU" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~vM ~gPU_group ~device ~currently_attached ~other_config ~_type ~resident_on ~scheduled_to_be_resident_on ~compatibility_metadata ~extra_args ~pCI =
      let ref = DM_to_String.ref_VGPU ref in
      let uuid = DM_to_String.string uuid in
      let vM = DM_to_String.ref_VM vM in
      let gPU_group = DM_to_String.ref_GPU_group gPU_group in
      let device = DM_to_String.string device in
      let currently_attached = DM_to_String.bool currently_attached in
      let other_config = DM_to_String.string_to_string_map other_config in
      let _type = DM_to_String.ref_VGPU_type _type in
      let resident_on = DM_to_String.ref_PGPU resident_on in
      let scheduled_to_be_resident_on = DM_to_String.ref_PGPU scheduled_to_be_resident_on in
      let compatibility_metadata = DM_to_String.string_to_string_map compatibility_metadata in
      let extra_args = DM_to_String.string extra_args in
      let pCI = DM_to_String.ref_PCI pCI in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VGPU" [ ("uuid", uuid); ("VM", vM); ("GPU_group", gPU_group); ("device", device); ("currently_attached", currently_attached); ("other_config", other_config); ("type", _type); ("resident_on", resident_on); ("scheduled_to_be_resident_on", scheduled_to_be_resident_on); ("compatibility_metadata", compatibility_metadata); ("extra_args", extra_args); ("PCI", pCI) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VGPU" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VGPU" "uuid" self)
    (**  *)
    and get_VM ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VGPU" "VM" self)
    (**  *)
    and get_GPU_group ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_GPU_group (DB.read_field __t "VGPU" "GPU_group" self)
    (**  *)
    and get_device ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VGPU" "device" self)
    (**  *)
    and get_currently_attached ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VGPU" "currently_attached" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VGPU" "other_config" self)
    (**  *)
    and get_type ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type (DB.read_field __t "VGPU" "type" self)
    (**  *)
    and get_resident_on ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PGPU (DB.read_field __t "VGPU" "resident_on" self)
    (**  *)
    and get_scheduled_to_be_resident_on ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PGPU (DB.read_field __t "VGPU" "scheduled_to_be_resident_on" self)
    (**  *)
    and get_compatibility_metadata ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VGPU" "compatibility_metadata" self)
    (**  *)
    and get_extra_args ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VGPU" "extra_args" self)
    (**  *)
    and get_PCI ~__context ~self =
      let self = DM_to_String.ref_VGPU self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PCI (DB.read_field __t "VGPU" "PCI" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "uuid" value
    (**  *)
    and set_VM ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "VM" value
    (**  *)
    and set_GPU_group ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.ref_GPU_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "GPU_group" value
    (**  *)
    and set_device ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "device" value
    (**  *)
    and set_currently_attached ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "currently_attached" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VGPU self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VGPU" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VGPU self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VGPU" "other_config" self RemoveMap
    (**  *)
    and set_type ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "type" value
    (**  *)
    and set_resident_on ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.ref_PGPU value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "resident_on" value
    (**  *)
    and set_scheduled_to_be_resident_on ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.ref_PGPU value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "scheduled_to_be_resident_on" value
    (**  *)
    and set_compatibility_metadata ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "compatibility_metadata" value
    (**  *)
    and add_to_compatibility_metadata ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VGPU self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VGPU" "compatibility_metadata" self AddMapLegacy
    (**  *)
    and remove_from_compatibility_metadata ~__context ~self ~key =
      let self = DM_to_String.ref_VGPU self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VGPU" "compatibility_metadata" self RemoveMap
    (**  *)
    and set_extra_args ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "extra_args" value
    (**  *)
    and set_PCI ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU self in
      let value = DM_to_String.ref_PCI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU" self "PCI" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vGPU_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vGPU_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        API.vGPU_GPU_group = String_to_DM.ref_GPU_group(List.assoc "GPU_group" __regular_fields);
        API.vGPU_device = String_to_DM.string(List.assoc "device" __regular_fields);
        API.vGPU_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        API.vGPU_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vGPU_type = String_to_DM.ref_VGPU_type(List.assoc "type" __regular_fields);
        API.vGPU_resident_on = String_to_DM.ref_PGPU(List.assoc "resident_on" __regular_fields);
        API.vGPU_scheduled_to_be_resident_on = String_to_DM.ref_PGPU(List.assoc "scheduled_to_be_resident_on" __regular_fields);
        API.vGPU_compatibility_metadata = String_to_DM.string_to_string_map(List.assoc "compatibility_metadata" __regular_fields);
        API.vGPU_extra_args = String_to_DM.string(List.assoc "extra_args" __regular_fields);
        API.vGPU_PCI = String_to_DM.ref_PCI(List.assoc "PCI" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vGPU_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vGPU_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        vGPU_GPU_group = String_to_DM.ref_GPU_group(List.assoc "GPU_group" __regular_fields);
        vGPU_device = String_to_DM.string(List.assoc "device" __regular_fields);
        vGPU_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        vGPU_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vGPU_type = String_to_DM.ref_VGPU_type(List.assoc "type" __regular_fields);
        vGPU_resident_on = String_to_DM.ref_PGPU(List.assoc "resident_on" __regular_fields);
        vGPU_scheduled_to_be_resident_on = String_to_DM.ref_PGPU(List.assoc "scheduled_to_be_resident_on" __regular_fields);
        vGPU_compatibility_metadata = String_to_DM.string_to_string_map(List.assoc "compatibility_metadata" __regular_fields);
        vGPU_extra_args = String_to_DM.string(List.assoc "extra_args" __regular_fields);
        vGPU_PCI = String_to_DM.ref_PCI(List.assoc "PCI" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VGPU" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VGPU" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VGPU" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VGPU_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VGPU"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vGPU_t (VGPU.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VGPU_type = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VGPU_type" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VGPU_type" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VGPU_type(DB.read_refs __t "VGPU_type")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type (DB.db_get_by_uuid __t "VGPU_type" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~vendor_name ~model_name ~framebuffer_size ~max_heads ~max_resolution_x ~max_resolution_y ~size ~internal_config ~implementation ~identifier ~experimental ~compatible_types_in_vm ~compatible_types_on_pgpu =
      let ref = DM_to_String.ref_VGPU_type ref in
      let uuid = DM_to_String.string uuid in
      let vendor_name = DM_to_String.string vendor_name in
      let model_name = DM_to_String.string model_name in
      let framebuffer_size = DM_to_String.int64 framebuffer_size in
      let max_heads = DM_to_String.int64 max_heads in
      let max_resolution_x = DM_to_String.int64 max_resolution_x in
      let max_resolution_y = DM_to_String.int64 max_resolution_y in
      let size = DM_to_String.int64 size in
      let internal_config = DM_to_String.string_to_string_map internal_config in
      let implementation = DM_to_String.vgpu_type_implementation implementation in
      let identifier = DM_to_String.string identifier in
      let experimental = DM_to_String.bool experimental in
      let compatible_types_in_vm = DM_to_String.ref_VGPU_type_set compatible_types_in_vm in
      let compatible_types_on_pgpu = DM_to_String.ref_VGPU_type_set compatible_types_on_pgpu in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VGPU_type" [ ("uuid", uuid); ("vendor_name", vendor_name); ("model_name", model_name); ("framebuffer_size", framebuffer_size); ("max_heads", max_heads); ("max_resolution_x", max_resolution_x); ("max_resolution_y", max_resolution_y); ("size", size); ("internal_config", internal_config); ("implementation", implementation); ("identifier", identifier); ("experimental", experimental); ("compatible_types_in_vm", compatible_types_in_vm); ("compatible_types_on_pgpu", compatible_types_on_pgpu) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VGPU_type" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VGPU_type" "uuid" self)
    (**  *)
    and get_vendor_name ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VGPU_type" "vendor_name" self)
    (**  *)
    and get_model_name ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VGPU_type" "model_name" self)
    (**  *)
    and get_framebuffer_size ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VGPU_type" "framebuffer_size" self)
    (**  *)
    and get_max_heads ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VGPU_type" "max_heads" self)
    (**  *)
    and get_max_resolution_x ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VGPU_type" "max_resolution_x" self)
    (**  *)
    and get_max_resolution_y ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VGPU_type" "max_resolution_y" self)
    (**  *)
    and get_size ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "VGPU_type" "size" self)
    (**  *)
    and get_supported_on_PGPUs ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PGPU_set (DB.read_field __t "VGPU_type" "supported_on_PGPUs" self)
    (**  *)
    and get_enabled_on_PGPUs ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PGPU_set (DB.read_field __t "VGPU_type" "enabled_on_PGPUs" self)
    (**  *)
    and get_VGPUs ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_set (DB.read_field __t "VGPU_type" "VGPUs" self)
    (**  *)
    and get_internal_config ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VGPU_type" "internal_config" self)
    (**  *)
    and get_supported_on_GPU_groups ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_GPU_group_set (DB.read_field __t "VGPU_type" "supported_on_GPU_groups" self)
    (**  *)
    and get_enabled_on_GPU_groups ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_GPU_group_set (DB.read_field __t "VGPU_type" "enabled_on_GPU_groups" self)
    (**  *)
    and get_implementation ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vgpu_type_implementation (DB.read_field __t "VGPU_type" "implementation" self)
    (**  *)
    and get_identifier ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VGPU_type" "identifier" self)
    (**  *)
    and get_experimental ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VGPU_type" "experimental" self)
    (**  *)
    and get_compatible_types_in_vm ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type_set (DB.read_field __t "VGPU_type" "compatible_types_in_vm" self)
    (**  *)
    and get_compatible_types_on_pgpu ~__context ~self =
      let self = DM_to_String.ref_VGPU_type self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VGPU_type_set (DB.read_field __t "VGPU_type" "compatible_types_on_pgpu" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "uuid" value
    (**  *)
    and set_vendor_name ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "vendor_name" value
    (**  *)
    and set_model_name ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "model_name" value
    (**  *)
    and set_framebuffer_size ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "framebuffer_size" value
    (**  *)
    and set_max_heads ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "max_heads" value
    (**  *)
    and set_max_resolution_x ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "max_resolution_x" value
    (**  *)
    and set_max_resolution_y ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "max_resolution_y" value
    (**  *)
    and set_size ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "size" value
    (**  *)
    and set_supported_on_PGPUs ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_PGPU_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "supported_on_PGPUs" value
    (**  *)
    and add_supported_on_PGPUs ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_PGPU value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "supported_on_PGPUs" self AddSet
    (**  *)
    and remove_supported_on_PGPUs ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_PGPU value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "supported_on_PGPUs" self RemoveSet
    (**  *)
    and set_enabled_on_PGPUs ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_PGPU_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "enabled_on_PGPUs" value
    (**  *)
    and add_enabled_on_PGPUs ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_PGPU value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "enabled_on_PGPUs" self AddSet
    (**  *)
    and remove_enabled_on_PGPUs ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_PGPU value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "enabled_on_PGPUs" self RemoveSet
    (**  *)
    and set_internal_config ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "internal_config" value
    (**  *)
    and add_to_internal_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VGPU_type" "internal_config" self AddMapLegacy
    (**  *)
    and remove_from_internal_config ~__context ~self ~key =
      let self = DM_to_String.ref_VGPU_type self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VGPU_type" "internal_config" self RemoveMap
    (**  *)
    and set_supported_on_GPU_groups ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_GPU_group_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "supported_on_GPU_groups" value
    (**  *)
    and add_supported_on_GPU_groups ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_GPU_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "supported_on_GPU_groups" self AddSet
    (**  *)
    and remove_supported_on_GPU_groups ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_GPU_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "supported_on_GPU_groups" self RemoveSet
    (**  *)
    and set_enabled_on_GPU_groups ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_GPU_group_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "enabled_on_GPU_groups" value
    (**  *)
    and add_enabled_on_GPU_groups ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_GPU_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "enabled_on_GPU_groups" self AddSet
    (**  *)
    and remove_enabled_on_GPU_groups ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_GPU_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "enabled_on_GPU_groups" self RemoveSet
    (**  *)
    and set_implementation ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.vgpu_type_implementation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "implementation" value
    (**  *)
    and set_identifier ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "identifier" value
    (**  *)
    and set_experimental ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "experimental" value
    (**  *)
    and set_compatible_types_in_vm ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_VGPU_type_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "compatible_types_in_vm" value
    (**  *)
    and add_compatible_types_in_vm ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "compatible_types_in_vm" self AddSet
    (**  *)
    and remove_compatible_types_in_vm ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "compatible_types_in_vm" self RemoveSet
    (**  *)
    and set_compatible_types_on_pgpu ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_VGPU_type_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VGPU_type" self "compatible_types_on_pgpu" value
    (**  *)
    and add_compatible_types_on_pgpu ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "compatible_types_on_pgpu" self AddSet
    (**  *)
    and remove_compatible_types_on_pgpu ~__context ~self ~value =
      let self = DM_to_String.ref_VGPU_type self in
      let value = DM_to_String.ref_VGPU_type value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VGPU_type" "compatible_types_on_pgpu" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vGPU_type_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vGPU_type_vendor_name = String_to_DM.string(List.assoc "vendor_name" __regular_fields);
        API.vGPU_type_model_name = String_to_DM.string(List.assoc "model_name" __regular_fields);
        API.vGPU_type_framebuffer_size = String_to_DM.int64(List.assoc "framebuffer_size" __regular_fields);
        API.vGPU_type_max_heads = String_to_DM.int64(List.assoc "max_heads" __regular_fields);
        API.vGPU_type_max_resolution_x = String_to_DM.int64(List.assoc "max_resolution_x" __regular_fields);
        API.vGPU_type_max_resolution_y = String_to_DM.int64(List.assoc "max_resolution_y" __regular_fields);
        API.vGPU_type_supported_on_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "supported_on_PGPUs" __set_refs);
        API.vGPU_type_enabled_on_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "enabled_on_PGPUs" __set_refs);
        API.vGPU_type_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "VGPUs" __set_refs);
        API.vGPU_type_supported_on_GPU_groups = List.map String_to_DM.ref_GPU_group (List.assoc "supported_on_GPU_groups" __set_refs);
        API.vGPU_type_enabled_on_GPU_groups = List.map String_to_DM.ref_GPU_group (List.assoc "enabled_on_GPU_groups" __set_refs);
        API.vGPU_type_implementation = String_to_DM.vgpu_type_implementation(List.assoc "implementation" __regular_fields);
        API.vGPU_type_identifier = String_to_DM.string(List.assoc "identifier" __regular_fields);
        API.vGPU_type_experimental = String_to_DM.bool(List.assoc "experimental" __regular_fields);
        API.vGPU_type_compatible_types_in_vm = String_to_DM.ref_VGPU_type_set(List.assoc "compatible_types_in_vm" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vGPU_type_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vGPU_type_vendor_name = String_to_DM.string(List.assoc "vendor_name" __regular_fields);
        vGPU_type_model_name = String_to_DM.string(List.assoc "model_name" __regular_fields);
        vGPU_type_framebuffer_size = String_to_DM.int64(List.assoc "framebuffer_size" __regular_fields);
        vGPU_type_max_heads = String_to_DM.int64(List.assoc "max_heads" __regular_fields);
        vGPU_type_max_resolution_x = String_to_DM.int64(List.assoc "max_resolution_x" __regular_fields);
        vGPU_type_max_resolution_y = String_to_DM.int64(List.assoc "max_resolution_y" __regular_fields);
        vGPU_type_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        vGPU_type_supported_on_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "supported_on_PGPUs" __set_refs);
        vGPU_type_enabled_on_PGPUs = List.map String_to_DM.ref_PGPU (List.assoc "enabled_on_PGPUs" __set_refs);
        vGPU_type_VGPUs = List.map String_to_DM.ref_VGPU (List.assoc "VGPUs" __set_refs);
        vGPU_type_internal_config = String_to_DM.string_to_string_map(List.assoc "internal_config" __regular_fields);
        vGPU_type_supported_on_GPU_groups = List.map String_to_DM.ref_GPU_group (List.assoc "supported_on_GPU_groups" __set_refs);
        vGPU_type_enabled_on_GPU_groups = List.map String_to_DM.ref_GPU_group (List.assoc "enabled_on_GPU_groups" __set_refs);
        vGPU_type_implementation = String_to_DM.vgpu_type_implementation(List.assoc "implementation" __regular_fields);
        vGPU_type_identifier = String_to_DM.string(List.assoc "identifier" __regular_fields);
        vGPU_type_experimental = String_to_DM.bool(List.assoc "experimental" __regular_fields);
        vGPU_type_compatible_types_in_vm = String_to_DM.ref_VGPU_type_set(List.assoc "compatible_types_in_vm" __regular_fields);
        vGPU_type_compatible_types_on_pgpu = String_to_DM.ref_VGPU_type_set(List.assoc "compatible_types_on_pgpu" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VGPU_type" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VGPU_type" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VGPU_type" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VGPU_type_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VGPU_type"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vGPU_type_t (VGPU_type.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PVS_site = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_site" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_site" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PVS_site(DB.read_refs __t "PVS_site")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_site (DB.db_get_by_uuid __t "PVS_site" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~pVS_uuid ~cache_storage =
      let ref = DM_to_String.ref_PVS_site ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let pVS_uuid = DM_to_String.string pVS_uuid in
      let cache_storage = DM_to_String.ref_PVS_cache_storage_set cache_storage in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PVS_site" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("PVS_uuid", pVS_uuid); ("cache_storage", cache_storage) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PVS_site" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PVS_site (DB.db_get_by_name_label __t "PVS_site" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PVS_site" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PVS_site" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PVS_site" "name__description" self)
    (**  *)
    and get_PVS_uuid ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PVS_site" "PVS_uuid" self)
    (**  *)
    and get_cache_storage ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_cache_storage_set (DB.read_field __t "PVS_site" "cache_storage" self)
    (**  *)
    and get_servers ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_server_set (DB.read_field __t "PVS_site" "servers" self)
    (**  *)
    and get_proxies ~__context ~self =
      let self = DM_to_String.ref_PVS_site self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_proxy_set (DB.read_field __t "PVS_site" "proxies" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_site self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_site" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_site self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_site" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_site self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_site" self "name__description" value
    (**  *)
    and set_PVS_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_site self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_site" self "PVS_uuid" value
    (**  *)
    and set_cache_storage ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_site self in
      let value = DM_to_String.ref_PVS_cache_storage_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_site" self "cache_storage" value
    (**  *)
    and add_cache_storage ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_site self in
      let value = DM_to_String.ref_PVS_cache_storage value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PVS_site" "cache_storage" self AddSet
    (**  *)
    and remove_cache_storage ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_site self in
      let value = DM_to_String.ref_PVS_cache_storage value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PVS_site" "cache_storage" self RemoveSet
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pVS_site_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pVS_site_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.pVS_site_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.pVS_site_PVS_uuid = String_to_DM.string(List.assoc "PVS_uuid" __regular_fields);
        API.pVS_site_cache_storage = String_to_DM.ref_PVS_cache_storage_set(List.assoc "cache_storage" __regular_fields);
        API.pVS_site_servers = List.map String_to_DM.ref_PVS_server (List.assoc "servers" __set_refs);
        API.pVS_site_proxies = List.map String_to_DM.ref_PVS_proxy (List.assoc "proxies" __set_refs);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pVS_site_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pVS_site_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        pVS_site_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        pVS_site_PVS_uuid = String_to_DM.string(List.assoc "PVS_uuid" __regular_fields);
        pVS_site_cache_storage = String_to_DM.ref_PVS_cache_storage_set(List.assoc "cache_storage" __regular_fields);
        pVS_site_servers = List.map String_to_DM.ref_PVS_server (List.assoc "servers" __set_refs);
        pVS_site_proxies = List.map String_to_DM.ref_PVS_proxy (List.assoc "proxies" __set_refs);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PVS_site" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_site" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_site" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PVS_site_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PVS_site"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pVS_site_t (PVS_site.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PVS_server = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_server" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_server" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PVS_server(DB.read_refs __t "PVS_server")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_server (DB.db_get_by_uuid __t "PVS_server" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~addresses ~first_port ~last_port ~site =
      let ref = DM_to_String.ref_PVS_server ref in
      let uuid = DM_to_String.string uuid in
      let addresses = DM_to_String.string_set addresses in
      let first_port = DM_to_String.int64 first_port in
      let last_port = DM_to_String.int64 last_port in
      let site = DM_to_String.ref_PVS_site site in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PVS_server" [ ("uuid", uuid); ("addresses", addresses); ("first_port", first_port); ("last_port", last_port); ("site", site) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PVS_server" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PVS_server" "uuid" self)
    (**  *)
    and get_addresses ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "PVS_server" "addresses" self)
    (**  *)
    and get_first_port ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PVS_server" "first_port" self)
    (**  *)
    and get_last_port ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PVS_server" "last_port" self)
    (**  *)
    and get_site ~__context ~self =
      let self = DM_to_String.ref_PVS_server self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_site (DB.read_field __t "PVS_server" "site" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_server self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_server" self "uuid" value
    (**  *)
    and set_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_server self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_server" self "addresses" value
    (**  *)
    and add_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_server self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PVS_server" "addresses" self AddSet
    (**  *)
    and remove_addresses ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_server self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "PVS_server" "addresses" self RemoveSet
    (**  *)
    and set_first_port ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_server self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_server" self "first_port" value
    (**  *)
    and set_last_port ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_server self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_server" self "last_port" value
    (**  *)
    and set_site ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_server self in
      let value = DM_to_String.ref_PVS_site value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_server" self "site" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pVS_server_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pVS_server_addresses = String_to_DM.string_set(List.assoc "addresses" __regular_fields);
        API.pVS_server_first_port = String_to_DM.int64(List.assoc "first_port" __regular_fields);
        API.pVS_server_last_port = String_to_DM.int64(List.assoc "last_port" __regular_fields);
        API.pVS_server_site = String_to_DM.ref_PVS_site(List.assoc "site" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pVS_server_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pVS_server_addresses = String_to_DM.string_set(List.assoc "addresses" __regular_fields);
        pVS_server_first_port = String_to_DM.int64(List.assoc "first_port" __regular_fields);
        pVS_server_last_port = String_to_DM.int64(List.assoc "last_port" __regular_fields);
        pVS_server_site = String_to_DM.ref_PVS_site(List.assoc "site" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PVS_server" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_server" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_server" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PVS_server_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PVS_server"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pVS_server_t (PVS_server.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PVS_proxy = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_proxy" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_proxy" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PVS_proxy(DB.read_refs __t "PVS_proxy")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_proxy (DB.db_get_by_uuid __t "PVS_proxy" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~site ~vIF ~currently_attached ~status =
      let ref = DM_to_String.ref_PVS_proxy ref in
      let uuid = DM_to_String.string uuid in
      let site = DM_to_String.ref_PVS_site site in
      let vIF = DM_to_String.ref_VIF vIF in
      let currently_attached = DM_to_String.bool currently_attached in
      let status = DM_to_String.pvs_proxy_status status in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PVS_proxy" [ ("uuid", uuid); ("site", site); ("VIF", vIF); ("currently_attached", currently_attached); ("status", status) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PVS_proxy" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PVS_proxy" "uuid" self)
    (**  *)
    and get_site ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_site (DB.read_field __t "PVS_proxy" "site" self)
    (**  *)
    and get_VIF ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VIF (DB.read_field __t "PVS_proxy" "VIF" self)
    (**  *)
    and get_currently_attached ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PVS_proxy" "currently_attached" self)
    (**  *)
    and get_status ~__context ~self =
      let self = DM_to_String.ref_PVS_proxy self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.pvs_proxy_status (DB.read_field __t "PVS_proxy" "status" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_proxy self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_proxy" self "uuid" value
    (**  *)
    and set_site ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_proxy self in
      let value = DM_to_String.ref_PVS_site value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_proxy" self "site" value
    (**  *)
    and set_VIF ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_proxy self in
      let value = DM_to_String.ref_VIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_proxy" self "VIF" value
    (**  *)
    and set_currently_attached ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_proxy self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_proxy" self "currently_attached" value
    (**  *)
    and set_status ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_proxy self in
      let value = DM_to_String.pvs_proxy_status value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_proxy" self "status" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pVS_proxy_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pVS_proxy_site = String_to_DM.ref_PVS_site(List.assoc "site" __regular_fields);
        API.pVS_proxy_VIF = String_to_DM.ref_VIF(List.assoc "VIF" __regular_fields);
        API.pVS_proxy_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        API.pVS_proxy_status = String_to_DM.pvs_proxy_status(List.assoc "status" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pVS_proxy_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pVS_proxy_site = String_to_DM.ref_PVS_site(List.assoc "site" __regular_fields);
        pVS_proxy_VIF = String_to_DM.ref_VIF(List.assoc "VIF" __regular_fields);
        pVS_proxy_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
        pVS_proxy_status = String_to_DM.pvs_proxy_status(List.assoc "status" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PVS_proxy" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_proxy" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_proxy" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PVS_proxy_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PVS_proxy"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pVS_proxy_t (PVS_proxy.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PVS_cache_storage = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_cache_storage" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PVS_cache_storage" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PVS_cache_storage(DB.read_refs __t "PVS_cache_storage")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_cache_storage (DB.db_get_by_uuid __t "PVS_cache_storage" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~host ~sR ~site ~size ~vDI =
      let ref = DM_to_String.ref_PVS_cache_storage ref in
      let uuid = DM_to_String.string uuid in
      let host = DM_to_String.ref_host host in
      let sR = DM_to_String.ref_SR sR in
      let site = DM_to_String.ref_PVS_site site in
      let size = DM_to_String.int64 size in
      let vDI = DM_to_String.ref_VDI vDI in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PVS_cache_storage" [ ("uuid", uuid); ("host", host); ("SR", sR); ("site", site); ("size", size); ("VDI", vDI) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PVS_cache_storage" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PVS_cache_storage" "uuid" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "PVS_cache_storage" "host" self)
    (**  *)
    and get_SR ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SR (DB.read_field __t "PVS_cache_storage" "SR" self)
    (**  *)
    and get_site ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PVS_site (DB.read_field __t "PVS_cache_storage" "site" self)
    (**  *)
    and get_size ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "PVS_cache_storage" "size" self)
    (**  *)
    and get_VDI ~__context ~self =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VDI (DB.read_field __t "PVS_cache_storage" "VDI" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_cache_storage" self "uuid" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_cache_storage" self "host" value
    (**  *)
    and set_SR ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let value = DM_to_String.ref_SR value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_cache_storage" self "SR" value
    (**  *)
    and set_site ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let value = DM_to_String.ref_PVS_site value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_cache_storage" self "site" value
    (**  *)
    and set_size ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_cache_storage" self "size" value
    (**  *)
    and set_VDI ~__context ~self ~value =
      let self = DM_to_String.ref_PVS_cache_storage self in
      let value = DM_to_String.ref_VDI value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PVS_cache_storage" self "VDI" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pVS_cache_storage_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pVS_cache_storage_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.pVS_cache_storage_SR = String_to_DM.ref_SR(List.assoc "SR" __regular_fields);
        API.pVS_cache_storage_site = String_to_DM.ref_PVS_site(List.assoc "site" __regular_fields);
        API.pVS_cache_storage_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        API.pVS_cache_storage_VDI = String_to_DM.ref_VDI(List.assoc "VDI" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pVS_cache_storage_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pVS_cache_storage_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        pVS_cache_storage_SR = String_to_DM.ref_SR(List.assoc "SR" __regular_fields);
        pVS_cache_storage_site = String_to_DM.ref_PVS_site(List.assoc "site" __regular_fields);
        pVS_cache_storage_size = String_to_DM.int64(List.assoc "size" __regular_fields);
        pVS_cache_storage_VDI = String_to_DM.ref_VDI(List.assoc "VDI" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PVS_cache_storage" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_cache_storage" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PVS_cache_storage" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PVS_cache_storage_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PVS_cache_storage"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pVS_cache_storage_t (PVS_cache_storage.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Feature = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Feature" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Feature" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_Feature(DB.read_refs __t "Feature")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Feature (DB.db_get_by_uuid __t "Feature" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~enabled ~experimental ~version ~host =
      let ref = DM_to_String.ref_Feature ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let enabled = DM_to_String.bool enabled in
      let experimental = DM_to_String.bool experimental in
      let version = DM_to_String.string version in
      let host = DM_to_String.ref_host host in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "Feature" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("enabled", enabled); ("experimental", experimental); ("version", version); ("host", host) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "Feature" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_Feature (DB.db_get_by_name_label __t "Feature" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Feature" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Feature" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Feature" "name__description" self)
    (**  *)
    and get_enabled ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "Feature" "enabled" self)
    (**  *)
    and get_experimental ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "Feature" "experimental" self)
    (**  *)
    and get_version ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Feature" "version" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_Feature self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "Feature" "host" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_Feature self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Feature" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_Feature self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Feature" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_Feature self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Feature" self "name__description" value
    (**  *)
    and set_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_Feature self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Feature" self "enabled" value
    (**  *)
    and set_experimental ~__context ~self ~value =
      let self = DM_to_String.ref_Feature self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Feature" self "experimental" value
    (**  *)
    and set_version ~__context ~self ~value =
      let self = DM_to_String.ref_Feature self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Feature" self "version" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_Feature self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Feature" self "host" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.feature_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.feature_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.feature_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.feature_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        API.feature_experimental = String_to_DM.bool(List.assoc "experimental" __regular_fields);
        API.feature_version = String_to_DM.string(List.assoc "version" __regular_fields);
        API.feature_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        feature_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        feature_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        feature_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        feature_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        feature_experimental = String_to_DM.bool(List.assoc "experimental" __regular_fields);
        feature_version = String_to_DM.string(List.assoc "version" __regular_fields);
        feature_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "Feature" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Feature" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Feature" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Feature_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "Feature"
      (fun ~__context ~self -> (fun () -> API.rpc_of_feature_t (Feature.get_record ~__context ~self:(Ref.of_string self))))
  end
  module SDN_controller = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_SDN_controller self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "SDN_controller" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_SDN_controller self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "SDN_controller" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_SDN_controller(DB.read_refs __t "SDN_controller")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_SDN_controller (DB.db_get_by_uuid __t "SDN_controller" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~protocol ~address ~port =
      let ref = DM_to_String.ref_SDN_controller ref in
      let uuid = DM_to_String.string uuid in
      let protocol = DM_to_String.sdn_controller_protocol protocol in
      let address = DM_to_String.string address in
      let port = DM_to_String.int64 port in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "SDN_controller" [ ("uuid", uuid); ("protocol", protocol); ("address", address); ("port", port) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_SDN_controller self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "SDN_controller" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_SDN_controller self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SDN_controller" "uuid" self)
    (**  *)
    and get_protocol ~__context ~self =
      let self = DM_to_String.ref_SDN_controller self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.sdn_controller_protocol (DB.read_field __t "SDN_controller" "protocol" self)
    (**  *)
    and get_address ~__context ~self =
      let self = DM_to_String.ref_SDN_controller self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "SDN_controller" "address" self)
    (**  *)
    and get_port ~__context ~self =
      let self = DM_to_String.ref_SDN_controller self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.int64 (DB.read_field __t "SDN_controller" "port" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_SDN_controller self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SDN_controller" self "uuid" value
    (**  *)
    and set_protocol ~__context ~self ~value =
      let self = DM_to_String.ref_SDN_controller self in
      let value = DM_to_String.sdn_controller_protocol value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SDN_controller" self "protocol" value
    (**  *)
    and set_address ~__context ~self ~value =
      let self = DM_to_String.ref_SDN_controller self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SDN_controller" self "address" value
    (**  *)
    and set_port ~__context ~self ~value =
      let self = DM_to_String.ref_SDN_controller self in
      let value = DM_to_String.int64 value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "SDN_controller" self "port" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.sDN_controller_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.sDN_controller_protocol = String_to_DM.sdn_controller_protocol(List.assoc "protocol" __regular_fields);
        API.sDN_controller_address = String_to_DM.string(List.assoc "address" __regular_fields);
        API.sDN_controller_port = String_to_DM.int64(List.assoc "port" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        sDN_controller_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        sDN_controller_protocol = String_to_DM.sdn_controller_protocol(List.assoc "protocol" __regular_fields);
        sDN_controller_address = String_to_DM.string(List.assoc "address" __regular_fields);
        sDN_controller_port = String_to_DM.int64(List.assoc "port" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "SDN_controller" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "SDN_controller" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "SDN_controller" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module SDN_controller_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "SDN_controller"
      (fun ~__context ~self -> (fun () -> API.rpc_of_sDN_controller_t (SDN_controller.get_record ~__context ~self:(Ref.of_string self))))
  end
  module PUSB = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PUSB" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "PUSB" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_PUSB(DB.read_refs __t "PUSB")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PUSB (DB.db_get_by_uuid __t "PUSB" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~uSB_group ~host ~path ~vendor_id ~vendor_desc ~product_id ~product_desc ~serial ~version ~description ~passthrough_enabled ~other_config ~speed =
      let ref = DM_to_String.ref_PUSB ref in
      let uuid = DM_to_String.string uuid in
      let uSB_group = DM_to_String.ref_USB_group uSB_group in
      let host = DM_to_String.ref_host host in
      let path = DM_to_String.string path in
      let vendor_id = DM_to_String.string vendor_id in
      let vendor_desc = DM_to_String.string vendor_desc in
      let product_id = DM_to_String.string product_id in
      let product_desc = DM_to_String.string product_desc in
      let serial = DM_to_String.string serial in
      let version = DM_to_String.string version in
      let description = DM_to_String.string description in
      let passthrough_enabled = DM_to_String.bool passthrough_enabled in
      let other_config = DM_to_String.string_to_string_map other_config in
      let speed = DM_to_String.float speed in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "PUSB" [ ("uuid", uuid); ("USB_group", uSB_group); ("host", host); ("path", path); ("vendor_id", vendor_id); ("vendor_desc", vendor_desc); ("product_id", product_id); ("product_desc", product_desc); ("serial", serial); ("version", version); ("description", description); ("passthrough_enabled", passthrough_enabled); ("other_config", other_config); ("speed", speed) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "PUSB" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "uuid" self)
    (**  *)
    and get_USB_group ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_USB_group (DB.read_field __t "PUSB" "USB_group" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "PUSB" "host" self)
    (**  *)
    and get_path ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "path" self)
    (**  *)
    and get_vendor_id ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "vendor_id" self)
    (**  *)
    and get_vendor_desc ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "vendor_desc" self)
    (**  *)
    and get_product_id ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "product_id" self)
    (**  *)
    and get_product_desc ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "product_desc" self)
    (**  *)
    and get_serial ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "serial" self)
    (**  *)
    and get_version ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "version" self)
    (**  *)
    and get_description ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "PUSB" "description" self)
    (**  *)
    and get_passthrough_enabled ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "PUSB" "passthrough_enabled" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "PUSB" "other_config" self)
    (**  *)
    and get_speed ~__context ~self =
      let self = DM_to_String.ref_PUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "PUSB" "speed" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "uuid" value
    (**  *)
    and set_USB_group ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.ref_USB_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "USB_group" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "host" value
    (**  *)
    and set_path ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "path" value
    (**  *)
    and set_vendor_id ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "vendor_id" value
    (**  *)
    and set_vendor_desc ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "vendor_desc" value
    (**  *)
    and set_product_id ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "product_id" value
    (**  *)
    and set_product_desc ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "product_desc" value
    (**  *)
    and set_serial ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "serial" value
    (**  *)
    and set_version ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "version" value
    (**  *)
    and set_description ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "description" value
    (**  *)
    and set_passthrough_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "passthrough_enabled" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_PUSB self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "PUSB" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_PUSB self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "PUSB" "other_config" self RemoveMap
    (**  *)
    and set_speed ~__context ~self ~value =
      let self = DM_to_String.ref_PUSB self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "PUSB" self "speed" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.pUSB_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.pUSB_USB_group = String_to_DM.ref_USB_group(List.assoc "USB_group" __regular_fields);
        API.pUSB_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.pUSB_path = String_to_DM.string(List.assoc "path" __regular_fields);
        API.pUSB_vendor_id = String_to_DM.string(List.assoc "vendor_id" __regular_fields);
        API.pUSB_vendor_desc = String_to_DM.string(List.assoc "vendor_desc" __regular_fields);
        API.pUSB_product_id = String_to_DM.string(List.assoc "product_id" __regular_fields);
        API.pUSB_product_desc = String_to_DM.string(List.assoc "product_desc" __regular_fields);
        API.pUSB_serial = String_to_DM.string(List.assoc "serial" __regular_fields);
        API.pUSB_version = String_to_DM.string(List.assoc "version" __regular_fields);
        API.pUSB_description = String_to_DM.string(List.assoc "description" __regular_fields);
        API.pUSB_passthrough_enabled = String_to_DM.bool(List.assoc "passthrough_enabled" __regular_fields);
        API.pUSB_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.pUSB_speed = String_to_DM.float(List.assoc "speed" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        pUSB_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        pUSB_USB_group = String_to_DM.ref_USB_group(List.assoc "USB_group" __regular_fields);
        pUSB_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        pUSB_path = String_to_DM.string(List.assoc "path" __regular_fields);
        pUSB_vendor_id = String_to_DM.string(List.assoc "vendor_id" __regular_fields);
        pUSB_vendor_desc = String_to_DM.string(List.assoc "vendor_desc" __regular_fields);
        pUSB_product_id = String_to_DM.string(List.assoc "product_id" __regular_fields);
        pUSB_product_desc = String_to_DM.string(List.assoc "product_desc" __regular_fields);
        pUSB_serial = String_to_DM.string(List.assoc "serial" __regular_fields);
        pUSB_version = String_to_DM.string(List.assoc "version" __regular_fields);
        pUSB_description = String_to_DM.string(List.assoc "description" __regular_fields);
        pUSB_passthrough_enabled = String_to_DM.bool(List.assoc "passthrough_enabled" __regular_fields);
        pUSB_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        pUSB_speed = String_to_DM.float(List.assoc "speed" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "PUSB" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PUSB" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "PUSB" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module PUSB_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "PUSB"
      (fun ~__context ~self -> (fun () -> API.rpc_of_pUSB_t (PUSB.get_record ~__context ~self:(Ref.of_string self))))
  end
  module USB_group = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "USB_group" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "USB_group" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_USB_group(DB.read_refs __t "USB_group")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_USB_group (DB.db_get_by_uuid __t "USB_group" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~name_label ~name_description ~other_config =
      let ref = DM_to_String.ref_USB_group ref in
      let uuid = DM_to_String.string uuid in
      let name_label = DM_to_String.string name_label in
      let name_description = DM_to_String.string name_description in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "USB_group" [ ("uuid", uuid); ("name__label", name_label); ("name__description", name_description); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "USB_group" self
    (**  *)
    and get_by_name_label ~__context ~label =
      let label = DM_to_String.string label in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_USB_group (DB.db_get_by_name_label __t "USB_group" label)
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "USB_group" "uuid" self)
    (**  *)
    and get_name_label ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "USB_group" "name__label" self)
    (**  *)
    and get_name_description ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "USB_group" "name__description" self)
    (**  *)
    and get_PUSBs ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PUSB_set (DB.read_field __t "USB_group" "PUSBs" self)
    (**  *)
    and get_VUSBs ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VUSB_set (DB.read_field __t "USB_group" "VUSBs" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_USB_group self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "USB_group" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_USB_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "USB_group" self "uuid" value
    (**  *)
    and set_name_label ~__context ~self ~value =
      let self = DM_to_String.ref_USB_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "USB_group" self "name__label" value
    (**  *)
    and set_name_description ~__context ~self ~value =
      let self = DM_to_String.ref_USB_group self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "USB_group" self "name__description" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_USB_group self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "USB_group" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_USB_group self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "USB_group" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_USB_group self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "USB_group" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.uSB_group_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.uSB_group_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        API.uSB_group_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        API.uSB_group_PUSBs = List.map String_to_DM.ref_PUSB (List.assoc "PUSBs" __set_refs);
        API.uSB_group_VUSBs = List.map String_to_DM.ref_VUSB (List.assoc "VUSBs" __set_refs);
        API.uSB_group_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        uSB_group_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        uSB_group_name_label = String_to_DM.string(List.assoc "name__label" __regular_fields);
        uSB_group_name_description = String_to_DM.string(List.assoc "name__description" __regular_fields);
        uSB_group_PUSBs = List.map String_to_DM.ref_PUSB (List.assoc "PUSBs" __set_refs);
        uSB_group_VUSBs = List.map String_to_DM.ref_VUSB (List.assoc "VUSBs" __set_refs);
        uSB_group_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "USB_group" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "USB_group" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "USB_group" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module USB_group_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "USB_group"
      (fun ~__context ~self -> (fun () -> API.rpc_of_uSB_group_t (USB_group.get_record ~__context ~self:(Ref.of_string self))))
  end
  module VUSB = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VUSB" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "VUSB" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_VUSB(DB.read_refs __t "VUSB")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VUSB (DB.db_get_by_uuid __t "VUSB" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~allowed_operations ~current_operations ~vM ~uSB_group ~other_config ~currently_attached =
      let ref = DM_to_String.ref_VUSB ref in
      let uuid = DM_to_String.string uuid in
      let allowed_operations = DM_to_String.vusb_operations_set allowed_operations in
      let current_operations = DM_to_String.string_to_vusb_operations_map current_operations in
      let vM = DM_to_String.ref_VM vM in
      let uSB_group = DM_to_String.ref_USB_group uSB_group in
      let other_config = DM_to_String.string_to_string_map other_config in
      let currently_attached = DM_to_String.bool currently_attached in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "VUSB" [ ("uuid", uuid); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("VM", vM); ("USB_group", uSB_group); ("other_config", other_config); ("currently_attached", currently_attached) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "VUSB" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "VUSB" "uuid" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.vusb_operations_set (DB.read_field __t "VUSB" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_vusb_operations_map (DB.read_field __t "VUSB" "current_operations" self)
    (**  *)
    and get_VM ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_VM (DB.read_field __t "VUSB" "VM" self)
    (**  *)
    and get_USB_group ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_USB_group (DB.read_field __t "VUSB" "USB_group" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "VUSB" "other_config" self)
    (**  *)
    and get_currently_attached ~__context ~self =
      let self = DM_to_String.ref_VUSB self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "VUSB" "currently_attached" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VUSB" self "uuid" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.vusb_operations_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VUSB" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.vusb_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VUSB" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.vusb_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "VUSB" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.string_to_vusb_operations_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VUSB" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VUSB self in
      let key = DM_to_String.string key in
      let value = DM_to_String.vusb_operations value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VUSB" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_VUSB self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VUSB" "current_operations" self RemoveMap
    (**  *)
    and set_VM ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.ref_VM value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VUSB" self "VM" value
    (**  *)
    and set_USB_group ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.ref_USB_group value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VUSB" self "USB_group" value
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VUSB" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_VUSB self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "VUSB" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_VUSB self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "VUSB" "other_config" self RemoveMap
    (**  *)
    and set_currently_attached ~__context ~self ~value =
      let self = DM_to_String.ref_VUSB self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "VUSB" self "currently_attached" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.vUSB_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.vUSB_allowed_operations = String_to_DM.vusb_operations_set(List.assoc "allowed_operations" __regular_fields);
        API.vUSB_current_operations = String_to_DM.string_to_vusb_operations_map(List.assoc "current_operations" __regular_fields);
        API.vUSB_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        API.vUSB_USB_group = String_to_DM.ref_USB_group(List.assoc "USB_group" __regular_fields);
        API.vUSB_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        API.vUSB_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        vUSB_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        vUSB_allowed_operations = String_to_DM.vusb_operations_set(List.assoc "allowed_operations" __regular_fields);
        vUSB_current_operations = String_to_DM.string_to_vusb_operations_map(List.assoc "current_operations" __regular_fields);
        vUSB_VM = String_to_DM.ref_VM(List.assoc "VM" __regular_fields);
        vUSB_USB_group = String_to_DM.ref_USB_group(List.assoc "USB_group" __regular_fields);
        vUSB_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
        vUSB_currently_attached = String_to_DM.bool(List.assoc "currently_attached" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "VUSB" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VUSB" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "VUSB" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module VUSB_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "VUSB"
      (fun ~__context ~self -> (fun () -> API.rpc_of_vUSB_t (VUSB.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Cluster = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Cluster" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Cluster" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_Cluster(DB.read_refs __t "Cluster")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Cluster (DB.db_get_by_uuid __t "Cluster" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~pending_forget ~cluster_token ~cluster_stack ~allowed_operations ~current_operations ~pool_auto_join ~token_timeout ~token_timeout_coefficient ~cluster_config ~other_config =
      let ref = DM_to_String.ref_Cluster ref in
      let uuid = DM_to_String.string uuid in
      let pending_forget = DM_to_String.string_set pending_forget in
      let cluster_token = DM_to_String.string cluster_token in
      let cluster_stack = DM_to_String.string cluster_stack in
      let allowed_operations = DM_to_String.cluster_operation_set allowed_operations in
      let current_operations = DM_to_String.string_to_cluster_operation_map current_operations in
      let pool_auto_join = DM_to_String.bool pool_auto_join in
      let token_timeout = DM_to_String.float token_timeout in
      let token_timeout_coefficient = DM_to_String.float token_timeout_coefficient in
      let cluster_config = DM_to_String.string_to_string_map cluster_config in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "Cluster" [ ("uuid", uuid); ("pending_forget", pending_forget); ("cluster_token", cluster_token); ("cluster_stack", cluster_stack); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("pool_auto_join", pool_auto_join); ("token_timeout", token_timeout); ("token_timeout_coefficient", token_timeout_coefficient); ("cluster_config", cluster_config); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "Cluster" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Cluster" "uuid" self)
    (**  *)
    and get_cluster_hosts ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Cluster_host_set (DB.read_field __t "Cluster" "cluster_hosts" self)
    (**  *)
    and get_pending_forget ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_set (DB.read_field __t "Cluster" "pending_forget" self)
    (**  *)
    and get_cluster_token ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Cluster" "cluster_token" self)
    (**  *)
    and get_cluster_stack ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Cluster" "cluster_stack" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.cluster_operation_set (DB.read_field __t "Cluster" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_cluster_operation_map (DB.read_field __t "Cluster" "current_operations" self)
    (**  *)
    and get_pool_auto_join ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "Cluster" "pool_auto_join" self)
    (**  *)
    and get_token_timeout ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "Cluster" "token_timeout" self)
    (**  *)
    and get_token_timeout_coefficient ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.float (DB.read_field __t "Cluster" "token_timeout_coefficient" self)
    (**  *)
    and get_cluster_config ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "Cluster" "cluster_config" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_Cluster self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "Cluster" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "uuid" value
    (**  *)
    and set_pending_forget ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "pending_forget" value
    (**  *)
    and add_pending_forget ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "Cluster" "pending_forget" self AddSet
    (**  *)
    and remove_pending_forget ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "Cluster" "pending_forget" self RemoveSet
    (**  *)
    and set_cluster_token ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "cluster_token" value
    (**  *)
    and set_cluster_stack ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "cluster_stack" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.cluster_operation_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.cluster_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "Cluster" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.cluster_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "Cluster" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string_to_cluster_operation_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_Cluster self in
      let key = DM_to_String.string key in
      let value = DM_to_String.cluster_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "Cluster" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_Cluster self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "Cluster" "current_operations" self RemoveMap
    (**  *)
    and set_pool_auto_join ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "pool_auto_join" value
    (**  *)
    and set_token_timeout ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "token_timeout" value
    (**  *)
    and set_token_timeout_coefficient ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.float value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "token_timeout_coefficient" value
    (**  *)
    and set_cluster_config ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "cluster_config" value
    (**  *)
    and add_to_cluster_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_Cluster self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "Cluster" "cluster_config" self AddMapLegacy
    (**  *)
    and remove_from_cluster_config ~__context ~self ~key =
      let self = DM_to_String.ref_Cluster self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "Cluster" "cluster_config" self RemoveMap
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_Cluster self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "Cluster" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_Cluster self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "Cluster" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.cluster_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.cluster_cluster_hosts = List.map String_to_DM.ref_Cluster_host (List.assoc "cluster_hosts" __set_refs);
        API.cluster_pending_forget = String_to_DM.string_set(List.assoc "pending_forget" __regular_fields);
        API.cluster_cluster_token = String_to_DM.string(List.assoc "cluster_token" __regular_fields);
        API.cluster_cluster_stack = String_to_DM.string(List.assoc "cluster_stack" __regular_fields);
        API.cluster_allowed_operations = String_to_DM.cluster_operation_set(List.assoc "allowed_operations" __regular_fields);
        API.cluster_current_operations = String_to_DM.string_to_cluster_operation_map(List.assoc "current_operations" __regular_fields);
        API.cluster_pool_auto_join = String_to_DM.bool(List.assoc "pool_auto_join" __regular_fields);
        API.cluster_token_timeout = String_to_DM.float(List.assoc "token_timeout" __regular_fields);
        API.cluster_token_timeout_coefficient = String_to_DM.float(List.assoc "token_timeout_coefficient" __regular_fields);
        API.cluster_cluster_config = String_to_DM.string_to_string_map(List.assoc "cluster_config" __regular_fields);
        API.cluster_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        cluster_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        cluster_cluster_hosts = List.map String_to_DM.ref_Cluster_host (List.assoc "cluster_hosts" __set_refs);
        cluster_pending_forget = String_to_DM.string_set(List.assoc "pending_forget" __regular_fields);
        cluster_cluster_token = String_to_DM.string(List.assoc "cluster_token" __regular_fields);
        cluster_cluster_stack = String_to_DM.string(List.assoc "cluster_stack" __regular_fields);
        cluster_allowed_operations = String_to_DM.cluster_operation_set(List.assoc "allowed_operations" __regular_fields);
        cluster_current_operations = String_to_DM.string_to_cluster_operation_map(List.assoc "current_operations" __regular_fields);
        cluster_pool_auto_join = String_to_DM.bool(List.assoc "pool_auto_join" __regular_fields);
        cluster_token_timeout = String_to_DM.float(List.assoc "token_timeout" __regular_fields);
        cluster_token_timeout_coefficient = String_to_DM.float(List.assoc "token_timeout_coefficient" __regular_fields);
        cluster_cluster_config = String_to_DM.string_to_string_map(List.assoc "cluster_config" __regular_fields);
        cluster_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "Cluster" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Cluster" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Cluster" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Cluster_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "Cluster"
      (fun ~__context ~self -> (fun () -> API.rpc_of_cluster_t (Cluster.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Cluster_host = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Cluster_host" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Cluster_host" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_Cluster_host(DB.read_refs __t "Cluster_host")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Cluster_host (DB.db_get_by_uuid __t "Cluster_host" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~cluster ~host ~enabled ~pIF ~joined ~allowed_operations ~current_operations ~other_config =
      let ref = DM_to_String.ref_Cluster_host ref in
      let uuid = DM_to_String.string uuid in
      let cluster = DM_to_String.ref_Cluster cluster in
      let host = DM_to_String.ref_host host in
      let enabled = DM_to_String.bool enabled in
      let pIF = DM_to_String.ref_PIF pIF in
      let joined = DM_to_String.bool joined in
      let allowed_operations = DM_to_String.cluster_host_operation_set allowed_operations in
      let current_operations = DM_to_String.string_to_cluster_host_operation_map current_operations in
      let other_config = DM_to_String.string_to_string_map other_config in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "Cluster_host" [ ("uuid", uuid); ("cluster", cluster); ("host", host); ("enabled", enabled); ("PIF", pIF); ("joined", joined); ("allowed_operations", allowed_operations); ("current_operations", current_operations); ("other_config", other_config) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "Cluster_host" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Cluster_host" "uuid" self)
    (**  *)
    and get_cluster ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Cluster (DB.read_field __t "Cluster_host" "cluster" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "Cluster_host" "host" self)
    (**  *)
    and get_enabled ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "Cluster_host" "enabled" self)
    (**  *)
    and get_PIF ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_PIF (DB.read_field __t "Cluster_host" "PIF" self)
    (**  *)
    and get_joined ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.bool (DB.read_field __t "Cluster_host" "joined" self)
    (**  *)
    and get_allowed_operations ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.cluster_host_operation_set (DB.read_field __t "Cluster_host" "allowed_operations" self)
    (**  *)
    and get_current_operations ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_cluster_host_operation_map (DB.read_field __t "Cluster_host" "current_operations" self)
    (**  *)
    and get_other_config ~__context ~self =
      let self = DM_to_String.ref_Cluster_host self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string_to_string_map (DB.read_field __t "Cluster_host" "other_config" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "uuid" value
    (**  *)
    and set_cluster ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.ref_Cluster value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "cluster" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "host" value
    (**  *)
    and set_enabled ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "enabled" value
    (**  *)
    and set_PIF ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.ref_PIF value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "PIF" value
    (**  *)
    and set_joined ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.bool value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "joined" value
    (**  *)
    and set_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.cluster_host_operation_set value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "allowed_operations" value
    (**  *)
    and add_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.cluster_host_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "Cluster_host" "allowed_operations" self AddSet
    (**  *)
    and remove_allowed_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.cluster_host_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (value,"") "Cluster_host" "allowed_operations" self RemoveSet
    (**  *)
    and set_current_operations ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.string_to_cluster_host_operation_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "current_operations" value
    (**  *)
    and add_to_current_operations ~__context ~self ~key ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.cluster_host_operation value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "Cluster_host" "current_operations" self AddMapLegacy
    (**  *)
    and remove_from_current_operations ~__context ~self ~key =
      let self = DM_to_String.ref_Cluster_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "Cluster_host" "current_operations" self RemoveMap
    (**  *)
    and set_other_config ~__context ~self ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let value = DM_to_String.string_to_string_map value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Cluster_host" self "other_config" value
    (**  *)
    and add_to_other_config ~__context ~self ~key ~value =
      let self = DM_to_String.ref_Cluster_host self in
      let key = DM_to_String.string key in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,value) "Cluster_host" "other_config" self AddMapLegacy
    (**  *)
    and remove_from_other_config ~__context ~self ~key =
      let self = DM_to_String.ref_Cluster_host self in
      let key = DM_to_String.string key in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.process_structured_field __t (key,"") "Cluster_host" "other_config" self RemoveMap
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.cluster_host_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.cluster_host_cluster = String_to_DM.ref_Cluster(List.assoc "cluster" __regular_fields);
        API.cluster_host_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.cluster_host_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        API.cluster_host_PIF = String_to_DM.ref_PIF(List.assoc "PIF" __regular_fields);
        API.cluster_host_joined = String_to_DM.bool(List.assoc "joined" __regular_fields);
        API.cluster_host_allowed_operations = String_to_DM.cluster_host_operation_set(List.assoc "allowed_operations" __regular_fields);
        API.cluster_host_current_operations = String_to_DM.string_to_cluster_host_operation_map(List.assoc "current_operations" __regular_fields);
        API.cluster_host_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        cluster_host_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        cluster_host_cluster = String_to_DM.ref_Cluster(List.assoc "cluster" __regular_fields);
        cluster_host_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        cluster_host_enabled = String_to_DM.bool(List.assoc "enabled" __regular_fields);
        cluster_host_PIF = String_to_DM.ref_PIF(List.assoc "PIF" __regular_fields);
        cluster_host_joined = String_to_DM.bool(List.assoc "joined" __regular_fields);
        cluster_host_allowed_operations = String_to_DM.cluster_host_operation_set(List.assoc "allowed_operations" __regular_fields);
        cluster_host_current_operations = String_to_DM.string_to_cluster_host_operation_map(List.assoc "current_operations" __regular_fields);
        cluster_host_other_config = String_to_DM.string_to_string_map(List.assoc "other_config" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "Cluster_host" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Cluster_host" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Cluster_host" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Cluster_host_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "Cluster_host"
      (fun ~__context ~self -> (fun () -> API.rpc_of_cluster_host_t (Cluster_host.get_record ~__context ~self:(Ref.of_string self))))
  end
  module Certificate = struct
    let rec __unused () = ()
    (**  *)
    and get_record ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Certificate" self in
get_record' ~__regular_fields ~__set_refs
    (**  *)
    and get_record_internal ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let (__regular_fields, __set_refs) = DB.read_record __t "Certificate" self in
get_record_internal' ~__regular_fields ~__set_refs
    (**  *)
    and get_all ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      List.map String_to_DM.ref_Certificate(DB.read_refs __t "Certificate")
    (**  *)
    and get_by_uuid ~__context ~uuid =
      let uuid = DM_to_String.string uuid in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_Certificate (DB.db_get_by_uuid __t "Certificate" uuid)
    (**  *)
    and create ~__context ~ref ~uuid ~host ~not_before ~not_after ~fingerprint =
      let ref = DM_to_String.ref_Certificate ref in
      let uuid = DM_to_String.string uuid in
      let host = DM_to_String.ref_host host in
      let not_before = DM_to_String.datetime not_before in
      let not_after = DM_to_String.datetime not_after in
      let fingerprint = DM_to_String.string fingerprint in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.create_row __t "Certificate" [ ("uuid", uuid); ("host", host); ("not_before", not_before); ("not_after", not_after); ("fingerprint", fingerprint) ] ref
    (**  *)
    and destroy ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.delete_row __t "Certificate" self
    (**  *)
    and get_uuid ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Certificate" "uuid" self)
    (**  *)
    and get_host ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.ref_host (DB.read_field __t "Certificate" "host" self)
    (**  *)
    and get_not_before ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "Certificate" "not_before" self)
    (**  *)
    and get_not_after ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.datetime (DB.read_field __t "Certificate" "not_after" self)
    (**  *)
    and get_fingerprint ~__context ~self =
      let self = DM_to_String.ref_Certificate self in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      String_to_DM.string (DB.read_field __t "Certificate" "fingerprint" self)
    (**  *)
    and set_uuid ~__context ~self ~value =
      let self = DM_to_String.ref_Certificate self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Certificate" self "uuid" value
    (**  *)
    and set_host ~__context ~self ~value =
      let self = DM_to_String.ref_Certificate self in
      let value = DM_to_String.ref_host value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Certificate" self "host" value
    (**  *)
    and set_not_before ~__context ~self ~value =
      let self = DM_to_String.ref_Certificate self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Certificate" self "not_before" value
    (**  *)
    and set_not_after ~__context ~self ~value =
      let self = DM_to_String.ref_Certificate self in
      let value = DM_to_String.datetime value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Certificate" self "not_after" value
    (**  *)
    and set_fingerprint ~__context ~self ~value =
      let self = DM_to_String.ref_Certificate self in
      let value = DM_to_String.string value in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      DB.write_field __t "Certificate" self "fingerprint" value
    (**  *)
    and get_all_records_where ~__context ~expr =
      let expr = DM_to_String.string expr in
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter.expr_of_string expr in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_all_records ~__context =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let expr' = Db_filter_types.True in
get_records_where ~__context ~expr:expr'
    (**  *)
    and get_record' ~__regular_fields ~__set_refs =
      {
        API.certificate_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        API.certificate_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        API.certificate_not_before = String_to_DM.datetime(List.assoc "not_before" __regular_fields);
        API.certificate_not_after = String_to_DM.datetime(List.assoc "not_after" __regular_fields);
        API.certificate_fingerprint = String_to_DM.string(List.assoc "fingerprint" __regular_fields);
    }
    (**  *)
    and get_record_internal' ~__regular_fields ~__set_refs =
      {
        certificate_uuid = String_to_DM.string(List.assoc "uuid" __regular_fields);
        certificate_host = String_to_DM.ref_host(List.assoc "host" __regular_fields);
        certificate_not_before = String_to_DM.datetime(List.assoc "not_before" __regular_fields);
        certificate_not_after = String_to_DM.datetime(List.assoc "not_after" __regular_fields);
        certificate_fingerprint = String_to_DM.string(List.assoc "fingerprint" __regular_fields);
    }
    (**  *)
    and get_refs_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let refs = (DB.find_refs_with_filter __t "Certificate" expr) in
      List.map Ref.of_string refs
    (**  *)
    and get_internal_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Certificate" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record_internal' __regular_fields __set_refs) records
    (**  *)
    and get_records_where ~__context ~expr =
      let __t = Context.database_of __context in
      let module DB = (val (Db_cache.get __t) : Db_interface.DB_ACCESS) in
      let records = DB.read_records_where __t "Certificate" expr in
      List.map (fun (ref,(__regular_fields,__set_refs)) -> Ref.of_string ref, get_record' __regular_fields __set_refs) records
  end
  module Certificate_init = struct
    (**  *)
    let _  =
      Hashtbl.add Eventgen.get_record_table "Certificate"
      (fun ~__context ~self -> (fun () -> API.rpc_of_certificate_t (Certificate.get_record ~__context ~self:(Ref.of_string self))))
  end

end

module Db_exists = struct

  (**  *)
  let _Session ~__context ~self =
    try ignore(DB_Action.Session.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Subject ~__context ~self =
    try ignore(DB_Action.Subject.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Role ~__context ~self =
    try ignore(DB_Action.Role.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Task ~__context ~self =
    try ignore(DB_Action.Task.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Pool ~__context ~self =
    try ignore(DB_Action.Pool.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Pool_patch ~__context ~self =
    try ignore(DB_Action.Pool_patch.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Pool_update ~__context ~self =
    try ignore(DB_Action.Pool_update.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VM ~__context ~self =
    try ignore(DB_Action.VM.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VM_metrics ~__context ~self =
    try ignore(DB_Action.VM_metrics.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VM_guest_metrics ~__context ~self =
    try ignore(DB_Action.VM_guest_metrics.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VMPP ~__context ~self =
    try ignore(DB_Action.VMPP.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VMSS ~__context ~self =
    try ignore(DB_Action.VMSS.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VM_appliance ~__context ~self =
    try ignore(DB_Action.VM_appliance.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _DR_task ~__context ~self =
    try ignore(DB_Action.DR_task.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Host ~__context ~self =
    try ignore(DB_Action.Host.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Host_crashdump ~__context ~self =
    try ignore(DB_Action.Host_crashdump.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Host_patch ~__context ~self =
    try ignore(DB_Action.Host_patch.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Host_metrics ~__context ~self =
    try ignore(DB_Action.Host_metrics.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Host_cpu ~__context ~self =
    try ignore(DB_Action.Host_cpu.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Network ~__context ~self =
    try ignore(DB_Action.Network.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VIF ~__context ~self =
    try ignore(DB_Action.VIF.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VIF_metrics ~__context ~self =
    try ignore(DB_Action.VIF_metrics.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PIF ~__context ~self =
    try ignore(DB_Action.PIF.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PIF_metrics ~__context ~self =
    try ignore(DB_Action.PIF_metrics.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Bond ~__context ~self =
    try ignore(DB_Action.Bond.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VLAN ~__context ~self =
    try ignore(DB_Action.VLAN.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _SM ~__context ~self =
    try ignore(DB_Action.SM.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _SR ~__context ~self =
    try ignore(DB_Action.SR.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _LVHD ~__context ~self =
    try ignore(DB_Action.LVHD.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VDI ~__context ~self =
    try ignore(DB_Action.VDI.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VBD ~__context ~self =
    try ignore(DB_Action.VBD.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VBD_metrics ~__context ~self =
    try ignore(DB_Action.VBD_metrics.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PBD ~__context ~self =
    try ignore(DB_Action.PBD.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Crashdump ~__context ~self =
    try ignore(DB_Action.Crashdump.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VTPM ~__context ~self =
    try ignore(DB_Action.VTPM.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Console ~__context ~self =
    try ignore(DB_Action.Console.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _User ~__context ~self =
    try ignore(DB_Action.User.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Blob ~__context ~self =
    try ignore(DB_Action.Blob.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Secret ~__context ~self =
    try ignore(DB_Action.Secret.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Tunnel ~__context ~self =
    try ignore(DB_Action.Tunnel.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Network_sriov ~__context ~self =
    try ignore(DB_Action.Network_sriov.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PCI ~__context ~self =
    try ignore(DB_Action.PCI.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PGPU ~__context ~self =
    try ignore(DB_Action.PGPU.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _GPU_group ~__context ~self =
    try ignore(DB_Action.GPU_group.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VGPU ~__context ~self =
    try ignore(DB_Action.VGPU.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VGPU_type ~__context ~self =
    try ignore(DB_Action.VGPU_type.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PVS_site ~__context ~self =
    try ignore(DB_Action.PVS_site.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PVS_server ~__context ~self =
    try ignore(DB_Action.PVS_server.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PVS_proxy ~__context ~self =
    try ignore(DB_Action.PVS_proxy.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PVS_cache_storage ~__context ~self =
    try ignore(DB_Action.PVS_cache_storage.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Feature ~__context ~self =
    try ignore(DB_Action.Feature.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _SDN_controller ~__context ~self =
    try ignore(DB_Action.SDN_controller.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _PUSB ~__context ~self =
    try ignore(DB_Action.PUSB.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _USB_group ~__context ~self =
    try ignore(DB_Action.USB_group.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _VUSB ~__context ~self =
    try ignore(DB_Action.VUSB.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Cluster ~__context ~self =
    try ignore(DB_Action.Cluster.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Cluster_host ~__context ~self =
    try ignore(DB_Action.Cluster_host.get_record_internal ~__context ~self); true with _ -> false
  (**  *)
  let _Certificate ~__context ~self =
    try ignore(DB_Action.Certificate.get_record_internal ~__context ~self); true with _ -> false

end

module Db_check = struct

  let runcheck cls row col fn = 
    Printf.printf "Checking %s %s.%s: " (Ref.string_of row) cls col;
    if fn ()
    then (print_endline "OK"; true)
    else (print_endline "FAILED"; false)
  (**  *)
  let _Session ~__context ~self =
    let _r = DB_Action.Session.get_record_internal ~__context ~self in
    (runcheck "session" self "this_host" (fun () -> Db_exists._Host ~__context ~self:_r.session_this_host)) &&
     (runcheck "session" self "this_user" (fun () -> Db_exists._User ~__context ~self:_r.session_this_user)) &&
     (runcheck "session" self "subject" (fun () -> Db_exists._Subject ~__context ~self:_r.session_subject)) &&
     (runcheck "session" self "parent" (fun () -> Db_exists._Session ~__context ~self:_r.session_parent))
  (**  *)
  let _Subject ~__context ~self =
    true
  (**  *)
  let _Role ~__context ~self =
    true
  (**  *)
  let _Task ~__context ~self =
    let _r = DB_Action.Task.get_record_internal ~__context ~self in
    (runcheck "task" self "session" (fun () -> Db_exists._Session ~__context ~self:_r.task_session)) &&
     (runcheck "task" self "resident_on" (fun () -> Db_exists._Host ~__context ~self:_r.task_resident_on)) &&
     (runcheck "task" self "forwarded_to" (fun () -> Db_exists._Host ~__context ~self:_r.task_forwarded_to)) &&
     (runcheck "task" self "subtask_of" (fun () -> Db_exists._Task ~__context ~self:_r.task_subtask_of))
  (**  *)
  let _Pool ~__context ~self =
    let _r = DB_Action.Pool.get_record_internal ~__context ~self in
    (runcheck "pool" self "master" (fun () -> Db_exists._Host ~__context ~self:_r.pool_master)) &&
     (runcheck "pool" self "default_SR" (fun () -> Db_exists._SR ~__context ~self:_r.pool_default_SR)) &&
     (runcheck "pool" self "suspend_image_SR" (fun () -> Db_exists._SR ~__context ~self:_r.pool_suspend_image_SR)) &&
     (runcheck "pool" self "crash_dump_SR" (fun () -> Db_exists._SR ~__context ~self:_r.pool_crash_dump_SR)) &&
     (runcheck "pool" self "wlb_password" (fun () -> Db_exists._Secret ~__context ~self:_r.pool_wlb_password)) &&
     (runcheck "pool" self "redo_log_vdi" (fun () -> Db_exists._VDI ~__context ~self:_r.pool_redo_log_vdi))
  (**  *)
  let _Pool_patch ~__context ~self =
    let _r = DB_Action.Pool_patch.get_record_internal ~__context ~self in
    (runcheck "pool_patch" self "pool_update" (fun () -> Db_exists._Pool_update ~__context ~self:_r.pool_patch_pool_update))
  (**  *)
  let _Pool_update ~__context ~self =
    let _r = DB_Action.Pool_update.get_record_internal ~__context ~self in
    (runcheck "pool_update" self "vdi" (fun () -> Db_exists._VDI ~__context ~self:_r.pool_update_vdi))
  (**  *)
  let _VM ~__context ~self =
    let _r = DB_Action.VM.get_record_internal ~__context ~self in
    (runcheck "VM" self "suspend_VDI" (fun () -> Db_exists._VDI ~__context ~self:_r.vM_suspend_VDI)) &&
     (runcheck "VM" self "resident_on" (fun () -> Db_exists._Host ~__context ~self:_r.vM_resident_on)) &&
     (runcheck "VM" self "scheduled_to_be_resident_on" (fun () -> Db_exists._Host ~__context ~self:_r.vM_scheduled_to_be_resident_on)) &&
     (runcheck "VM" self "affinity" (fun () -> Db_exists._Host ~__context ~self:_r.vM_affinity)) &&
     (runcheck "VM" self "metrics" (fun () -> Db_exists._VM_metrics ~__context ~self:_r.vM_metrics)) &&
     (runcheck "VM" self "guest_metrics" (fun () -> Db_exists._VM_guest_metrics ~__context ~self:_r.vM_guest_metrics)) &&
     (runcheck "VM" self "snapshot_of" (fun () -> Db_exists._VM ~__context ~self:_r.vM_snapshot_of)) &&
     (runcheck "VM" self "parent" (fun () -> Db_exists._VM ~__context ~self:_r.vM_parent)) &&
     (runcheck "VM" self "protection_policy" (fun () -> Db_exists._VMPP ~__context ~self:_r.vM_protection_policy)) &&
     (runcheck "VM" self "snapshot_schedule" (fun () -> Db_exists._VMSS ~__context ~self:_r.vM_snapshot_schedule)) &&
     (runcheck "VM" self "appliance" (fun () -> Db_exists._VM_appliance ~__context ~self:_r.vM_appliance)) &&
     (runcheck "VM" self "suspend_SR" (fun () -> Db_exists._SR ~__context ~self:_r.vM_suspend_SR))
  (**  *)
  let _VM_metrics ~__context ~self =
    true
  (**  *)
  let _VM_guest_metrics ~__context ~self =
    true
  (**  *)
  let _VMPP ~__context ~self =
    true
  (**  *)
  let _VMSS ~__context ~self =
    true
  (**  *)
  let _VM_appliance ~__context ~self =
    true
  (**  *)
  let _DR_task ~__context ~self =
    true
  (**  *)
  let _Host ~__context ~self =
    let _r = DB_Action.Host.get_record_internal ~__context ~self in
    (runcheck "host" self "suspend_image_sr" (fun () -> Db_exists._SR ~__context ~self:_r.host_suspend_image_sr)) &&
     (runcheck "host" self "crash_dump_sr" (fun () -> Db_exists._SR ~__context ~self:_r.host_crash_dump_sr)) &&
     (runcheck "host" self "metrics" (fun () -> Db_exists._Host_metrics ~__context ~self:_r.host_metrics)) &&
     (runcheck "host" self "local_cache_sr" (fun () -> Db_exists._SR ~__context ~self:_r.host_local_cache_sr)) &&
     (runcheck "host" self "control_domain" (fun () -> Db_exists._VM ~__context ~self:_r.host_control_domain))
  (**  *)
  let _Host_crashdump ~__context ~self =
    let _r = DB_Action.Host_crashdump.get_record_internal ~__context ~self in
    (runcheck "host_crashdump" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.host_crashdump_host))
  (**  *)
  let _Host_patch ~__context ~self =
    let _r = DB_Action.Host_patch.get_record_internal ~__context ~self in
    (runcheck "host_patch" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.host_patch_host)) &&
     (runcheck "host_patch" self "pool_patch" (fun () -> Db_exists._Pool_patch ~__context ~self:_r.host_patch_pool_patch))
  (**  *)
  let _Host_metrics ~__context ~self =
    true
  (**  *)
  let _Host_cpu ~__context ~self =
    let _r = DB_Action.Host_cpu.get_record_internal ~__context ~self in
    (runcheck "host_cpu" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.host_cpu_host))
  (**  *)
  let _Network ~__context ~self =
    true
  (**  *)
  let _VIF ~__context ~self =
    let _r = DB_Action.VIF.get_record_internal ~__context ~self in
    (runcheck "VIF" self "network" (fun () -> Db_exists._Network ~__context ~self:_r.vIF_network)) &&
     (runcheck "VIF" self "VM" (fun () -> Db_exists._VM ~__context ~self:_r.vIF_VM)) &&
     (runcheck "VIF" self "metrics" (fun () -> Db_exists._VIF_metrics ~__context ~self:_r.vIF_metrics)) &&
     (runcheck "VIF" self "reserved_pci" (fun () -> Db_exists._PCI ~__context ~self:_r.vIF_reserved_pci))
  (**  *)
  let _VIF_metrics ~__context ~self =
    true
  (**  *)
  let _PIF ~__context ~self =
    let _r = DB_Action.PIF.get_record_internal ~__context ~self in
    (runcheck "PIF" self "network" (fun () -> Db_exists._Network ~__context ~self:_r.pIF_network)) &&
     (runcheck "PIF" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.pIF_host)) &&
     (runcheck "PIF" self "metrics" (fun () -> Db_exists._PIF_metrics ~__context ~self:_r.pIF_metrics)) &&
     (runcheck "PIF" self "bond_slave_of" (fun () -> Db_exists._Bond ~__context ~self:_r.pIF_bond_slave_of)) &&
     (runcheck "PIF" self "VLAN_master_of" (fun () -> Db_exists._VLAN ~__context ~self:_r.pIF_VLAN_master_of)) &&
     (runcheck "PIF" self "PCI" (fun () -> Db_exists._PCI ~__context ~self:_r.pIF_PCI))
  (**  *)
  let _PIF_metrics ~__context ~self =
    true
  (**  *)
  let _Bond ~__context ~self =
    let _r = DB_Action.Bond.get_record_internal ~__context ~self in
    (runcheck "Bond" self "master" (fun () -> Db_exists._PIF ~__context ~self:_r.bond_master)) &&
     (runcheck "Bond" self "primary_slave" (fun () -> Db_exists._PIF ~__context ~self:_r.bond_primary_slave))
  (**  *)
  let _VLAN ~__context ~self =
    let _r = DB_Action.VLAN.get_record_internal ~__context ~self in
    (runcheck "VLAN" self "tagged_PIF" (fun () -> Db_exists._PIF ~__context ~self:_r.vLAN_tagged_PIF)) &&
     (runcheck "VLAN" self "untagged_PIF" (fun () -> Db_exists._PIF ~__context ~self:_r.vLAN_untagged_PIF))
  (**  *)
  let _SM ~__context ~self =
    true
  (**  *)
  let _SR ~__context ~self =
    let _r = DB_Action.SR.get_record_internal ~__context ~self in
    (runcheck "SR" self "introduced_by" (fun () -> Db_exists._DR_task ~__context ~self:_r.sR_introduced_by))
  (**  *)
  let _LVHD ~__context ~self =
    true
  (**  *)
  let _VDI ~__context ~self =
    let _r = DB_Action.VDI.get_record_internal ~__context ~self in
    (runcheck "VDI" self "SR" (fun () -> Db_exists._SR ~__context ~self:_r.vDI_SR)) &&
     (runcheck "VDI" self "parent" (fun () -> Db_exists._VDI ~__context ~self:_r.vDI_parent)) &&
     (runcheck "VDI" self "snapshot_of" (fun () -> Db_exists._VDI ~__context ~self:_r.vDI_snapshot_of)) &&
     (runcheck "VDI" self "metadata_of_pool" (fun () -> Db_exists._Pool ~__context ~self:_r.vDI_metadata_of_pool))
  (**  *)
  let _VBD ~__context ~self =
    let _r = DB_Action.VBD.get_record_internal ~__context ~self in
    (runcheck "VBD" self "VM" (fun () -> Db_exists._VM ~__context ~self:_r.vBD_VM)) &&
     (runcheck "VBD" self "VDI" (fun () -> Db_exists._VDI ~__context ~self:_r.vBD_VDI)) &&
     (runcheck "VBD" self "metrics" (fun () -> Db_exists._VBD_metrics ~__context ~self:_r.vBD_metrics))
  (**  *)
  let _VBD_metrics ~__context ~self =
    true
  (**  *)
  let _PBD ~__context ~self =
    let _r = DB_Action.PBD.get_record_internal ~__context ~self in
    (runcheck "PBD" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.pBD_host)) &&
     (runcheck "PBD" self "SR" (fun () -> Db_exists._SR ~__context ~self:_r.pBD_SR))
  (**  *)
  let _Crashdump ~__context ~self =
    let _r = DB_Action.Crashdump.get_record_internal ~__context ~self in
    (runcheck "crashdump" self "VM" (fun () -> Db_exists._VM ~__context ~self:_r.crashdump_VM)) &&
     (runcheck "crashdump" self "VDI" (fun () -> Db_exists._VDI ~__context ~self:_r.crashdump_VDI))
  (**  *)
  let _VTPM ~__context ~self =
    let _r = DB_Action.VTPM.get_record_internal ~__context ~self in
    (runcheck "VTPM" self "VM" (fun () -> Db_exists._VM ~__context ~self:_r.vTPM_VM)) &&
     (runcheck "VTPM" self "backend" (fun () -> Db_exists._VM ~__context ~self:_r.vTPM_backend))
  (**  *)
  let _Console ~__context ~self =
    let _r = DB_Action.Console.get_record_internal ~__context ~self in
    (runcheck "console" self "VM" (fun () -> Db_exists._VM ~__context ~self:_r.console_VM))
  (**  *)
  let _User ~__context ~self =
    true
  (**  *)
  let _Blob ~__context ~self =
    true
  (**  *)
  let _Secret ~__context ~self =
    true
  (**  *)
  let _Tunnel ~__context ~self =
    let _r = DB_Action.Tunnel.get_record_internal ~__context ~self in
    (runcheck "tunnel" self "access_PIF" (fun () -> Db_exists._PIF ~__context ~self:_r.tunnel_access_PIF)) &&
     (runcheck "tunnel" self "transport_PIF" (fun () -> Db_exists._PIF ~__context ~self:_r.tunnel_transport_PIF))
  (**  *)
  let _Network_sriov ~__context ~self =
    let _r = DB_Action.Network_sriov.get_record_internal ~__context ~self in
    (runcheck "network_sriov" self "physical_PIF" (fun () -> Db_exists._PIF ~__context ~self:_r.network_sriov_physical_PIF)) &&
     (runcheck "network_sriov" self "logical_PIF" (fun () -> Db_exists._PIF ~__context ~self:_r.network_sriov_logical_PIF))
  (**  *)
  let _PCI ~__context ~self =
    let _r = DB_Action.PCI.get_record_internal ~__context ~self in
    (runcheck "PCI" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.pCI_host)) &&
     (runcheck "PCI" self "physical_function" (fun () -> Db_exists._PCI ~__context ~self:_r.pCI_physical_function)) &&
     (runcheck "PCI" self "scheduled_to_be_attached_to" (fun () -> Db_exists._VM ~__context ~self:_r.pCI_scheduled_to_be_attached_to))
  (**  *)
  let _PGPU ~__context ~self =
    let _r = DB_Action.PGPU.get_record_internal ~__context ~self in
    (runcheck "PGPU" self "PCI" (fun () -> Db_exists._PCI ~__context ~self:_r.pGPU_PCI)) &&
     (runcheck "PGPU" self "GPU_group" (fun () -> Db_exists._GPU_group ~__context ~self:_r.pGPU_GPU_group)) &&
     (runcheck "PGPU" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.pGPU_host))
  (**  *)
  let _GPU_group ~__context ~self =
    true
  (**  *)
  let _VGPU ~__context ~self =
    let _r = DB_Action.VGPU.get_record_internal ~__context ~self in
    (runcheck "VGPU" self "VM" (fun () -> Db_exists._VM ~__context ~self:_r.vGPU_VM)) &&
     (runcheck "VGPU" self "GPU_group" (fun () -> Db_exists._GPU_group ~__context ~self:_r.vGPU_GPU_group)) &&
     (runcheck "VGPU" self "type" (fun () -> Db_exists._VGPU_type ~__context ~self:_r.vGPU_type)) &&
     (runcheck "VGPU" self "resident_on" (fun () -> Db_exists._PGPU ~__context ~self:_r.vGPU_resident_on)) &&
     (runcheck "VGPU" self "scheduled_to_be_resident_on" (fun () -> Db_exists._PGPU ~__context ~self:_r.vGPU_scheduled_to_be_resident_on)) &&
     (runcheck "VGPU" self "PCI" (fun () -> Db_exists._PCI ~__context ~self:_r.vGPU_PCI))
  (**  *)
  let _VGPU_type ~__context ~self =
    true
  (**  *)
  let _PVS_site ~__context ~self =
    true
  (**  *)
  let _PVS_server ~__context ~self =
    let _r = DB_Action.PVS_server.get_record_internal ~__context ~self in
    (runcheck "PVS_server" self "site" (fun () -> Db_exists._PVS_site ~__context ~self:_r.pVS_server_site))
  (**  *)
  let _PVS_proxy ~__context ~self =
    let _r = DB_Action.PVS_proxy.get_record_internal ~__context ~self in
    (runcheck "PVS_proxy" self "site" (fun () -> Db_exists._PVS_site ~__context ~self:_r.pVS_proxy_site)) &&
     (runcheck "PVS_proxy" self "VIF" (fun () -> Db_exists._VIF ~__context ~self:_r.pVS_proxy_VIF))
  (**  *)
  let _PVS_cache_storage ~__context ~self =
    let _r = DB_Action.PVS_cache_storage.get_record_internal ~__context ~self in
    (runcheck "PVS_cache_storage" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.pVS_cache_storage_host)) &&
     (runcheck "PVS_cache_storage" self "SR" (fun () -> Db_exists._SR ~__context ~self:_r.pVS_cache_storage_SR)) &&
     (runcheck "PVS_cache_storage" self "site" (fun () -> Db_exists._PVS_site ~__context ~self:_r.pVS_cache_storage_site)) &&
     (runcheck "PVS_cache_storage" self "VDI" (fun () -> Db_exists._VDI ~__context ~self:_r.pVS_cache_storage_VDI))
  (**  *)
  let _Feature ~__context ~self =
    let _r = DB_Action.Feature.get_record_internal ~__context ~self in
    (runcheck "Feature" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.feature_host))
  (**  *)
  let _SDN_controller ~__context ~self =
    true
  (**  *)
  let _PUSB ~__context ~self =
    let _r = DB_Action.PUSB.get_record_internal ~__context ~self in
    (runcheck "PUSB" self "USB_group" (fun () -> Db_exists._USB_group ~__context ~self:_r.pUSB_USB_group)) &&
     (runcheck "PUSB" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.pUSB_host))
  (**  *)
  let _USB_group ~__context ~self =
    true
  (**  *)
  let _VUSB ~__context ~self =
    let _r = DB_Action.VUSB.get_record_internal ~__context ~self in
    (runcheck "VUSB" self "VM" (fun () -> Db_exists._VM ~__context ~self:_r.vUSB_VM)) &&
     (runcheck "VUSB" self "USB_group" (fun () -> Db_exists._USB_group ~__context ~self:_r.vUSB_USB_group))
  (**  *)
  let _Cluster ~__context ~self =
    true
  (**  *)
  let _Cluster_host ~__context ~self =
    let _r = DB_Action.Cluster_host.get_record_internal ~__context ~self in
    (runcheck "Cluster_host" self "cluster" (fun () -> Db_exists._Cluster ~__context ~self:_r.cluster_host_cluster)) &&
     (runcheck "Cluster_host" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.cluster_host_host)) &&
     (runcheck "Cluster_host" self "PIF" (fun () -> Db_exists._PIF ~__context ~self:_r.cluster_host_PIF))
  (**  *)
  let _Certificate ~__context ~self =
    let _r = DB_Action.Certificate.get_record_internal ~__context ~self in
    (runcheck "Certificate" self "host" (fun () -> Db_exists._Host ~__context ~self:_r.certificate_host))
  (**  *)
  let all_Session ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Session ~__context ~self) (DB_Action.Session.get_all ~__context))
  (**  *)
  let all_Subject ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Subject ~__context ~self) (DB_Action.Subject.get_all ~__context))
  (**  *)
  let all_Role ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Role ~__context ~self) (DB_Action.Role.get_all ~__context))
  (**  *)
  let all_Task ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Task ~__context ~self) (DB_Action.Task.get_all ~__context))
  (**  *)
  let all_Pool ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Pool ~__context ~self) (DB_Action.Pool.get_all ~__context))
  (**  *)
  let all_Pool_patch ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Pool_patch ~__context ~self) (DB_Action.Pool_patch.get_all ~__context))
  (**  *)
  let all_Pool_update ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Pool_update ~__context ~self) (DB_Action.Pool_update.get_all ~__context))
  (**  *)
  let all_VM ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VM ~__context ~self) (DB_Action.VM.get_all ~__context))
  (**  *)
  let all_VM_metrics ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VM_metrics ~__context ~self) (DB_Action.VM_metrics.get_all ~__context))
  (**  *)
  let all_VM_guest_metrics ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VM_guest_metrics ~__context ~self) (DB_Action.VM_guest_metrics.get_all ~__context))
  (**  *)
  let all_VMPP ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VMPP ~__context ~self) (DB_Action.VMPP.get_all ~__context))
  (**  *)
  let all_VMSS ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VMSS ~__context ~self) (DB_Action.VMSS.get_all ~__context))
  (**  *)
  let all_VM_appliance ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VM_appliance ~__context ~self) (DB_Action.VM_appliance.get_all ~__context))
  (**  *)
  let all_DR_task ~__context =
    List.fold_left (&&) true (List.map (fun self -> _DR_task ~__context ~self) (DB_Action.DR_task.get_all ~__context))
  (**  *)
  let all_Host ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Host ~__context ~self) (DB_Action.Host.get_all ~__context))
  (**  *)
  let all_Host_crashdump ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Host_crashdump ~__context ~self) (DB_Action.Host_crashdump.get_all ~__context))
  (**  *)
  let all_Host_patch ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Host_patch ~__context ~self) (DB_Action.Host_patch.get_all ~__context))
  (**  *)
  let all_Host_metrics ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Host_metrics ~__context ~self) (DB_Action.Host_metrics.get_all ~__context))
  (**  *)
  let all_Host_cpu ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Host_cpu ~__context ~self) (DB_Action.Host_cpu.get_all ~__context))
  (**  *)
  let all_Network ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Network ~__context ~self) (DB_Action.Network.get_all ~__context))
  (**  *)
  let all_VIF ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VIF ~__context ~self) (DB_Action.VIF.get_all ~__context))
  (**  *)
  let all_VIF_metrics ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VIF_metrics ~__context ~self) (DB_Action.VIF_metrics.get_all ~__context))
  (**  *)
  let all_PIF ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PIF ~__context ~self) (DB_Action.PIF.get_all ~__context))
  (**  *)
  let all_PIF_metrics ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PIF_metrics ~__context ~self) (DB_Action.PIF_metrics.get_all ~__context))
  (**  *)
  let all_Bond ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Bond ~__context ~self) (DB_Action.Bond.get_all ~__context))
  (**  *)
  let all_VLAN ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VLAN ~__context ~self) (DB_Action.VLAN.get_all ~__context))
  (**  *)
  let all_SM ~__context =
    List.fold_left (&&) true (List.map (fun self -> _SM ~__context ~self) (DB_Action.SM.get_all ~__context))
  (**  *)
  let all_SR ~__context =
    List.fold_left (&&) true (List.map (fun self -> _SR ~__context ~self) (DB_Action.SR.get_all ~__context))
  (**  *)
  let all_LVHD ~__context =
    List.fold_left (&&) true (List.map (fun self -> _LVHD ~__context ~self) (DB_Action.LVHD.get_all ~__context))
  (**  *)
  let all_VDI ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VDI ~__context ~self) (DB_Action.VDI.get_all ~__context))
  (**  *)
  let all_VBD ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VBD ~__context ~self) (DB_Action.VBD.get_all ~__context))
  (**  *)
  let all_VBD_metrics ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VBD_metrics ~__context ~self) (DB_Action.VBD_metrics.get_all ~__context))
  (**  *)
  let all_PBD ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PBD ~__context ~self) (DB_Action.PBD.get_all ~__context))
  (**  *)
  let all_Crashdump ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Crashdump ~__context ~self) (DB_Action.Crashdump.get_all ~__context))
  (**  *)
  let all_VTPM ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VTPM ~__context ~self) (DB_Action.VTPM.get_all ~__context))
  (**  *)
  let all_Console ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Console ~__context ~self) (DB_Action.Console.get_all ~__context))
  (**  *)
  let all_User ~__context =
    List.fold_left (&&) true (List.map (fun self -> _User ~__context ~self) (DB_Action.User.get_all ~__context))
  (**  *)
  let all_Blob ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Blob ~__context ~self) (DB_Action.Blob.get_all ~__context))
  (**  *)
  let all_Secret ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Secret ~__context ~self) (DB_Action.Secret.get_all ~__context))
  (**  *)
  let all_Tunnel ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Tunnel ~__context ~self) (DB_Action.Tunnel.get_all ~__context))
  (**  *)
  let all_Network_sriov ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Network_sriov ~__context ~self) (DB_Action.Network_sriov.get_all ~__context))
  (**  *)
  let all_PCI ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PCI ~__context ~self) (DB_Action.PCI.get_all ~__context))
  (**  *)
  let all_PGPU ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PGPU ~__context ~self) (DB_Action.PGPU.get_all ~__context))
  (**  *)
  let all_GPU_group ~__context =
    List.fold_left (&&) true (List.map (fun self -> _GPU_group ~__context ~self) (DB_Action.GPU_group.get_all ~__context))
  (**  *)
  let all_VGPU ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VGPU ~__context ~self) (DB_Action.VGPU.get_all ~__context))
  (**  *)
  let all_VGPU_type ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VGPU_type ~__context ~self) (DB_Action.VGPU_type.get_all ~__context))
  (**  *)
  let all_PVS_site ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PVS_site ~__context ~self) (DB_Action.PVS_site.get_all ~__context))
  (**  *)
  let all_PVS_server ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PVS_server ~__context ~self) (DB_Action.PVS_server.get_all ~__context))
  (**  *)
  let all_PVS_proxy ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PVS_proxy ~__context ~self) (DB_Action.PVS_proxy.get_all ~__context))
  (**  *)
  let all_PVS_cache_storage ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PVS_cache_storage ~__context ~self) (DB_Action.PVS_cache_storage.get_all ~__context))
  (**  *)
  let all_Feature ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Feature ~__context ~self) (DB_Action.Feature.get_all ~__context))
  (**  *)
  let all_SDN_controller ~__context =
    List.fold_left (&&) true (List.map (fun self -> _SDN_controller ~__context ~self) (DB_Action.SDN_controller.get_all ~__context))
  (**  *)
  let all_PUSB ~__context =
    List.fold_left (&&) true (List.map (fun self -> _PUSB ~__context ~self) (DB_Action.PUSB.get_all ~__context))
  (**  *)
  let all_USB_group ~__context =
    List.fold_left (&&) true (List.map (fun self -> _USB_group ~__context ~self) (DB_Action.USB_group.get_all ~__context))
  (**  *)
  let all_VUSB ~__context =
    List.fold_left (&&) true (List.map (fun self -> _VUSB ~__context ~self) (DB_Action.VUSB.get_all ~__context))
  (**  *)
  let all_Cluster ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Cluster ~__context ~self) (DB_Action.Cluster.get_all ~__context))
  (**  *)
  let all_Cluster_host ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Cluster_host ~__context ~self) (DB_Action.Cluster_host.get_all ~__context))
  (**  *)
  let all_Certificate ~__context =
    List.fold_left (&&) true (List.map (fun self -> _Certificate ~__context ~self) (DB_Action.Certificate.get_all ~__context))
  (**  *)
  let all ~__context =
    (all_Session ~__context)&&
(all_Subject ~__context)&&
(all_Role ~__context)&&
(all_Task ~__context)&&
(all_Pool ~__context)&&
(all_Pool_patch ~__context)&&
(all_Pool_update ~__context)&&
(all_VM ~__context)&&
(all_VM_metrics ~__context)&&
(all_VM_guest_metrics ~__context)&&
(all_VMPP ~__context)&&
(all_VMSS ~__context)&&
(all_VM_appliance ~__context)&&
(all_DR_task ~__context)&&
(all_Host ~__context)&&
(all_Host_crashdump ~__context)&&
(all_Host_patch ~__context)&&
(all_Host_metrics ~__context)&&
(all_Host_cpu ~__context)&&
(all_Network ~__context)&&
(all_VIF ~__context)&&
(all_VIF_metrics ~__context)&&
(all_PIF ~__context)&&
(all_PIF_metrics ~__context)&&
(all_Bond ~__context)&&
(all_VLAN ~__context)&&
(all_SM ~__context)&&
(all_SR ~__context)&&
(all_LVHD ~__context)&&
(all_VDI ~__context)&&
(all_VBD ~__context)&&
(all_VBD_metrics ~__context)&&
(all_PBD ~__context)&&
(all_Crashdump ~__context)&&
(all_VTPM ~__context)&&
(all_Console ~__context)&&
(all_User ~__context)&&
(all_Blob ~__context)&&
(all_Secret ~__context)&&
(all_Tunnel ~__context)&&
(all_Network_sriov ~__context)&&
(all_PCI ~__context)&&
(all_PGPU ~__context)&&
(all_GPU_group ~__context)&&
(all_VGPU ~__context)&&
(all_VGPU_type ~__context)&&
(all_PVS_site ~__context)&&
(all_PVS_server ~__context)&&
(all_PVS_proxy ~__context)&&
(all_PVS_cache_storage ~__context)&&
(all_Feature ~__context)&&
(all_SDN_controller ~__context)&&
(all_PUSB ~__context)&&
(all_USB_group ~__context)&&
(all_VUSB ~__context)&&
(all_Cluster ~__context)&&
(all_Cluster_host ~__context)&&
(all_Certificate ~__context)

end

